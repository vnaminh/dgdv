/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/scripts.js":
/*!*********************************!*\
  !*** ./resources/js/scripts.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Keenthemes' plugins\nwindow.KTUtil = __webpack_require__(/*! ../metronic/js/components/util.js */ \"./resources/metronic/js/components/util.js\");\nwindow.KTApp = __webpack_require__(/*! ../metronic/js/components/app.js */ \"./resources/metronic/js/components/app.js\");\nwindow.KTCard = __webpack_require__(/*! ../metronic/js/components/card.js */ \"./resources/metronic/js/components/card.js\");\nwindow.KTCookie = __webpack_require__(/*! ../metronic/js/components/cookie.js */ \"./resources/metronic/js/components/cookie.js\");\nwindow.KTDialog = __webpack_require__(/*! ../metronic/js/components/dialog.js */ \"./resources/metronic/js/components/dialog.js\");\nwindow.KTHeader = __webpack_require__(/*! ../metronic/js/components/header.js */ \"./resources/metronic/js/components/header.js\");\nwindow.KTImageInput = __webpack_require__(/*! ../metronic/js/components/image-input.js */ \"./resources/metronic/js/components/image-input.js\");\nwindow.KTMenu = __webpack_require__(/*! ../metronic/js/components/menu.js */ \"./resources/metronic/js/components/menu.js\");\nwindow.KTOffcanvas = __webpack_require__(/*! ../metronic/js/components/offcanvas.js */ \"./resources/metronic/js/components/offcanvas.js\");\nwindow.KTScrolltop = __webpack_require__(/*! ../metronic/js/components/scrolltop.js */ \"./resources/metronic/js/components/scrolltop.js\");\nwindow.KTToggle = __webpack_require__(/*! ../metronic/js/components/toggle.js */ \"./resources/metronic/js/components/toggle.js\");\nwindow.KTWizard = __webpack_require__(/*! ../metronic/js/components/wizard.js */ \"./resources/metronic/js/components/wizard.js\");\n\n__webpack_require__(/*! ../metronic/js/components/datatable/core.datatable.js */ \"./resources/metronic/js/components/datatable/core.datatable.js\");\n\n__webpack_require__(/*! ../metronic/js/components/datatable/datatable.checkbox.js */ \"./resources/metronic/js/components/datatable/datatable.checkbox.js\");\n\n__webpack_require__(/*! ../metronic/js/components/datatable/datatable.rtl.js */ \"./resources/metronic/js/components/datatable/datatable.rtl.js\"); // Metronic layout base js\n\n\nwindow.KTLayoutAside = __webpack_require__(/*! ../metronic/js/layout/base/aside.js */ \"./resources/metronic/js/layout/base/aside.js\");\nwindow.KTLayoutAsideMenu = __webpack_require__(/*! ../metronic/js/layout/base/aside-menu.js */ \"./resources/metronic/js/layout/base/aside-menu.js\");\nwindow.KTLayoutAsideToggle = __webpack_require__(/*! ../metronic/js/layout/base/aside-toggle.js */ \"./resources/metronic/js/layout/base/aside-toggle.js\");\nwindow.KTLayoutBrand = __webpack_require__(/*! ../metronic/js/layout/base/brand.js */ \"./resources/metronic/js/layout/base/brand.js\");\nwindow.KTLayoutContent = __webpack_require__(/*! ../metronic/js/layout/base/content.js */ \"./resources/metronic/js/layout/base/content.js\");\nwindow.KTLayoutFooter = __webpack_require__(/*! ../metronic/js/layout/base/footer.js */ \"./resources/metronic/js/layout/base/footer.js\");\nwindow.KTLayoutHeader = __webpack_require__(/*! ../metronic/js/layout/base/header.js */ \"./resources/metronic/js/layout/base/header.js\");\nwindow.KTLayoutHeaderMenu = __webpack_require__(/*! ../metronic/js/layout/base/header-menu.js */ \"./resources/metronic/js/layout/base/header-menu.js\");\nwindow.KTLayoutHeaderTopbar = __webpack_require__(/*! ../metronic/js/layout/base/header-topbar.js */ \"./resources/metronic/js/layout/base/header-topbar.js\");\nwindow.KTLayoutStickyCard = __webpack_require__(/*! ../metronic/js/layout/base/sticky-card.js */ \"./resources/metronic/js/layout/base/sticky-card.js\");\nwindow.KTLayoutStretchedCard = __webpack_require__(/*! ../metronic/js/layout/base/stretched-card.js */ \"./resources/metronic/js/layout/base/stretched-card.js\");\nwindow.KTLayoutSubheader = __webpack_require__(/*! ../metronic/js/layout/base/subheader.js */ \"./resources/metronic/js/layout/base/subheader.js\"); // Metronic layout extended js\n\nwindow.KTLayoutChat = __webpack_require__(/*! ../metronic/js/layout/extended/chat.js */ \"./resources/metronic/js/layout/extended/chat.js\");\nwindow.KTLayoutDemoPanel = __webpack_require__(/*! ../metronic/js/layout/extended/demo-panel.js */ \"./resources/metronic/js/layout/extended/demo-panel.js\");\nwindow.KTLayoutExamples = __webpack_require__(/*! ../metronic/js/layout/extended/examples.js */ \"./resources/metronic/js/layout/extended/examples.js\");\nwindow.KTLayoutQuickActions = __webpack_require__(/*! ../metronic/js/layout/extended/quick-actions.js */ \"./resources/metronic/js/layout/extended/quick-actions.js\");\nwindow.KTLayoutQuickCartPanel = __webpack_require__(/*! ../metronic/js/layout/extended/quick-cart.js */ \"./resources/metronic/js/layout/extended/quick-cart.js\");\nwindow.KTLayoutQuickNotifications = __webpack_require__(/*! ../metronic/js/layout/extended/quick-notifications.js */ \"./resources/metronic/js/layout/extended/quick-notifications.js\");\nwindow.KTLayoutQuickPanel = __webpack_require__(/*! ../metronic/js/layout/extended/quick-panel.js */ \"./resources/metronic/js/layout/extended/quick-panel.js\");\nwindow.KTLayoutQuickSearch = __webpack_require__(/*! ../metronic/js/layout/extended/quick-search.js */ \"./resources/metronic/js/layout/extended/quick-search.js\");\nwindow.KTLayoutQuickUser = __webpack_require__(/*! ../metronic/js/layout/extended/quick-user.js */ \"./resources/metronic/js/layout/extended/quick-user.js\");\nwindow.KTLayoutScrolltop = __webpack_require__(/*! ../metronic/js/layout/extended/scrolltop.js */ \"./resources/metronic/js/layout/extended/scrolltop.js\");\nwindow.KTLayoutSearch = window.KTLayoutSearchOffcanvas = __webpack_require__(/*! ../metronic/js/layout/extended/search.js */ \"./resources/metronic/js/layout/extended/search.js\");\n\n__webpack_require__(/*! ../metronic/js/layout/initialize.js */ \"./resources/metronic/js/layout/initialize.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvc2NyaXB0cy5qcz9iOGQ4Il0sIm5hbWVzIjpbIndpbmRvdyIsIktUVXRpbCIsInJlcXVpcmUiLCJLVEFwcCIsIktUQ2FyZCIsIktUQ29va2llIiwiS1REaWFsb2ciLCJLVEhlYWRlciIsIktUSW1hZ2VJbnB1dCIsIktUTWVudSIsIktUT2ZmY2FudmFzIiwiS1RTY3JvbGx0b3AiLCJLVFRvZ2dsZSIsIktUV2l6YXJkIiwiS1RMYXlvdXRBc2lkZSIsIktUTGF5b3V0QXNpZGVNZW51IiwiS1RMYXlvdXRBc2lkZVRvZ2dsZSIsIktUTGF5b3V0QnJhbmQiLCJLVExheW91dENvbnRlbnQiLCJLVExheW91dEZvb3RlciIsIktUTGF5b3V0SGVhZGVyIiwiS1RMYXlvdXRIZWFkZXJNZW51IiwiS1RMYXlvdXRIZWFkZXJUb3BiYXIiLCJLVExheW91dFN0aWNreUNhcmQiLCJLVExheW91dFN0cmV0Y2hlZENhcmQiLCJLVExheW91dFN1YmhlYWRlciIsIktUTGF5b3V0Q2hhdCIsIktUTGF5b3V0RGVtb1BhbmVsIiwiS1RMYXlvdXRFeGFtcGxlcyIsIktUTGF5b3V0UXVpY2tBY3Rpb25zIiwiS1RMYXlvdXRRdWlja0NhcnRQYW5lbCIsIktUTGF5b3V0UXVpY2tOb3RpZmljYXRpb25zIiwiS1RMYXlvdXRRdWlja1BhbmVsIiwiS1RMYXlvdXRRdWlja1NlYXJjaCIsIktUTGF5b3V0UXVpY2tVc2VyIiwiS1RMYXlvdXRTY3JvbGx0b3AiLCJLVExheW91dFNlYXJjaCIsIktUTGF5b3V0U2VhcmNoT2ZmY2FudmFzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBQSxNQUFNLENBQUNDLE1BQVAsR0FBZ0JDLG1CQUFPLENBQUMscUZBQUQsQ0FBdkI7QUFDQUYsTUFBTSxDQUFDRyxLQUFQLEdBQWVELG1CQUFPLENBQUMsbUZBQUQsQ0FBdEI7QUFDQUYsTUFBTSxDQUFDSSxNQUFQLEdBQWdCRixtQkFBTyxDQUFDLHFGQUFELENBQXZCO0FBQ0FGLE1BQU0sQ0FBQ0ssUUFBUCxHQUFrQkgsbUJBQU8sQ0FBQyx5RkFBRCxDQUF6QjtBQUNBRixNQUFNLENBQUNNLFFBQVAsR0FBa0JKLG1CQUFPLENBQUMseUZBQUQsQ0FBekI7QUFDQUYsTUFBTSxDQUFDTyxRQUFQLEdBQWtCTCxtQkFBTyxDQUFDLHlGQUFELENBQXpCO0FBQ0FGLE1BQU0sQ0FBQ1EsWUFBUCxHQUFzQk4sbUJBQU8sQ0FBQyxtR0FBRCxDQUE3QjtBQUNBRixNQUFNLENBQUNTLE1BQVAsR0FBZ0JQLG1CQUFPLENBQUMscUZBQUQsQ0FBdkI7QUFDQUYsTUFBTSxDQUFDVSxXQUFQLEdBQXFCUixtQkFBTyxDQUFDLCtGQUFELENBQTVCO0FBQ0FGLE1BQU0sQ0FBQ1csV0FBUCxHQUFxQlQsbUJBQU8sQ0FBQywrRkFBRCxDQUE1QjtBQUNBRixNQUFNLENBQUNZLFFBQVAsR0FBa0JWLG1CQUFPLENBQUMseUZBQUQsQ0FBekI7QUFDQUYsTUFBTSxDQUFDYSxRQUFQLEdBQWtCWCxtQkFBTyxDQUFDLHlGQUFELENBQXpCOztBQUNBQSxtQkFBTyxDQUFDLDZIQUFELENBQVA7O0FBQ0FBLG1CQUFPLENBQUMscUlBQUQsQ0FBUDs7QUFDQUEsbUJBQU8sQ0FBQywySEFBRCxDQUFQLEMsQ0FFQTs7O0FBQ0FGLE1BQU0sQ0FBQ2MsYUFBUCxHQUF1QlosbUJBQU8sQ0FBQyx5RkFBRCxDQUE5QjtBQUNBRixNQUFNLENBQUNlLGlCQUFQLEdBQTJCYixtQkFBTyxDQUFDLG1HQUFELENBQWxDO0FBQ0FGLE1BQU0sQ0FBQ2dCLG1CQUFQLEdBQTZCZCxtQkFBTyxDQUFDLHVHQUFELENBQXBDO0FBQ0FGLE1BQU0sQ0FBQ2lCLGFBQVAsR0FBdUJmLG1CQUFPLENBQUMseUZBQUQsQ0FBOUI7QUFDQUYsTUFBTSxDQUFDa0IsZUFBUCxHQUF5QmhCLG1CQUFPLENBQUMsNkZBQUQsQ0FBaEM7QUFDQUYsTUFBTSxDQUFDbUIsY0FBUCxHQUF3QmpCLG1CQUFPLENBQUMsMkZBQUQsQ0FBL0I7QUFDQUYsTUFBTSxDQUFDb0IsY0FBUCxHQUF3QmxCLG1CQUFPLENBQUMsMkZBQUQsQ0FBL0I7QUFDQUYsTUFBTSxDQUFDcUIsa0JBQVAsR0FBNEJuQixtQkFBTyxDQUFDLHFHQUFELENBQW5DO0FBQ0FGLE1BQU0sQ0FBQ3NCLG9CQUFQLEdBQThCcEIsbUJBQU8sQ0FBQyx5R0FBRCxDQUFyQztBQUNBRixNQUFNLENBQUN1QixrQkFBUCxHQUE0QnJCLG1CQUFPLENBQUMscUdBQUQsQ0FBbkM7QUFDQUYsTUFBTSxDQUFDd0IscUJBQVAsR0FBK0J0QixtQkFBTyxDQUFDLDJHQUFELENBQXRDO0FBQ0FGLE1BQU0sQ0FBQ3lCLGlCQUFQLEdBQTJCdkIsbUJBQU8sQ0FBQyxpR0FBRCxDQUFsQyxDLENBRUE7O0FBQ0FGLE1BQU0sQ0FBQzBCLFlBQVAsR0FBc0J4QixtQkFBTyxDQUFDLCtGQUFELENBQTdCO0FBQ0FGLE1BQU0sQ0FBQzJCLGlCQUFQLEdBQTJCekIsbUJBQU8sQ0FBQywyR0FBRCxDQUFsQztBQUNBRixNQUFNLENBQUM0QixnQkFBUCxHQUEwQjFCLG1CQUFPLENBQUMsdUdBQUQsQ0FBakM7QUFDQUYsTUFBTSxDQUFDNkIsb0JBQVAsR0FBOEIzQixtQkFBTyxDQUFDLGlIQUFELENBQXJDO0FBQ0FGLE1BQU0sQ0FBQzhCLHNCQUFQLEdBQWdDNUIsbUJBQU8sQ0FBQywyR0FBRCxDQUF2QztBQUNBRixNQUFNLENBQUMrQiwwQkFBUCxHQUFvQzdCLG1CQUFPLENBQUMsNkhBQUQsQ0FBM0M7QUFDQUYsTUFBTSxDQUFDZ0Msa0JBQVAsR0FBNEI5QixtQkFBTyxDQUFDLDZHQUFELENBQW5DO0FBQ0FGLE1BQU0sQ0FBQ2lDLG1CQUFQLEdBQTZCL0IsbUJBQU8sQ0FBQywrR0FBRCxDQUFwQztBQUNBRixNQUFNLENBQUNrQyxpQkFBUCxHQUEyQmhDLG1CQUFPLENBQUMsMkdBQUQsQ0FBbEM7QUFDQUYsTUFBTSxDQUFDbUMsaUJBQVAsR0FBMkJqQyxtQkFBTyxDQUFDLHlHQUFELENBQWxDO0FBQ0FGLE1BQU0sQ0FBQ29DLGNBQVAsR0FBd0JwQyxNQUFNLENBQUNxQyx1QkFBUCxHQUFpQ25DLG1CQUFPLENBQUMsbUdBQUQsQ0FBaEU7O0FBRUFBLG1CQUFPLENBQUMseUZBQUQsQ0FBUCIsImZpbGUiOiIuL3Jlc291cmNlcy9qcy9zY3JpcHRzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gS2VlbnRoZW1lcycgcGx1Z2luc1xyXG53aW5kb3cuS1RVdGlsID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvY29tcG9uZW50cy91dGlsLmpzJyk7XHJcbndpbmRvdy5LVEFwcCA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2NvbXBvbmVudHMvYXBwLmpzJyk7XHJcbndpbmRvdy5LVENhcmQgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9jb21wb25lbnRzL2NhcmQuanMnKTtcclxud2luZG93LktUQ29va2llID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvY29tcG9uZW50cy9jb29raWUuanMnKTtcclxud2luZG93LktURGlhbG9nID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvY29tcG9uZW50cy9kaWFsb2cuanMnKTtcclxud2luZG93LktUSGVhZGVyID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvY29tcG9uZW50cy9oZWFkZXIuanMnKTtcclxud2luZG93LktUSW1hZ2VJbnB1dCA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2NvbXBvbmVudHMvaW1hZ2UtaW5wdXQuanMnKTtcclxud2luZG93LktUTWVudSA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2NvbXBvbmVudHMvbWVudS5qcycpO1xyXG53aW5kb3cuS1RPZmZjYW52YXMgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9jb21wb25lbnRzL29mZmNhbnZhcy5qcycpO1xyXG53aW5kb3cuS1RTY3JvbGx0b3AgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9jb21wb25lbnRzL3Njcm9sbHRvcC5qcycpO1xyXG53aW5kb3cuS1RUb2dnbGUgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9jb21wb25lbnRzL3RvZ2dsZS5qcycpO1xyXG53aW5kb3cuS1RXaXphcmQgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9jb21wb25lbnRzL3dpemFyZC5qcycpO1xyXG5yZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9jb21wb25lbnRzL2RhdGF0YWJsZS9jb3JlLmRhdGF0YWJsZS5qcycpO1xyXG5yZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9jb21wb25lbnRzL2RhdGF0YWJsZS9kYXRhdGFibGUuY2hlY2tib3guanMnKTtcclxucmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvY29tcG9uZW50cy9kYXRhdGFibGUvZGF0YXRhYmxlLnJ0bC5qcycpO1xyXG5cclxuLy8gTWV0cm9uaWMgbGF5b3V0IGJhc2UganNcclxud2luZG93LktUTGF5b3V0QXNpZGUgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvYmFzZS9hc2lkZS5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXRBc2lkZU1lbnUgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvYmFzZS9hc2lkZS1tZW51LmpzJyk7XHJcbndpbmRvdy5LVExheW91dEFzaWRlVG9nZ2xlID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvYXNpZGUtdG9nZ2xlLmpzJyk7XHJcbndpbmRvdy5LVExheW91dEJyYW5kID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvYnJhbmQuanMnKTtcclxud2luZG93LktUTGF5b3V0Q29udGVudCA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2NvbnRlbnQuanMnKTtcclxud2luZG93LktUTGF5b3V0Rm9vdGVyID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvZm9vdGVyLmpzJyk7XHJcbndpbmRvdy5LVExheW91dEhlYWRlciA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2hlYWRlci5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXRIZWFkZXJNZW51ID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvaGVhZGVyLW1lbnUuanMnKTtcclxud2luZG93LktUTGF5b3V0SGVhZGVyVG9wYmFyID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvaGVhZGVyLXRvcGJhci5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXRTdGlja3lDYXJkID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2Uvc3RpY2t5LWNhcmQuanMnKTtcclxud2luZG93LktUTGF5b3V0U3RyZXRjaGVkQ2FyZCA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9iYXNlL3N0cmV0Y2hlZC1jYXJkLmpzJyk7XHJcbndpbmRvdy5LVExheW91dFN1YmhlYWRlciA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9iYXNlL3N1YmhlYWRlci5qcycpO1xyXG5cclxuLy8gTWV0cm9uaWMgbGF5b3V0IGV4dGVuZGVkIGpzXHJcbndpbmRvdy5LVExheW91dENoYXQgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvY2hhdC5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXREZW1vUGFuZWwgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvZGVtby1wYW5lbC5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXRFeGFtcGxlcyA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9leHRlbmRlZC9leGFtcGxlcy5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXRRdWlja0FjdGlvbnMgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvcXVpY2stYWN0aW9ucy5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXRRdWlja0NhcnRQYW5lbCA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9leHRlbmRlZC9xdWljay1jYXJ0LmpzJyk7XHJcbndpbmRvdy5LVExheW91dFF1aWNrTm90aWZpY2F0aW9ucyA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9leHRlbmRlZC9xdWljay1ub3RpZmljYXRpb25zLmpzJyk7XHJcbndpbmRvdy5LVExheW91dFF1aWNrUGFuZWwgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvcXVpY2stcGFuZWwuanMnKTtcclxud2luZG93LktUTGF5b3V0UXVpY2tTZWFyY2ggPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvcXVpY2stc2VhcmNoLmpzJyk7XHJcbndpbmRvdy5LVExheW91dFF1aWNrVXNlciA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9leHRlbmRlZC9xdWljay11c2VyLmpzJyk7XHJcbndpbmRvdy5LVExheW91dFNjcm9sbHRvcCA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9leHRlbmRlZC9zY3JvbGx0b3AuanMnKTtcclxud2luZG93LktUTGF5b3V0U2VhcmNoID0gd2luZG93LktUTGF5b3V0U2VhcmNoT2ZmY2FudmFzID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3NlYXJjaC5qcycpO1xyXG5cclxucmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2luaXRpYWxpemUuanMnKTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/scripts.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/app.js":
/*!*************************************************!*\
  !*** ./resources/metronic/js/components/app.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Component Definition\n\nvar KTApp = function () {\n  /** @type {object} colors State colors **/\n  var settings = {};\n\n  var _initTooltip = function initTooltip(el) {\n    var theme = el.data('theme') ? 'tooltip-' + el.data('theme') : '';\n    var width = el.data('width') == 'auto' ? 'tooltop-auto-width' : '';\n    var trigger = el.data('trigger') ? el.data('trigger') : 'hover';\n    $(el).tooltip({\n      trigger: trigger,\n      template: '<div class=\"tooltip ' + theme + ' ' + width + '\" role=\"tooltip\">\\\r\n                <div class=\"arrow\"></div>\\\r\n                <div class=\"tooltip-inner\"></div>\\\r\n            </div>'\n    });\n  };\n\n  var _initTooltips = function initTooltips() {\n    // init bootstrap tooltips\n    $('[data-toggle=\"tooltip\"]').each(function () {\n      _initTooltip($(this));\n    });\n  };\n\n  var _initPopover = function initPopover(el) {\n    var skin = el.data('skin') ? 'popover-' + el.data('skin') : '';\n    var triggerValue = el.data('trigger') ? el.data('trigger') : 'hover';\n    el.popover({\n      trigger: triggerValue,\n      template: '\\\r\n            <div class=\"popover ' + skin + '\" role=\"tooltip\">\\\r\n                <div class=\"arrow\"></div>\\\r\n                <h3 class=\"popover-header\"></h3>\\\r\n                <div class=\"popover-body\"></div>\\\r\n            </div>'\n    });\n  };\n\n  var _initPopovers = function initPopovers() {\n    // init bootstrap popover\n    $('[data-toggle=\"popover\"]').each(function () {\n      _initPopover($(this));\n    });\n  };\n\n  var initFileInput = function initFileInput() {\n    // init bootstrap popover\n    $('.custom-file-input').on('change', function () {\n      var fileName = $(this).val();\n      $(this).next('.custom-file-label').addClass(\"selected\").html(fileName);\n    });\n  };\n\n  var initScroll = function initScroll() {\n    $('[data-scroll=\"true\"]').each(function () {\n      var el = $(this);\n      KTUtil.scrollInit(this, {\n        mobileNativeScroll: true,\n        handleWindowResize: true,\n        rememberPosition: el.data('remember-position') == 'true' ? true : false\n      });\n    });\n  };\n\n  var initAlerts = function initAlerts() {\n    // init bootstrap popover\n    $('body').on('click', '[data-close=alert]', function () {\n      $(this).closest('.alert').hide();\n    });\n  };\n\n  var _initCard = function initCard(el, options) {\n    // init card tools\n    var el = $(el);\n    var card = new KTCard(el[0], options);\n  };\n\n  var _initCards = function initCards() {\n    // init card tools\n    $('[data-card=\"true\"]').each(function () {\n      var el = $(this);\n      var options = {};\n\n      if (el.data('data-card-initialized') !== true) {\n        _initCard(el, options);\n\n        el.data('data-card-initialized', true);\n      }\n    });\n  };\n\n  var initStickyCard = function initStickyCard() {\n    if (typeof Sticky === 'undefined') {\n      return;\n    }\n\n    var sticky = new Sticky('[data-sticky=\"true\"]');\n  };\n\n  var _initAbsoluteDropdown = function initAbsoluteDropdown(context) {\n    var dropdownMenu;\n\n    if (!context) {\n      return;\n    }\n\n    $('body').on('show.bs.dropdown', context, function (e) {\n      dropdownMenu = $(e.target).find('.dropdown-menu');\n      $('body').append(dropdownMenu.detach());\n      dropdownMenu.css('display', 'block');\n      dropdownMenu.position({\n        'my': 'right top',\n        'at': 'right bottom',\n        'of': $(e.relatedTarget)\n      });\n    }).on('hide.bs.dropdown', context, function (e) {\n      $(e.target).append(dropdownMenu.detach());\n      dropdownMenu.hide();\n    });\n  };\n\n  var initAbsoluteDropdowns = function initAbsoluteDropdowns() {\n    $('body').on('show.bs.dropdown', function (e) {\n      // e.target is always parent (contains toggler and menu)\n      var $toggler = $(e.target).find(\"[data-attach='body']\");\n\n      if ($toggler.length === 0) {\n        return;\n      }\n\n      var $dropdownMenu = $(e.target).find('.dropdown-menu'); // save detached menu\n\n      var $detachedDropdownMenu = $dropdownMenu.detach(); // save reference to detached menu inside data of toggler\n\n      $toggler.data('dropdown-menu', $detachedDropdownMenu);\n      $('body').append($detachedDropdownMenu);\n      $detachedDropdownMenu.css('display', 'block');\n      $detachedDropdownMenu.position({\n        my: 'right top',\n        at: 'right bottom',\n        of: $(e.relatedTarget)\n      });\n    });\n    $('body').on('hide.bs.dropdown', function (e) {\n      var $toggler = $(e.target).find(\"[data-attach='body']\");\n\n      if ($toggler.length === 0) {\n        return;\n      } // access to reference of detached menu from data of toggler\n\n\n      var $detachedDropdownMenu = $toggler.data('dropdown-menu'); // re-append detached menu inside parent\n\n      $(e.target).append($detachedDropdownMenu.detach()); // hide dropdown\n\n      $detachedDropdownMenu.hide();\n    });\n  };\n\n  return {\n    init: function init(settingsArray) {\n      if (settingsArray) {\n        settings = settingsArray;\n      }\n\n      KTApp.initComponents();\n    },\n    initComponents: function initComponents() {\n      initScroll();\n\n      _initTooltips();\n\n      _initPopovers();\n\n      initAlerts();\n      initFileInput();\n\n      _initCards();\n\n      initStickyCard();\n      initAbsoluteDropdowns();\n    },\n    initTooltips: function initTooltips() {\n      _initTooltips();\n    },\n    initTooltip: function initTooltip(el) {\n      _initTooltip(el);\n    },\n    initPopovers: function initPopovers() {\n      _initPopovers();\n    },\n    initPopover: function initPopover(el) {\n      _initPopover(el);\n    },\n    initCard: function initCard(el, options) {\n      _initCard(el, options);\n    },\n    initCards: function initCards() {\n      _initCards();\n    },\n    initSticky: function (_initSticky) {\n      function initSticky() {\n        return _initSticky.apply(this, arguments);\n      }\n\n      initSticky.toString = function () {\n        return _initSticky.toString();\n      };\n\n      return initSticky;\n    }(function () {\n      initSticky();\n    }),\n    initAbsoluteDropdown: function initAbsoluteDropdown(context) {\n      _initAbsoluteDropdown(context);\n    },\n    block: function block(target, options) {\n      var el = $(target);\n      options = $.extend(true, {\n        opacity: 0.05,\n        overlayColor: '#000000',\n        type: '',\n        size: '',\n        state: 'primary',\n        centerX: true,\n        centerY: true,\n        message: '',\n        shadow: true,\n        width: 'auto'\n      }, options);\n      var html;\n      var version = options.type ? 'spinner-' + options.type : '';\n      var state = options.state ? 'spinner-' + options.state : '';\n      var size = options.size ? 'spinner-' + options.size : '';\n      var spinner = '<span class=\"spinner ' + version + ' ' + state + ' ' + size + '\"></span';\n\n      if (options.message && options.message.length > 0) {\n        var classes = 'blockui ' + (options.shadow === false ? 'blockui' : '');\n        html = '<div class=\"' + classes + '\"><span>' + options.message + '</span>' + spinner + '</div>';\n        var el = document.createElement('div');\n        $('body').prepend(el);\n        KTUtil.addClass(el, classes);\n        el.innerHTML = html;\n        options.width = KTUtil.actualWidth(el) + 10;\n        KTUtil.remove(el);\n\n        if (target == 'body') {\n          html = '<div class=\"' + classes + '\" style=\"margin-left:-' + options.width / 2 + 'px;\"><span>' + options.message + '</span><span>' + spinner + '</span></div>';\n        }\n      } else {\n        html = spinner;\n      }\n\n      var params = {\n        message: html,\n        centerY: options.centerY,\n        centerX: options.centerX,\n        css: {\n          top: '30%',\n          left: '50%',\n          border: '0',\n          padding: '0',\n          backgroundColor: 'none',\n          width: options.width\n        },\n        overlayCSS: {\n          backgroundColor: options.overlayColor,\n          opacity: options.opacity,\n          cursor: 'wait',\n          zIndex: target == 'body' ? 1100 : 10\n        },\n        onUnblock: function onUnblock() {\n          if (el && el[0]) {\n            KTUtil.css(el[0], 'position', '');\n            KTUtil.css(el[0], 'zoom', '');\n          }\n        }\n      };\n\n      if (target == 'body') {\n        params.css.top = '50%';\n        $.blockUI(params);\n      } else {\n        var el = $(target);\n        el.block(params);\n      }\n    },\n    unblock: function unblock(target) {\n      if (target && target != 'body') {\n        $(target).unblock();\n      } else {\n        $.unblockUI();\n      }\n    },\n    blockPage: function blockPage(options) {\n      return KTApp.block('body', options);\n    },\n    unblockPage: function unblockPage() {\n      return KTApp.unblock('body');\n    },\n    getSettings: function getSettings() {\n      return settings;\n    }\n  };\n}(); // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTApp;\n} // Initialize KTApp class on document ready\n\n\n$(document).ready(function () {\n  KTApp.init(KTAppSettings);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/app.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/card.js":
/*!**************************************************!*\
  !*** ./resources/metronic/js/components/card.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Component Definition\n\nvar KTCard = function KTCard(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false; // Get element object\n\n  var element = KTUtil.getById(elementId);\n  var body = KTUtil.getBody();\n\n  if (!element) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    toggleSpeed: 400,\n    sticky: {\n      releseOnReverse: false,\n      offset: 300,\n      zIndex: 101\n    }\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Construct\r\n     */\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('card')) {\n        the = KTUtil.data(element).get('card');\n      } else {\n        // reset menu\n        Plugin.init(options); // build menu\n\n        Plugin.build();\n        KTUtil.data(element).set('card', the);\n      }\n\n      return the;\n    },\n\n    /**\r\n     * Init card\r\n     */\n    init: function init(options) {\n      the.element = element;\n      the.events = []; // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n      the.header = KTUtil.child(element, '.card-header');\n      the.footer = KTUtil.child(element, '.card-footer');\n\n      if (KTUtil.child(element, '.card-body')) {\n        the.body = KTUtil.child(element, '.card-body');\n      } else if (KTUtil.child(element, '.form')) {\n        the.body = KTUtil.child(element, '.form');\n      }\n    },\n\n    /**\r\n     * Build Form Wizard\r\n     */\n    build: function build() {\n      // Remove\n      var remove = KTUtil.find(the.header, '[data-card-tool=remove]');\n\n      if (remove) {\n        KTUtil.addEvent(remove, 'click', function (e) {\n          e.preventDefault();\n          Plugin.remove();\n        });\n      } // Reload\n\n\n      var reload = KTUtil.find(the.header, '[data-card-tool=reload]');\n\n      if (reload) {\n        KTUtil.addEvent(reload, 'click', function (e) {\n          e.preventDefault();\n          Plugin.reload();\n        });\n      } // Toggle\n\n\n      var toggle = KTUtil.find(the.header, '[data-card-tool=toggle]');\n\n      if (toggle) {\n        KTUtil.addEvent(toggle, 'click', function (e) {\n          e.preventDefault();\n          Plugin.toggle();\n        });\n      }\n    },\n\n    /**\r\n     * Enable stickt mode\r\n     */\n    initSticky: function initSticky() {\n      var lastScrollTop = 0;\n      var offset = the.options.sticky.offset;\n\n      if (!the.header) {\n        return;\n      }\n\n      window.addEventListener('scroll', Plugin.onScrollSticky);\n    },\n\n    /**\r\n     * Window scroll handle event for sticky card\r\n     */\n    onScrollSticky: function onScrollSticky(e) {\n      var offset = the.options.sticky.offset;\n      if (isNaN(offset)) return;\n      var st = KTUtil.getScrollTop();\n\n      if (st >= offset && KTUtil.hasClass(body, 'card-sticky-on') === false) {\n        Plugin.eventTrigger('stickyOn');\n        KTUtil.addClass(body, 'card-sticky-on');\n        Plugin.updateSticky();\n      } else if (st * 1.5 <= offset && KTUtil.hasClass(body, 'card-sticky-on')) {\n        // Back scroll mode\n        Plugin.eventTrigger('stickyOff');\n        KTUtil.removeClass(body, 'card-sticky-on');\n        Plugin.resetSticky();\n      }\n    },\n    updateSticky: function updateSticky() {\n      if (!the.header) {\n        return;\n      }\n\n      var top;\n\n      if (KTUtil.hasClass(body, 'card-sticky-on')) {\n        if (the.options.sticky.position.top instanceof Function) {\n          top = parseInt(the.options.sticky.position.top.call(this, the));\n        } else {\n          top = parseInt(the.options.sticky.position.top);\n        }\n\n        var left;\n\n        if (the.options.sticky.position.left instanceof Function) {\n          left = parseInt(the.options.sticky.position.left.call(this, the));\n        } else {\n          left = parseInt(the.options.sticky.position.left);\n        }\n\n        var right;\n\n        if (the.options.sticky.position.right instanceof Function) {\n          right = parseInt(the.options.sticky.position.right.call(this, the));\n        } else {\n          right = parseInt(the.options.sticky.position.right);\n        }\n\n        KTUtil.css(the.header, 'z-index', the.options.sticky.zIndex);\n        KTUtil.css(the.header, 'top', top + 'px');\n        KTUtil.css(the.header, 'left', left + 'px');\n        KTUtil.css(the.header, 'right', right + 'px');\n      }\n    },\n    resetSticky: function resetSticky() {\n      if (!the.header) {\n        return;\n      }\n\n      if (KTUtil.hasClass(body, 'card-sticky-on') === false) {\n        KTUtil.css(the.header, 'z-index', '');\n        KTUtil.css(the.header, 'top', '');\n        KTUtil.css(the.header, 'left', '');\n        KTUtil.css(the.header, 'right', '');\n      }\n    },\n\n    /**\r\n     * Remove card\r\n     */\n    remove: function remove() {\n      if (Plugin.eventTrigger('beforeRemove') === false) {\n        return;\n      }\n\n      KTUtil.remove(element);\n      Plugin.eventTrigger('afterRemove');\n    },\n\n    /**\r\n     * Set content\r\n     */\n    setContent: function setContent(html) {\n      if (html) {\n        the.body.innerHTML = html;\n      }\n    },\n\n    /**\r\n     * Get body\r\n     */\n    getBody: function getBody() {\n      return the.body;\n    },\n\n    /**\r\n     * Get self\r\n     */\n    getSelf: function getSelf() {\n      return element;\n    },\n\n    /**\r\n     * Reload\r\n     */\n    reload: function reload() {\n      Plugin.eventTrigger('reload');\n    },\n\n    /**\r\n     * Toggle\r\n     */\n    toggle: function toggle() {\n      if (KTUtil.hasClass(element, 'card-collapse') || KTUtil.hasClass(element, 'card-collapsed')) {\n        Plugin.expand();\n      } else {\n        Plugin.collapse();\n      }\n    },\n\n    /**\r\n     * Collapse\r\n     */\n    collapse: function collapse() {\n      if (Plugin.eventTrigger('beforeCollapse') === false) {\n        return;\n      }\n\n      KTUtil.slideUp(the.body, the.options.toggleSpeed, function () {\n        Plugin.eventTrigger('afterCollapse');\n      });\n      KTUtil.addClass(element, 'card-collapse');\n    },\n\n    /**\r\n     * Expand\r\n     */\n    expand: function expand() {\n      if (Plugin.eventTrigger('beforeExpand') === false) {\n        return;\n      }\n\n      KTUtil.slideDown(the.body, the.options.toggleSpeed, function () {\n        Plugin.eventTrigger('afterExpand');\n      });\n      KTUtil.removeClass(element, 'card-collapse');\n      KTUtil.removeClass(element, 'card-collapsed');\n    },\n\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name) {\n      //KTUtil.triggerCustomEvent(name);\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the);\n            }\n          } else {\n            return event.handler.call(this, the);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n      return the;\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\r\n   * Remove card\r\n   */\n\n\n  the.remove = function () {\n    return Plugin.remove(html);\n  };\n  /**\r\n   * Init sticky card\r\n   */\n\n\n  the.initSticky = function () {\n    return Plugin.initSticky();\n  };\n  /**\r\n   * Rerender sticky layout\r\n   */\n\n\n  the.updateSticky = function () {\n    return Plugin.updateSticky();\n  };\n  /**\r\n   * Reset the sticky\r\n   */\n\n\n  the.resetSticky = function () {\n    return Plugin.resetSticky();\n  };\n  /**\r\n   * Destroy sticky card\r\n   */\n\n\n  the.destroySticky = function () {\n    Plugin.resetSticky();\n    window.removeEventListener('scroll', Plugin.onScrollSticky);\n  };\n  /**\r\n   * Reload card\r\n   */\n\n\n  the.reload = function () {\n    return Plugin.reload();\n  };\n  /**\r\n   * Set card content\r\n   */\n\n\n  the.setContent = function (html) {\n    return Plugin.setContent(html);\n  };\n  /**\r\n   * Toggle card\r\n   */\n\n\n  the.toggle = function () {\n    return Plugin.toggle();\n  };\n  /**\r\n   * Collapse card\r\n   */\n\n\n  the.collapse = function () {\n    return Plugin.collapse();\n  };\n  /**\r\n   * Expand card\r\n   */\n\n\n  the.expand = function () {\n    return Plugin.expand();\n  };\n  /**\r\n   * Get cardbody\r\n   * @returns {jQuery}\r\n   */\n\n\n  the.getBody = function () {\n    return Plugin.getBody();\n  };\n  /**\r\n   * Get cardbody\r\n   * @returns {jQuery}\r\n   */\n\n\n  the.getSelf = function () {\n    return Plugin.getSelf();\n  };\n  /**\r\n   * Attach event\r\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n  /**\r\n   * Attach event that will be fired once\r\n   */\n\n\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  }; // Construct plugin\n\n\n  Plugin.construct.apply(the, [options]);\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTCard;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/card.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/cookie.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/components/cookie.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // DOCS: https://javascript.info/cookie\n// Component Definition\n\nvar KTCookie = function () {\n  return {\n    // returns the cookie with the given name,\n    // or undefined if not found\n    getCookie: function getCookie(name) {\n      var matches = document.cookie.match(new RegExp(\"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"));\n      return matches ? decodeURIComponent(matches[1]) : undefined;\n    },\n    // Please note that a cookie value is encoded,\n    // so getCookie uses a built-in decodeURIComponent function to decode it.\n    setCookie: function setCookie(name, value, options) {\n      if (!options) {\n        options = {};\n      }\n\n      options = Object.assign({}, {\n        path: '/'\n      }, options);\n\n      if (options.expires instanceof Date) {\n        options.expires = options.expires.toUTCString();\n      }\n\n      var updatedCookie = encodeURIComponent(name) + \"=\" + encodeURIComponent(value);\n\n      for (var optionKey in options) {\n        if (!options.hasOwnProperty(optionKey)) {\n          continue;\n        }\n\n        updatedCookie += \"; \" + optionKey;\n        var optionValue = options[optionKey];\n\n        if (optionValue !== true) {\n          updatedCookie += \"=\" + optionValue;\n        }\n      }\n\n      document.cookie = updatedCookie;\n    },\n    // To delete a cookie, we can call it with a negative expiration date:\n    deleteCookie: function deleteCookie(name) {\n      setCookie(name, \"\", {\n        'max-age': -1\n      });\n    }\n  };\n}(); // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTCookie;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvY29tcG9uZW50cy9jb29raWUuanM/MTlhMiJdLCJuYW1lcyI6WyJLVENvb2tpZSIsImdldENvb2tpZSIsIm5hbWUiLCJtYXRjaGVzIiwiZG9jdW1lbnQiLCJjb29raWUiLCJtYXRjaCIsIlJlZ0V4cCIsInJlcGxhY2UiLCJkZWNvZGVVUklDb21wb25lbnQiLCJ1bmRlZmluZWQiLCJzZXRDb29raWUiLCJ2YWx1ZSIsIm9wdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJwYXRoIiwiZXhwaXJlcyIsIkRhdGUiLCJ0b1VUQ1N0cmluZyIsInVwZGF0ZWRDb29raWUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJvcHRpb25LZXkiLCJoYXNPd25Qcm9wZXJ0eSIsIm9wdGlvblZhbHVlIiwiZGVsZXRlQ29va2llIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkNBQ0E7QUFFQTs7QUFDQSxJQUFJQSxRQUFRLEdBQUcsWUFBVztBQUN4QixTQUFPO0FBQ0w7QUFDQTtBQUNBQyxhQUFTLEVBQUUsbUJBQVNDLElBQVQsRUFBZTtBQUN4QixVQUFJQyxPQUFPLEdBQUdDLFFBQVEsQ0FBQ0MsTUFBVCxDQUFnQkMsS0FBaEIsQ0FBc0IsSUFBSUMsTUFBSixDQUNsQyxhQUFhTCxJQUFJLENBQUNNLE9BQUwsQ0FBYSw4QkFBYixFQUE2QyxNQUE3QyxDQUFiLEdBQW9FLFVBRGxDLENBQXRCLENBQWQ7QUFHQSxhQUFPTCxPQUFPLEdBQUdNLGtCQUFrQixDQUFDTixPQUFPLENBQUMsQ0FBRCxDQUFSLENBQXJCLEdBQW9DTyxTQUFsRDtBQUNELEtBUkk7QUFTTDtBQUNBO0FBQ0FDLGFBQVMsRUFBRSxtQkFBU1QsSUFBVCxFQUFlVSxLQUFmLEVBQXNCQyxPQUF0QixFQUErQjtBQUN4QyxVQUFJLENBQUNBLE9BQUwsRUFBYztBQUNWQSxlQUFPLEdBQUcsRUFBVjtBQUNIOztBQUVEQSxhQUFPLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBa0I7QUFBQ0MsWUFBSSxFQUFFO0FBQVAsT0FBbEIsRUFBK0JILE9BQS9CLENBQVY7O0FBRUEsVUFBSUEsT0FBTyxDQUFDSSxPQUFSLFlBQTJCQyxJQUEvQixFQUFxQztBQUNuQ0wsZUFBTyxDQUFDSSxPQUFSLEdBQWtCSixPQUFPLENBQUNJLE9BQVIsQ0FBZ0JFLFdBQWhCLEVBQWxCO0FBQ0Q7O0FBRUQsVUFBSUMsYUFBYSxHQUFHQyxrQkFBa0IsQ0FBQ25CLElBQUQsQ0FBbEIsR0FBMkIsR0FBM0IsR0FBaUNtQixrQkFBa0IsQ0FBQ1QsS0FBRCxDQUF2RTs7QUFFQSxXQUFLLElBQUlVLFNBQVQsSUFBc0JULE9BQXRCLEVBQStCO0FBQzdCLFlBQUksQ0FBQ0EsT0FBTyxDQUFDVSxjQUFSLENBQXVCRCxTQUF2QixDQUFMLEVBQXdDO0FBQ3RDO0FBQ0Q7O0FBQ0RGLHFCQUFhLElBQUksT0FBT0UsU0FBeEI7QUFDQSxZQUFJRSxXQUFXLEdBQUdYLE9BQU8sQ0FBQ1MsU0FBRCxDQUF6Qjs7QUFDQSxZQUFJRSxXQUFXLEtBQUssSUFBcEIsRUFBMEI7QUFDeEJKLHVCQUFhLElBQUksTUFBTUksV0FBdkI7QUFDRDtBQUNGOztBQUVEcEIsY0FBUSxDQUFDQyxNQUFULEdBQWtCZSxhQUFsQjtBQUNELEtBcENJO0FBcUNMO0FBQ0FLLGdCQUFZLEVBQUUsc0JBQVN2QixJQUFULEVBQWU7QUFDM0JTLGVBQVMsQ0FBQ1QsSUFBRCxFQUFPLEVBQVAsRUFBVztBQUNsQixtQkFBVyxDQUFDO0FBRE0sT0FBWCxDQUFUO0FBR0Q7QUExQ0ksR0FBUDtBQTRDRCxDQTdDYyxFQUFmLEMsQ0ErQ0E7OztBQUNBLElBQUksU0FBaUMsT0FBT3dCLE1BQU0sQ0FBQ0MsT0FBZCxLQUEwQixXQUEvRCxFQUE0RTtBQUMxRUQsUUFBTSxDQUFDQyxPQUFQLEdBQWlCM0IsUUFBakI7QUFDRCIsImZpbGUiOiIuL3Jlc291cmNlcy9tZXRyb25pYy9qcy9jb21wb25lbnRzL2Nvb2tpZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vLyBET0NTOiBodHRwczovL2phdmFzY3JpcHQuaW5mby9jb29raWVcclxuXHJcbi8vIENvbXBvbmVudCBEZWZpbml0aW9uXHJcbnZhciBLVENvb2tpZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICAvLyByZXR1cm5zIHRoZSBjb29raWUgd2l0aCB0aGUgZ2l2ZW4gbmFtZSxcclxuICAgIC8vIG9yIHVuZGVmaW5lZCBpZiBub3QgZm91bmRcclxuICAgIGdldENvb2tpZTogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICB2YXIgbWF0Y2hlcyA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKFxyXG4gICAgICAgIFwiKD86Xnw7IClcIiArIG5hbWUucmVwbGFjZSgvKFtcXC4kPyp8e31cXChcXClcXFtcXF1cXFxcXFwvXFwrXl0pL2csICdcXFxcJDEnKSArIFwiPShbXjtdKilcIlxyXG4gICAgICApKTtcclxuICAgICAgcmV0dXJuIG1hdGNoZXMgPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hlc1sxXSkgOiB1bmRlZmluZWQ7XHJcbiAgICB9LFxyXG4gICAgLy8gUGxlYXNlIG5vdGUgdGhhdCBhIGNvb2tpZSB2YWx1ZSBpcyBlbmNvZGVkLFxyXG4gICAgLy8gc28gZ2V0Q29va2llIHVzZXMgYSBidWlsdC1pbiBkZWNvZGVVUklDb21wb25lbnQgZnVuY3Rpb24gdG8gZGVjb2RlIGl0LlxyXG4gICAgc2V0Q29va2llOiBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgb3B0aW9ucykge1xyXG4gICAgICBpZiAoIW9wdGlvbnMpIHtcclxuICAgICAgICAgIG9wdGlvbnMgPSB7fTtcclxuICAgICAgfVxyXG5cclxuICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHtwYXRoOiAnLyd9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgIGlmIChvcHRpb25zLmV4cGlyZXMgaW5zdGFuY2VvZiBEYXRlKSB7XHJcbiAgICAgICAgb3B0aW9ucy5leHBpcmVzID0gb3B0aW9ucy5leHBpcmVzLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciB1cGRhdGVkQ29va2llID0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpO1xyXG5cclxuICAgICAgZm9yICh2YXIgb3B0aW9uS2V5IGluIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAoIW9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0aW9uS2V5KSkge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHVwZGF0ZWRDb29raWUgKz0gXCI7IFwiICsgb3B0aW9uS2V5O1xyXG4gICAgICAgIHZhciBvcHRpb25WYWx1ZSA9IG9wdGlvbnNbb3B0aW9uS2V5XTtcclxuICAgICAgICBpZiAob3B0aW9uVmFsdWUgIT09IHRydWUpIHtcclxuICAgICAgICAgIHVwZGF0ZWRDb29raWUgKz0gXCI9XCIgKyBvcHRpb25WYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGRvY3VtZW50LmNvb2tpZSA9IHVwZGF0ZWRDb29raWU7XHJcbiAgICB9LFxyXG4gICAgLy8gVG8gZGVsZXRlIGEgY29va2llLCB3ZSBjYW4gY2FsbCBpdCB3aXRoIGEgbmVnYXRpdmUgZXhwaXJhdGlvbiBkYXRlOlxyXG4gICAgZGVsZXRlQ29va2llOiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgIHNldENvb2tpZShuYW1lLCBcIlwiLCB7XHJcbiAgICAgICAgJ21heC1hZ2UnOiAtMVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxufSgpO1xyXG5cclxuLy8gd2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBLVENvb2tpZTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/cookie.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/datatable/core.datatable.js":
/*!**********************************************************************!*\
  !*** ./resources/metronic/js/components/datatable/core.datatable.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function ($) {\n  var pluginName = 'KTDatatable';\n  var pfx = '';\n  var util = KTUtil;\n  var app = KTApp;\n  if (typeof util === 'undefined') throw new Error('Util class is required and must be included before ' + pluginName); // plugin setup\n\n  $.fn[pluginName] = function (options) {\n    if ($(this).length === 0) {\n      console.warn('No ' + pluginName + ' element exist.');\n      return;\n    } // global variables\n\n\n    var datatable = this; // debug enabled?\n    // 1) state will be cleared on each refresh\n    // 2) enable some logs\n    // 3) etc.\n\n    datatable.debug = false;\n    datatable.API = {\n      record: null,\n      value: null,\n      params: null\n    };\n    var Plugin = {\n      /********************\r\n       ** PRIVATE METHODS\r\n       ********************/\n      isInit: false,\n      cellOffset: 110,\n      iconOffset: 15,\n      stateId: 'meta',\n      ajaxParams: {},\n      pagingObject: {},\n      init: function init(options) {\n        var isHtmlTable = false; // data source option empty is normal table\n\n        if (options.data.source === null) {\n          Plugin.extractTable();\n          isHtmlTable = true;\n        }\n\n        Plugin.setupBaseDOM.call();\n        Plugin.setupDOM(datatable.table); // on event after layout had done setup, show datatable\n\n        $(datatable).on(pfx + 'datatable-on-layout-updated', Plugin.afterRender);\n\n        if (datatable.debug) {\n          Plugin.stateRemove(Plugin.stateId);\n        }\n        /*var es = Plugin.stateGet(Plugin.stateId);\r\n        var eq = {};\r\n        if (es && es.hasOwnProperty('query')) {\r\n        \teq = es.query;\r\n        }\r\n        Plugin.setDataSourceQuery(Object.assign({}, eq, Plugin.getOption('data.source.read.params.query')));*/\n        // set custom query from options\n\n\n        Plugin.setDataSourceQuery(Plugin.getOption('data.source.read.params.query')); // initialize extensions\n\n        $.each(Plugin.getOption('extensions'), function (extName, extOptions) {\n          if (typeof $.fn[pluginName][extName] === 'function') {\n            if (_typeof(extOptions) !== 'object') {\n              extOptions = $.extend({}, extOptions);\n            }\n\n            new $.fn[pluginName][extName](datatable, extOptions);\n          }\n        });\n        Plugin.spinnerCallback(true); // get data\n\n        if (options.data.type === 'remote' || options.data.type === 'local') {\n          if (options.data.saveState === false) {\n            Plugin.stateRemove(Plugin.stateId);\n          } // get data for local datatable and local table\n\n\n          if (options.data.type === 'local' && _typeof(options.data.source) === 'object') {\n            datatable.dataSet = datatable.originalDataSet = Plugin.dataMapCallback(options.data.source);\n          }\n\n          Plugin.dataRender();\n        } // if html table, remove and setup a new header\n\n\n        if (isHtmlTable) {\n          $(datatable.tableHead).find('tr').remove();\n          $(datatable.tableFoot).find('tr').remove();\n        }\n\n        Plugin.setHeadTitle();\n\n        if (Plugin.getOption('layout.footer')) {\n          Plugin.setHeadTitle(datatable.tableFoot);\n        } // hide header\n\n\n        if (typeof options.layout.header !== 'undefined' && options.layout.header === false) {\n          $(datatable.table).find('thead').remove();\n        } // hide footer\n\n\n        if (typeof options.layout.footer !== 'undefined' && options.layout.footer === false) {\n          $(datatable.table).find('tfoot').remove();\n        } // for normal and local data type, run layoutUpdate\n\n\n        if (options.data.type === null || options.data.type === 'local') {\n          Plugin.setupCellField.call();\n          Plugin.setupTemplateCell.call(); // setup nested datatable, if option enabled\n\n          Plugin.setupSubDatatable.call(); // setup extra system column properties\n\n          Plugin.setupSystemColumn.call();\n          Plugin.redraw();\n        }\n\n        var width;\n        var initialWidth = false;\n        $(window).resize(function () {\n          // issue: URL Bar Resizing on mobile, https://developers.google.com/web/updates/2016/12/url-bar-resizing\n          // trigger datatable resize on width change only\n          if ($(this).width() !== width) {\n            width = $(this).width();\n            Plugin.fullRender();\n          } // get initial width\n\n\n          if (!initialWidth) {\n            width = $(this).width();\n            initialWidth = true;\n          }\n        });\n        $(datatable).height('');\n        var prevKeyword = '';\n        $(Plugin.getOption('search.input')).on('keyup', function (e) {\n          if (Plugin.getOption('search.onEnter') && e.which !== 13) return;\n          var keyword = $(this).val(); // prevent multiple search request on every button keyup\n\n          if (prevKeyword !== keyword) {\n            Plugin.search(keyword);\n            prevKeyword = keyword;\n          }\n        });\n        return datatable;\n      },\n\n      /**\r\n       * Extract static HTML table content into datasource\r\n       */\n      extractTable: function extractTable() {\n        var columns = [];\n        var headers = $(datatable).find('tr:first-child th').get().map(function (cell, i) {\n          var field = $(cell).data('field');\n          var title = $(cell).data('title');\n\n          if (typeof field === 'undefined') {\n            field = $(cell).text().trim();\n          }\n\n          if (typeof title === 'undefined') {\n            title = $(cell).text().trim();\n          }\n\n          var column = {\n            field: field,\n            title: title\n          };\n\n          for (var ii in options.columns) {\n            if (options.columns[ii].field === field) {\n              column = $.extend(true, {}, options.columns[ii], column);\n            }\n          }\n\n          columns.push(column);\n          return field;\n        }); // auto create columns config\n\n        options.columns = columns;\n        var rowProp = [];\n        var source = [];\n        $(datatable).find('tr').each(function () {\n          if ($(this).find('td').length) {\n            rowProp.push($(this).prop('attributes'));\n          }\n\n          var td = {};\n          $(this).find('td').each(function (i, cell) {\n            td[headers[i]] = cell.innerHTML.trim();\n          });\n\n          if (!util.isEmpty(td)) {\n            source.push(td);\n          }\n        });\n        options.data.attr.rowProps = rowProp;\n        options.data.source = source;\n      },\n\n      /**\r\n       * One time layout update on init\r\n       */\n      layoutUpdate: function layoutUpdate() {\n        // setup nested datatable, if option enabled\n        Plugin.setupSubDatatable.call(); // setup extra system column properties\n\n        Plugin.setupSystemColumn.call(); // setup cell hover event\n\n        Plugin.setupHover.call();\n\n        if (typeof options.detail === 'undefined' // temporary disable lock column in subtable\n        && Plugin.getDepth() === 1) {\n          // lock columns handler\n          Plugin.lockTable.call();\n        }\n\n        Plugin.resetScroll(); // check if not is a locked column\n\n        if (!Plugin.isLocked()) {\n          Plugin.redraw.call(); // check if its not a subtable and has autoHide option enabled\n\n          if (!Plugin.isSubtable() && Plugin.getOption('rows.autoHide') === true) {\n            Plugin.autoHide();\n          } // reset row\n\n\n          $(datatable.table).find('.' + pfx + 'datatable-row').css('height', '');\n        }\n\n        Plugin.columnHide.call();\n        Plugin.rowEvenOdd.call();\n        Plugin.sorting.call();\n        Plugin.scrollbar.call();\n\n        if (!Plugin.isInit) {\n          // run once dropdown inside datatable\n          Plugin.dropdownFix();\n          $(datatable).trigger(pfx + 'datatable-on-init', {\n            table: $(datatable.wrap).attr('id'),\n            options: options\n          });\n          Plugin.isInit = true;\n        }\n\n        $(datatable).trigger(pfx + 'datatable-on-layout-updated', {\n          table: $(datatable.wrap).attr('id')\n        });\n      },\n      dropdownFix: function dropdownFix() {\n        var dropdownMenu;\n        $('body').on('show.bs.dropdown', '.' + pfx + 'datatable .' + pfx + 'datatable-body', function (e) {\n          dropdownMenu = $(e.target).find('.dropdown-menu');\n          $('body').append(dropdownMenu.detach());\n          dropdownMenu.css('display', 'block');\n          dropdownMenu.position({\n            'my': 'right top',\n            'at': 'right bottom',\n            'of': $(e.relatedTarget)\n          }); // if datatable is inside modal\n\n          if (datatable.closest('.modal').length) {\n            // increase dropdown z-index\n            dropdownMenu.css('z-index', '2000');\n          }\n        }).on('hide.bs.dropdown', '.' + pfx + 'datatable .' + pfx + 'datatable-body', function (e) {\n          $(e.target).append(dropdownMenu.detach());\n          dropdownMenu.hide();\n        }); // remove dropdown if window resize\n\n        $(window).on('resize', function (e) {\n          if (typeof dropdownMenu !== 'undefined') {\n            dropdownMenu.hide();\n          }\n        });\n      },\n      lockTable: function lockTable() {\n        var lock = {\n          lockEnabled: false,\n          init: function init() {\n            // check if table should be locked columns\n            lock.lockEnabled = Plugin.lockEnabledColumns();\n\n            if (lock.lockEnabled.left.length === 0 && lock.lockEnabled.right.length === 0) {\n              return;\n            }\n\n            lock.enable();\n          },\n          enable: function enable() {\n            var enableLock = function enableLock(tablePart) {\n              // check if already has lock column\n              if ($(tablePart).find('.' + pfx + 'datatable-lock').length > 0) {\n                Plugin.log('Locked container already exist in: ', tablePart);\n                return;\n              } // check if no rows exists\n\n\n              if ($(tablePart).find('.' + pfx + 'datatable-row').length === 0) {\n                Plugin.log('No row exist in: ', tablePart);\n                return;\n              } // locked div container\n\n\n              var lockLeft = $('<div/>').addClass(pfx + 'datatable-lock ' + pfx + 'datatable-lock-left');\n              var lockScroll = $('<div/>').addClass(pfx + 'datatable-lock ' + pfx + 'datatable-lock-scroll');\n              var lockRight = $('<div/>').addClass(pfx + 'datatable-lock ' + pfx + 'datatable-lock-right');\n              $(tablePart).find('.' + pfx + 'datatable-row').each(function () {\n                // create new row for lock columns and pass the data\n                var rowLeft = $('<tr/>').addClass(pfx + 'datatable-row').data('obj', $(this).data('obj')).appendTo(lockLeft);\n                var rowScroll = $('<tr/>').addClass(pfx + 'datatable-row').data('obj', $(this).data('obj')).appendTo(lockScroll);\n                var rowRight = $('<tr/>').addClass(pfx + 'datatable-row').data('obj', $(this).data('obj')).appendTo(lockRight);\n                $(this).find('.' + pfx + 'datatable-cell').each(function () {\n                  var locked = $(this).data('locked');\n\n                  if (typeof locked !== 'undefined') {\n                    if (typeof locked.left !== 'undefined' || locked === true) {\n                      // default locked to left\n                      $(this).appendTo(rowLeft);\n                    }\n\n                    if (typeof locked.right !== 'undefined') {\n                      $(this).appendTo(rowRight);\n                    }\n                  } else {\n                    $(this).appendTo(rowScroll);\n                  }\n                }); // remove old row\n\n                $(this).remove();\n              });\n\n              if (lock.lockEnabled.left.length > 0) {\n                $(datatable.wrap).addClass(pfx + 'datatable-lock');\n                $(lockLeft).appendTo(tablePart);\n              }\n\n              if (lock.lockEnabled.left.length > 0 || lock.lockEnabled.right.length > 0) {\n                $(lockScroll).appendTo(tablePart);\n              }\n\n              if (lock.lockEnabled.right.length > 0) {\n                $(datatable.wrap).addClass(pfx + 'datatable-lock');\n                $(lockRight).appendTo(tablePart);\n              }\n            };\n\n            $(datatable.table).find('thead,tbody,tfoot').each(function () {\n              var tablePart = this;\n\n              if ($(this).find('.' + pfx + 'datatable-lock').length === 0) {\n                $(this).ready(function () {\n                  enableLock(tablePart);\n                });\n              }\n            });\n          }\n        };\n        lock.init();\n        return lock;\n      },\n\n      /**\r\n       * Render everything for resize\r\n       */\n      fullRender: function fullRender() {\n        $(datatable.tableHead).empty();\n        Plugin.setHeadTitle();\n\n        if (Plugin.getOption('layout.footer')) {\n          $(datatable.tableFoot).empty();\n          Plugin.setHeadTitle(datatable.tableFoot);\n        }\n\n        Plugin.spinnerCallback(true);\n        $(datatable.wrap).removeClass(pfx + 'datatable-loaded');\n        Plugin.insertData();\n      },\n      lockEnabledColumns: function lockEnabledColumns() {\n        var screen = $(window).width();\n        var columns = options.columns;\n        var enabled = {\n          left: [],\n          right: []\n        };\n        $.each(columns, function (i, column) {\n          if (typeof column.locked !== 'undefined') {\n            if (typeof column.locked.left !== 'undefined') {\n              if (util.getBreakpoint(column.locked.left) <= screen) {\n                enabled['left'].push(column.locked.left);\n              }\n            }\n\n            if (typeof column.locked.right !== 'undefined') {\n              if (util.getBreakpoint(column.locked.right) <= screen) {\n                enabled['right'].push(column.locked.right);\n              }\n            }\n          }\n        });\n        return enabled;\n      },\n\n      /**\r\n       * After render event, called by \"datatable-on-layout-updated\"\r\n       * @param e\r\n       * @param args\r\n       */\n      afterRender: function afterRender(e, args) {\n        $(datatable).ready(function () {\n          // redraw locked columns table\n          if (Plugin.isLocked()) {\n            Plugin.redraw();\n          }\n\n          $(datatable.tableBody).css('visibility', '');\n          $(datatable.wrap).addClass(pfx + 'datatable-loaded');\n          Plugin.spinnerCallback(false);\n        });\n      },\n      hoverTimer: 0,\n      isScrolling: false,\n      setupHover: function setupHover() {\n        $(window).scroll(function (e) {\n          // stop hover when scrolling\n          clearTimeout(Plugin.hoverTimer);\n          Plugin.isScrolling = true;\n        });\n        $(datatable.tableBody).find('.' + pfx + 'datatable-cell').off('mouseenter', 'mouseleave').on('mouseenter', function () {\n          // reset scroll timer to hover class\n          Plugin.hoverTimer = setTimeout(function () {\n            Plugin.isScrolling = false;\n          }, 200);\n          if (Plugin.isScrolling) return; // normal table\n\n          var row = $(this).closest('.' + pfx + 'datatable-row').addClass(pfx + 'datatable-row-hover');\n          var index = $(row).index() + 1; // lock table\n\n          $(row).closest('.' + pfx + 'datatable-lock').parent().find('.' + pfx + 'datatable-row:nth-child(' + index + ')').addClass(pfx + 'datatable-row-hover');\n        }).on('mouseleave', function () {\n          // normal table\n          var row = $(this).closest('.' + pfx + 'datatable-row').removeClass(pfx + 'datatable-row-hover');\n          var index = $(row).index() + 1; // look table\n\n          $(row).closest('.' + pfx + 'datatable-lock').parent().find('.' + pfx + 'datatable-row:nth-child(' + index + ')').removeClass(pfx + 'datatable-row-hover');\n        });\n      },\n\n      /**\r\n       * Adjust width of locked table containers by resize handler\r\n       * @returns {number}\r\n       */\n      adjustLockContainer: function adjustLockContainer() {\n        if (!Plugin.isLocked()) return 0; // refer to head dimension\n\n        var containerWidth = $(datatable.tableHead).width();\n        var lockLeft = $(datatable.tableHead).find('.' + pfx + 'datatable-lock-left').width();\n        var lockRight = $(datatable.tableHead).find('.' + pfx + 'datatable-lock-right').width();\n        if (typeof lockLeft === 'undefined') lockLeft = 0;\n        if (typeof lockRight === 'undefined') lockRight = 0;\n        var lockScroll = Math.floor(containerWidth - lockLeft - lockRight);\n        $(datatable.table).find('.' + pfx + 'datatable-lock-scroll').css('width', lockScroll);\n        return lockScroll;\n      },\n\n      /**\r\n       * todo; not in use\r\n       */\n      dragResize: function dragResize() {\n        var pressed = false;\n        var start = undefined;\n        var startX, startWidth;\n        $(datatable.tableHead).find('.' + pfx + 'datatable-cell').mousedown(function (e) {\n          start = $(this);\n          pressed = true;\n          startX = e.pageX;\n          startWidth = $(this).width();\n          $(start).addClass(pfx + 'datatable-cell-resizing');\n        }).mousemove(function (e) {\n          if (pressed) {\n            var i = $(start).index();\n            var tableBody = $(datatable.tableBody);\n            var ifLocked = $(start).closest('.' + pfx + 'datatable-lock');\n\n            if (ifLocked) {\n              var lockedIndex = $(ifLocked).index();\n              tableBody = $(datatable.tableBody).find('.' + pfx + 'datatable-lock').eq(lockedIndex);\n            }\n\n            $(tableBody).find('.' + pfx + 'datatable-row').each(function (tri, tr) {\n              $(tr).find('.' + pfx + 'datatable-cell').eq(i).width(startWidth + (e.pageX - startX)).children().width(startWidth + (e.pageX - startX));\n            });\n            $(start).children().css('width', startWidth + (e.pageX - startX));\n          }\n        }).mouseup(function () {\n          $(start).removeClass(pfx + 'datatable-cell-resizing');\n          pressed = false;\n        });\n        $(document).mouseup(function () {\n          $(start).removeClass(pfx + 'datatable-cell-resizing');\n          pressed = false;\n        });\n      },\n\n      /**\r\n       * To prepare placeholder for table before content is loading\r\n       */\n      initHeight: function initHeight() {\n        if (options.layout.height && options.layout.scroll) {\n          var theadHeight = $(datatable.tableHead).find('.' + pfx + 'datatable-row').outerHeight();\n          var tfootHeight = $(datatable.tableFoot).find('.' + pfx + 'datatable-row').outerHeight();\n          var bodyHeight = options.layout.height;\n\n          if (theadHeight > 0) {\n            bodyHeight -= theadHeight;\n          }\n\n          if (tfootHeight > 0) {\n            bodyHeight -= tfootHeight;\n          } // scrollbar offset\n\n\n          bodyHeight -= 2;\n          $(datatable.tableBody).css('max-height', Math.floor(parseFloat(bodyHeight))); // set scrollable area fixed height\n          // $(datatable.tableBody).find('.' + pfx + 'datatable-lock-scroll').css('height', Math.floor(parseFloat(bodyHeight)));\n        }\n      },\n\n      /**\r\n       * Setup base DOM (table, thead, tbody, tfoot) and create if not\r\n       * exist.\r\n       */\n      setupBaseDOM: function setupBaseDOM() {\n        // keep original state before datatable initialize\n        datatable.initialDatatable = $(datatable).clone(); // main element\n\n        if ($(datatable).prop('tagName') === 'TABLE') {\n          // if main init element is <table>, wrap with div\n          datatable.table = $(datatable).removeClass(pfx + 'datatable').addClass(pfx + 'datatable-table');\n\n          if ($(datatable.table).parents('.' + pfx + 'datatable').length === 0) {\n            datatable.table.wrap($('<div/>').addClass(pfx + 'datatable').addClass(pfx + 'datatable-' + options.layout.theme));\n            datatable.wrap = $(datatable.table).parent();\n          }\n        } else {\n          // create table\n          datatable.wrap = $(datatable).addClass(pfx + 'datatable').addClass(pfx + 'datatable-' + options.layout.theme);\n          datatable.table = $('<table/>').addClass(pfx + 'datatable-table').appendTo(datatable);\n        }\n\n        if (typeof options.layout[\"class\"] !== 'undefined') {\n          $(datatable.wrap).addClass(options.layout[\"class\"]);\n        }\n\n        $(datatable.table).removeClass(pfx + 'datatable-destroyed').css('display', 'block'); // force disable save state\n\n        if (typeof $(datatable).attr('id') === 'undefined') {\n          Plugin.setOption('data.saveState', false);\n          $(datatable.table).attr('id', util.getUniqueID(pfx + 'datatable-'));\n        } // predefine table height\n\n\n        if (Plugin.getOption('layout.minHeight')) $(datatable.table).css('min-height', Plugin.getOption('layout.minHeight'));\n        if (Plugin.getOption('layout.height')) $(datatable.table).css('max-height', Plugin.getOption('layout.height')); // for normal table load\n\n        if (options.data.type === null) {\n          $(datatable.table).css('width', '').css('display', '');\n        } // create table head element\n\n\n        datatable.tableHead = $(datatable.table).find('thead');\n\n        if ($(datatable.tableHead).length === 0) {\n          datatable.tableHead = $('<thead/>').prependTo(datatable.table);\n        } // create table head element\n\n\n        datatable.tableBody = $(datatable.table).find('tbody');\n\n        if ($(datatable.tableBody).length === 0) {\n          datatable.tableBody = $('<tbody/>').appendTo(datatable.table);\n        }\n\n        if (typeof options.layout.footer !== 'undefined' && options.layout.footer) {\n          // create table foot element\n          datatable.tableFoot = $(datatable.table).find('tfoot');\n\n          if ($(datatable.tableFoot).length === 0) {\n            datatable.tableFoot = $('<tfoot/>').appendTo(datatable.table);\n          }\n        }\n      },\n\n      /**\r\n       * Set column data before table manipulation.\r\n       */\n      setupCellField: function setupCellField(tableParts) {\n        if (typeof tableParts === 'undefined') tableParts = $(datatable.table).children();\n        var columns = options.columns;\n        $.each(tableParts, function (part, tablePart) {\n          $(tablePart).find('.' + pfx + 'datatable-row').each(function (tri, tr) {\n            // prepare data\n            $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {\n              if (typeof columns[tdi] !== 'undefined') {\n                $(td).data(columns[tdi]);\n              }\n            });\n          });\n        });\n      },\n\n      /**\r\n       * Set column template callback\r\n       * @param tablePart\r\n       */\n      setupTemplateCell: function setupTemplateCell(tablePart) {\n        if (typeof tablePart === 'undefined') tablePart = datatable.tableBody;\n        var columns = options.columns;\n        $(tablePart).find('.' + pfx + 'datatable-row').each(function (tri, tr) {\n          // row data object, if any\n          var obj = $(tr).data('obj');\n\n          if (typeof obj === 'undefined') {\n            return;\n          } // @deprecated in v5.0.6\n          // obj['getIndex'] = function() {\n          // \treturn tri;\n          // };\n          // @deprecated in v5.0.6\n          // obj['getDatatable'] = function() {\n          // \treturn datatable;\n          // };\n          // @deprecated in v5.0.6\n\n\n          var rowCallback = Plugin.getOption('rows.callback');\n\n          if (typeof rowCallback === 'function') {\n            rowCallback($(tr), obj, tri);\n          } // before template row callback\n\n\n          var beforeTemplate = Plugin.getOption('rows.beforeTemplate');\n\n          if (typeof beforeTemplate === 'function') {\n            beforeTemplate($(tr), obj, tri);\n          } // if data object is undefined, collect from table\n\n\n          if (typeof obj === 'undefined') {\n            obj = {};\n            $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {\n              // get column settings by field\n              var column = $.grep(columns, function (n, i) {\n                return $(td).data('field') === n.field;\n              })[0];\n\n              if (typeof column !== 'undefined') {\n                obj[column['field']] = $(td).text();\n              }\n            });\n          }\n\n          $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {\n            // get column settings by field\n            var column = $.grep(columns, function (n, i) {\n              return $(td).data('field') === n.field;\n            })[0];\n\n            if (typeof column !== 'undefined') {\n              // column template\n              if (typeof column.template !== 'undefined') {\n                var finalValue = ''; // template string\n\n                if (typeof column.template === 'string') {\n                  finalValue = Plugin.dataPlaceholder(column.template, obj);\n                } // template callback function\n\n\n                if (typeof column.template === 'function') {\n                  finalValue = column.template(obj, tri, datatable);\n                } // sanitize using DOMPurify if installed\n\n\n                if (typeof DOMPurify !== 'undefined') {\n                  finalValue = DOMPurify.sanitize(finalValue);\n                }\n\n                var span = document.createElement('span');\n                span.innerHTML = finalValue; // insert to cell, wrap with span\n\n                $(td).html(span); // set span overflow\n\n                if (typeof column.overflow !== 'undefined') {\n                  $(span).css('overflow', column.overflow);\n                  $(span).css('position', 'relative');\n                }\n              }\n            }\n          }); // after template row callback\n\n          var afterTemplate = Plugin.getOption('rows.afterTemplate');\n\n          if (typeof afterTemplate === 'function') {\n            afterTemplate($(tr), obj, tri);\n          }\n        });\n      },\n\n      /**\r\n       * Setup extra system column properties\r\n       * Note: selector checkbox, subtable toggle\r\n       */\n      setupSystemColumn: function setupSystemColumn() {\n        datatable.dataSet = datatable.dataSet || []; // no records available\n\n        if (datatable.dataSet.length === 0) return;\n        var columns = options.columns;\n        $(datatable.tableBody).find('.' + pfx + 'datatable-row').each(function (tri, tr) {\n          $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {\n            // get column settings by field\n            var column = $.grep(columns, function (n, i) {\n              return $(td).data('field') === n.field;\n            })[0];\n\n            if (typeof column !== 'undefined') {\n              var value = $(td).text(); // enable column selector\n\n              if (typeof column.selector !== 'undefined' && column.selector !== false) {\n                // check if checkbox exist\n                if ($(td).find('.' + pfx + 'checkbox [type=\"checkbox\"]').length > 0) return;\n                $(td).addClass(pfx + 'datatable-cell-check'); // append checkbox\n\n                var chk = $('<label/>').addClass(pfx + 'checkbox ' + pfx + 'checkbox-single').append($('<input/>').attr('type', 'checkbox').attr('value', value).on('click', function () {\n                  if ($(this).is(':checked')) {\n                    // add checkbox active row class\n                    Plugin.setActive(this);\n                  } else {\n                    // add checkbox active row class\n                    Plugin.setInactive(this);\n                  }\n                })).append('&nbsp;<span></span>'); // checkbox selector has outline style\n\n                if (typeof column.selector[\"class\"] !== 'undefined') {\n                  $(chk).addClass(column.selector[\"class\"]);\n                }\n\n                $(td).children().html(chk);\n              } // enable column subtable toggle\n\n\n              if (typeof column.subtable !== 'undefined' && column.subtable) {\n                // check if subtable toggle exist\n                if ($(td).find('.' + pfx + 'datatable-toggle-subtable').length > 0) return; // append subtable toggle\n\n                $(td).children().html($('<a/>').addClass(pfx + 'datatable-toggle-subtable').attr('href', '#').attr('data-value', value).append($('<i/>').addClass(Plugin.getOption('layout.icons.rowDetail.collapse'))));\n              }\n            }\n          });\n        }); // init checkbox for header/footer\n\n        var initCheckbox = function initCheckbox(tr) {\n          // get column settings by field\n          var column = $.grep(columns, function (n, i) {\n            return typeof n.selector !== 'undefined' && n.selector !== false;\n          })[0];\n\n          if (typeof column !== 'undefined') {\n            // enable column selector\n            if (typeof column.selector !== 'undefined' && column.selector !== false) {\n              var td = $(tr).find('[data-field=\"' + column.field + '\"]'); // check if checkbox exist\n\n              if ($(td).find('.' + pfx + 'checkbox [type=\"checkbox\"]').length > 0) return;\n              $(td).addClass(pfx + 'datatable-cell-check'); // append checkbox\n\n              var chk = $('<label/>').addClass(pfx + 'checkbox ' + pfx + 'checkbox-single ' + pfx + 'checkbox-all').append($('<input/>').attr('type', 'checkbox').on('click', function () {\n                if ($(this).is(':checked')) {\n                  Plugin.setActiveAll(true);\n                } else {\n                  Plugin.setActiveAll(false);\n                }\n              })).append('&nbsp;<span></span>'); // checkbox selector has outline style\n\n              if (typeof column.selector[\"class\"] !== 'undefined') {\n                $(chk).addClass(column.selector[\"class\"]);\n              }\n\n              $(td).children().html(chk);\n            }\n          }\n        };\n\n        if (options.layout.header) {\n          initCheckbox($(datatable.tableHead).find('.' + pfx + 'datatable-row').first());\n        }\n\n        if (options.layout.footer) {\n          initCheckbox($(datatable.tableFoot).find('.' + pfx + 'datatable-row').first());\n        }\n      },\n      maxWidthList: {},\n\n      /**\r\n       * Adjust width to match container size\r\n       */\n      adjustCellsWidth: function adjustCellsWidth() {\n        // get table width\n        var containerWidth = $(datatable.tableBody).innerWidth() - Plugin.iconOffset; // get total number of columns\n\n        var columns = $(datatable.tableHead).find('.' + pfx + 'datatable-row:first-child').find('.' + pfx + 'datatable-cell'). // exclude expand icon\n        not('.' + pfx + 'datatable-toggle-detail').not(':hidden').length;\n\n        if (columns > 0) {\n          //  remove reserved sort icon width\n          containerWidth = containerWidth - Plugin.iconOffset * columns;\n          var minWidth = Math.floor(containerWidth / columns); // minimum width\n\n          if (minWidth <= Plugin.cellOffset) {\n            minWidth = Plugin.cellOffset;\n          }\n\n          $(datatable.table).find('.' + pfx + 'datatable-row').find('.' + pfx + 'datatable-cell'). // exclude expand icon\n          not('.' + pfx + 'datatable-toggle-detail').not(':hidden').each(function (tdi, td) {\n            var width = minWidth;\n            var dataWidth = $(td).data('width');\n\n            if (typeof dataWidth !== 'undefined') {\n              if (dataWidth === 'auto') {\n                var field = $(td).data('field');\n\n                if (Plugin.maxWidthList[field]) {\n                  width = Plugin.maxWidthList[field];\n                } else {\n                  var cells = $(datatable.table).find('.' + pfx + 'datatable-cell[data-field=\"' + field + '\"]');\n                  width = Plugin.maxWidthList[field] = Math.max.apply(null, $(cells).map(function () {\n                    return $(this).outerWidth();\n                  }).get());\n                }\n              } else {\n                width = dataWidth;\n              }\n            }\n\n            $(td).children().css('width', Math.ceil(width));\n          });\n        }\n\n        return datatable;\n      },\n\n      /**\r\n       * Adjust height to match container size\r\n       */\n      adjustCellsHeight: function adjustCellsHeight() {\n        $.each($(datatable.table).children(), function (part, tablePart) {\n          var totalRows = $(tablePart).find('.' + pfx + 'datatable-row').first().parent().find('.' + pfx + 'datatable-row').length;\n\n          for (var i = 1; i <= totalRows; i++) {\n            var rows = $(tablePart).find('.' + pfx + 'datatable-row:nth-child(' + i + ')');\n\n            if ($(rows).length > 0) {\n              var maxHeight = Math.max.apply(null, $(rows).map(function () {\n                return $(this).outerHeight();\n              }).get());\n              $(rows).css('height', Math.ceil(maxHeight));\n            }\n          }\n        });\n      },\n\n      /**\r\n       * Setup table DOM and classes\r\n       */\n      setupDOM: function setupDOM(table) {\n        // set table classes\n        $(table).find('> thead').addClass(pfx + 'datatable-head');\n        $(table).find('> tbody').addClass(pfx + 'datatable-body');\n        $(table).find('> tfoot').addClass(pfx + 'datatable-foot');\n        $(table).find('tr').addClass(pfx + 'datatable-row');\n        $(table).find('tr > th, tr > td').addClass(pfx + 'datatable-cell');\n        $(table).find('tr > th, tr > td').each(function (i, td) {\n          if ($(td).find('span').length === 0) {\n            $(td).wrapInner($('<span/>').css('width', Plugin.cellOffset));\n          }\n        });\n      },\n\n      /**\r\n       * Default scrollbar\r\n       * @returns {{tableLocked: null, init: init, onScrolling:\r\n       *     onScrolling}}\r\n       */\n      scrollbar: function scrollbar() {\n        var scroll = {\n          scrollable: null,\n          tableLocked: null,\n          initPosition: null,\n          init: function init() {\n            var screen = util.getViewPort().width; // setup scrollable datatable\n\n            if (options.layout.scroll) {\n              // add scrollable datatable class\n              $(datatable.wrap).addClass(pfx + 'datatable-scroll');\n              var scrollable = $(datatable.tableBody).find('.' + pfx + 'datatable-lock-scroll'); // check if scrollable area have rows\n\n              if ($(scrollable).find('.' + pfx + 'datatable-row').length > 0 && $(scrollable).length > 0) {\n                scroll.scrollHead = $(datatable.tableHead).find('> .' + pfx + 'datatable-lock-scroll > .' + pfx + 'datatable-row');\n                scroll.scrollFoot = $(datatable.tableFoot).find('> .' + pfx + 'datatable-lock-scroll > .' + pfx + 'datatable-row');\n                scroll.tableLocked = $(datatable.tableBody).find('.' + pfx + 'datatable-lock:not(.' + pfx + 'datatable-lock-scroll)');\n\n                if (Plugin.getOption('layout.customScrollbar') && util.detectIE() != 10 && screen > util.getBreakpoint('lg')) {\n                  scroll.initCustomScrollbar(scrollable[0]);\n                } else {\n                  scroll.initDefaultScrollbar(scrollable);\n                }\n              } else if ($(datatable.tableBody).find('.' + pfx + 'datatable-row').length > 0) {\n                scroll.scrollHead = $(datatable.tableHead).find('> .' + pfx + 'datatable-row');\n                scroll.scrollFoot = $(datatable.tableFoot).find('> .' + pfx + 'datatable-row');\n\n                if (Plugin.getOption('layout.customScrollbar') && util.detectIE() != 10 && screen > util.getBreakpoint('lg')) {\n                  scroll.initCustomScrollbar(datatable.tableBody);\n                } else {\n                  scroll.initDefaultScrollbar(datatable.tableBody);\n                }\n              }\n            }\n          },\n          initDefaultScrollbar: function initDefaultScrollbar(scrollable) {\n            // get initial scroll position\n            scroll.initPosition = $(scrollable).scrollLeft();\n            $(scrollable).css('overflow-y', 'auto').off().on('scroll', scroll.onScrolling);\n            $(scrollable).css('overflow-x', 'auto');\n          },\n          onScrolling: function onScrolling(e) {\n            var left = $(this).scrollLeft();\n            var top = $(this).scrollTop();\n\n            if (util.isRTL()) {\n              // deduct initial position for RTL\n              left = left - scroll.initPosition;\n            }\n\n            $(scroll.scrollHead).css('left', -left);\n            $(scroll.scrollFoot).css('left', -left);\n            $(scroll.tableLocked).each(function (i, table) {\n              if (Plugin.isLocked()) {\n                // scrollbar offset\n                top -= 1;\n              }\n\n              $(table).css('top', -top);\n            });\n          },\n          initCustomScrollbar: function initCustomScrollbar(scrollable) {\n            scroll.scrollable = scrollable; // create a new instance for table body with scrollbar\n\n            Plugin.initScrollbar(scrollable); // get initial scroll position\n\n            scroll.initPosition = $(scrollable).scrollLeft();\n            $(scrollable).off().on('scroll', scroll.onScrolling);\n          }\n        };\n        scroll.init();\n        return scroll;\n      },\n\n      /**\r\n       * Init custom scrollbar and reset position\r\n       * @param element\r\n       * @param options\r\n       */\n      initScrollbar: function initScrollbar(element, options) {\n        if (!element || !element.nodeName) {\n          return;\n        }\n\n        $(datatable.tableBody).css('overflow', '');\n        var ps = $(element).data('ps');\n\n        if (util.hasClass(element, 'ps') && typeof ps !== 'undefined') {\n          ps.update();\n        } else {\n          ps = new PerfectScrollbar(element, Object.assign({}, {\n            wheelSpeed: 0.5,\n            swipeEasing: true,\n            // wheelPropagation: false,\n            minScrollbarLength: 40,\n            maxScrollbarLength: 300,\n            suppressScrollX: Plugin.getOption('rows.autoHide') && !Plugin.isLocked()\n          }, options));\n          $(element).data('ps', ps);\n        } // reset perfect scrollbar on resize\n\n\n        $(window).resize(function () {\n          ps.update();\n        });\n      },\n\n      /**\r\n       * Set column title from options.columns settings\r\n       */\n      setHeadTitle: function setHeadTitle(tablePart) {\n        if (typeof tablePart === 'undefined') tablePart = datatable.tableHead;\n        tablePart = $(tablePart)[0];\n        var columns = options.columns;\n        var row = tablePart.getElementsByTagName('tr')[0];\n        var ths = tablePart.getElementsByTagName('td');\n\n        if (typeof row === 'undefined') {\n          row = document.createElement('tr');\n          tablePart.appendChild(row);\n        }\n\n        $.each(columns, function (i, column) {\n          var th = ths[i];\n\n          if (typeof th === 'undefined') {\n            th = document.createElement('th');\n            row.appendChild(th);\n          } // set column title\n\n\n          if (typeof column['title'] !== 'undefined') {\n            th.innerHTML = column.title;\n            th.setAttribute('data-field', column.field);\n            util.addClass(th, column[\"class\"]); // set disable autoHide or force enable\n\n            if (typeof column.autoHide !== 'undefined') {\n              if (column.autoHide !== true) {\n                th.setAttribute('data-autohide-disabled', column.autoHide);\n              } else {\n                th.setAttribute('data-autohide-enabled', column.autoHide);\n              }\n            }\n\n            $(th).data(column);\n          } // set header attr option\n\n\n          if (typeof column.attr !== 'undefined') {\n            $.each(column.attr, function (key, val) {\n              th.setAttribute(key, val);\n            });\n          } // apply text align to thead/tfoot\n\n\n          if (typeof column.textAlign !== 'undefined') {\n            var align = typeof datatable.textAlign[column.textAlign] !== 'undefined' ? datatable.textAlign[column.textAlign] : '';\n            util.addClass(th, align);\n          }\n        });\n        Plugin.setupDOM(tablePart);\n      },\n\n      /**\r\n       * Initiate to get remote or local data via ajax\r\n       */\n      dataRender: function dataRender(action) {\n        $(datatable.table).siblings('.' + pfx + 'datatable-pager').removeClass(pfx + 'datatable-paging-loaded');\n\n        var buildMeta = function buildMeta() {\n          datatable.dataSet = datatable.dataSet || [];\n          Plugin.localDataUpdate(); // local pagination meta\n\n          var meta = Plugin.getDataSourceParam('pagination');\n\n          if (meta.perpage === 0) {\n            meta.perpage = options.data.pageSize || 10;\n          }\n\n          meta.total = datatable.dataSet.length;\n          var start = Math.max(meta.perpage * (meta.page - 1), 0);\n          var end = Math.min(start + meta.perpage, meta.total);\n          datatable.dataSet = $(datatable.dataSet).slice(start, end);\n          return meta;\n        };\n\n        var afterGetData = function afterGetData(result) {\n          var localPagingCallback = function localPagingCallback(ctx, meta) {\n            if (!$(ctx.pager).hasClass(pfx + 'datatable-paging-loaded')) {\n              $(ctx.pager).remove();\n              ctx.init(meta);\n            }\n\n            $(ctx.pager).off().on(pfx + 'datatable-on-goto-page', function (e) {\n              $(ctx.pager).remove();\n              ctx.init(meta);\n            });\n            var start = Math.max(meta.perpage * (meta.page - 1), 0);\n            var end = Math.min(start + meta.perpage, meta.total);\n            Plugin.localDataUpdate();\n            datatable.dataSet = $(datatable.dataSet).slice(start, end); // insert data into table content\n\n            Plugin.insertData();\n          };\n\n          $(datatable.wrap).removeClass(pfx + 'datatable-error'); // pagination enabled\n\n          if (options.pagination) {\n            if (options.data.serverPaging && options.data.type !== 'local') {\n              // server pagination\n              var serverMeta = Plugin.getObject('meta', result || null);\n\n              if (serverMeta !== null) {\n                Plugin.pagingObject = Plugin.paging(serverMeta);\n              } else {\n                // no meta object from server response, fallback to local pagination\n                Plugin.pagingObject = Plugin.paging(buildMeta(), localPagingCallback);\n              }\n            } else {\n              // local pagination can be used by remote data also\n              Plugin.pagingObject = Plugin.paging(buildMeta(), localPagingCallback);\n            }\n          } else {\n            // pagination is disabled\n            Plugin.localDataUpdate();\n          } // insert data into table content\n\n\n          Plugin.insertData();\n        }; // get local datasource\n\n\n        if (options.data.type === 'local' // for remote json datasource\n        // || typeof options.data.source.read === 'undefined' && datatable.dataSet !== null\n        // for remote datasource, server sorting is disabled and data already received from remote\n        || options.data.serverSorting === false && action === 'sort' || options.data.serverFiltering === false && action === 'search') {\n          setTimeout(function () {\n            Plugin.setAutoColumns();\n            afterGetData();\n          });\n          return;\n        } // getting data from remote only\n\n\n        Plugin.getData().done(afterGetData);\n      },\n\n      /**\r\n       * Process ajax data\r\n       */\n      insertData: function insertData() {\n        datatable.dataSet = datatable.dataSet || [];\n        var params = Plugin.getDataSourceParam(); // get row attributes\n\n        var pagination = params.pagination;\n        var start = (Math.max(pagination.page, 1) - 1) * pagination.perpage;\n        var end = Math.min(pagination.page, pagination.pages) * pagination.perpage;\n        var rowProps = {};\n\n        if (typeof options.data.attr.rowProps !== 'undefined' && options.data.attr.rowProps.length) {\n          rowProps = options.data.attr.rowProps.slice(start, end);\n        }\n\n        var tableBody = document.createElement('tbody');\n        tableBody.style.visibility = 'hidden';\n        var colLength = options.columns.length;\n        $.each(datatable.dataSet, function (rowIndex, row) {\n          var tr = document.createElement('tr');\n          tr.setAttribute('data-row', rowIndex); // keep data object to row\n\n          $(tr).data('obj', row);\n\n          if (typeof rowProps[rowIndex] !== 'undefined') {\n            $.each(rowProps[rowIndex], function () {\n              tr.setAttribute(this.name, this.value);\n            });\n          }\n\n          var cellIndex = 0;\n          var tds = [];\n\n          for (var a = 0; a < colLength; a += 1) {\n            var column = options.columns[a];\n            var classes = []; // add sorted class to cells\n\n            if (Plugin.getObject('sort.field', params) === column.field) {\n              classes.push(pfx + 'datatable-cell-sorted');\n            } // apply text align\n\n\n            if (typeof column.textAlign !== 'undefined') {\n              var align = typeof datatable.textAlign[column.textAlign] !== 'undefined' ? datatable.textAlign[column.textAlign] : '';\n              classes.push(align);\n            } // var classAttr = '';\n\n\n            if (typeof column[\"class\"] !== 'undefined') {\n              classes.push(column[\"class\"]);\n            }\n\n            var td = document.createElement('td');\n            util.addClass(td, classes.join(' '));\n            td.setAttribute('data-field', column.field); // set disable autoHide or force enable\n\n            if (typeof column.autoHide !== 'undefined') {\n              if (column.autoHide !== true) {\n                td.setAttribute('data-autohide-disabled', column.autoHide);\n              } else {\n                td.setAttribute('data-autohide-enabled', column.autoHide);\n              }\n            }\n\n            td.innerHTML = Plugin.getObject(column.field, row);\n            td.setAttribute('aria-label', Plugin.getObject(column.field, row));\n            tr.appendChild(td);\n          }\n\n          tableBody.appendChild(tr);\n        }); // display no records message\n\n        if (datatable.dataSet.length === 0) {\n          var errorSpan = document.createElement('span');\n          util.addClass(errorSpan, pfx + 'datatable-error');\n          errorSpan.innerHTML = Plugin.getOption('translate.records.noRecords');\n          tableBody.appendChild(errorSpan);\n          $(datatable.wrap).addClass(pfx + 'datatable-error ' + pfx + 'datatable-loaded');\n          Plugin.spinnerCallback(false);\n        } // replace existing table body\n\n\n        $(datatable.tableBody).replaceWith(tableBody);\n        datatable.tableBody = tableBody; // layout update\n\n        Plugin.setupDOM(datatable.table);\n        Plugin.setupCellField([datatable.tableBody]);\n        Plugin.setupTemplateCell(datatable.tableBody);\n        Plugin.layoutUpdate();\n      },\n      updateTableComponents: function updateTableComponents() {\n        datatable.tableHead = $(datatable.table).children('thead').get(0);\n        datatable.tableBody = $(datatable.table).children('tbody').get(0);\n        datatable.tableFoot = $(datatable.table).children('tfoot').get(0);\n      },\n\n      /**\r\n       * Call ajax for raw JSON data\r\n       */\n      getData: function getData() {\n        // Plugin.spinnerCallback(true);\n        var ajaxParams = {\n          dataType: 'json',\n          method: 'POST',\n          data: {},\n          timeout: Plugin.getOption('data.source.read.timeout') || 30000\n        };\n\n        if (options.data.type === 'local') {\n          ajaxParams.url = options.data.source;\n        }\n\n        if (options.data.type === 'remote') {\n          var data = Plugin.getDataSourceParam(); // remove if server params is not enabled\n\n          if (!Plugin.getOption('data.serverPaging')) {\n            delete data['pagination'];\n          }\n\n          if (!Plugin.getOption('data.serverSorting')) {\n            delete data['sort'];\n          }\n\n          ajaxParams.data = $.extend({}, ajaxParams.data, Plugin.getOption('data.source.read.params'), data);\n          ajaxParams = $.extend({}, ajaxParams, Plugin.getOption('data.source.read'));\n          if (typeof ajaxParams.url !== 'string') ajaxParams.url = Plugin.getOption('data.source.read');\n          if (typeof ajaxParams.url !== 'string') ajaxParams.url = Plugin.getOption('data.source'); // ajaxParams.data = $.extend(ajaxParams.data, data.pagination);\n        }\n\n        return $.ajax(ajaxParams).done(function (response, textStatus, jqXHR) {\n          datatable.lastResponse = response; // extendible data map callback for custom datasource\n\n          datatable.dataSet = datatable.originalDataSet = Plugin.dataMapCallback(response);\n          Plugin.setAutoColumns();\n          $(datatable).trigger(pfx + 'datatable-on-ajax-done', [datatable.dataSet]);\n        }).fail(function (jqXHR, textStatus, errorThrown) {\n          $(datatable).trigger(pfx + 'datatable-on-ajax-fail', [jqXHR]);\n          $(datatable.tableBody).html($('<span/>').addClass(pfx + 'datatable-error').html(Plugin.getOption('translate.records.noRecords')));\n          $(datatable.wrap).addClass(pfx + 'datatable-error ' + pfx + 'datatable-loaded');\n          Plugin.spinnerCallback(false);\n        }).always(function () {});\n      },\n\n      /**\r\n       * Pagination object\r\n       * @param meta if null, local pagination, otherwise remote\r\n       *     pagination\r\n       * @param callback for update data when navigating page\r\n       */\n      paging: function paging(meta, callback) {\n        var pg = {\n          meta: null,\n          pager: null,\n          paginateEvent: null,\n          pagerLayout: {\n            pagination: null,\n            info: null\n          },\n          callback: null,\n          init: function init(meta) {\n            pg.meta = meta; // parse pagination meta to integer\n\n            pg.meta.page = parseInt(pg.meta.page);\n            pg.meta.pages = parseInt(pg.meta.pages);\n            pg.meta.perpage = parseInt(pg.meta.perpage);\n            pg.meta.total = parseInt(pg.meta.total); // always recount total pages\n\n            pg.meta.pages = Math.max(Math.ceil(pg.meta.total / pg.meta.perpage), 1); // current page must be not over than total pages\n\n            if (pg.meta.page > pg.meta.pages) pg.meta.page = pg.meta.pages; // set unique event name between tables\n\n            pg.paginateEvent = Plugin.getTablePrefix('paging');\n            pg.pager = $(datatable.table).siblings('.' + pfx + 'datatable-pager');\n            if ($(pg.pager).hasClass(pfx + 'datatable-paging-loaded')) return; // if class .'+pfx+'datatable-paging-loaded not exist, recreate pagination\n\n            $(pg.pager).remove(); // if no pages available\n\n            if (pg.meta.pages === 0) return; // update datasource params\n\n            Plugin.setDataSourceParam('pagination', {\n              page: pg.meta.page,\n              pages: pg.meta.pages,\n              perpage: pg.meta.perpage,\n              total: pg.meta.total\n            }); // default callback function, contains remote pagination handler\n\n            pg.callback = pg.serverCallback; // custom callback function\n\n            if (typeof callback === 'function') pg.callback = callback;\n            pg.addPaginateEvent();\n            pg.populate();\n            pg.meta.page = Math.max(pg.meta.page || 1, pg.meta.page);\n            $(datatable).trigger(pg.paginateEvent, pg.meta);\n            pg.pagingBreakpoint.call();\n            $(window).resize(pg.pagingBreakpoint);\n          },\n          serverCallback: function serverCallback(ctx, meta) {\n            Plugin.dataRender();\n          },\n          populate: function populate() {\n            datatable.dataSet = datatable.dataSet || []; // no records available\n\n            if (datatable.dataSet.length === 0) return;\n            var icons = Plugin.getOption('layout.icons.pagination');\n            var title = Plugin.getOption('translate.toolbar.pagination.items.default'); // pager root element\n\n            pg.pager = $('<div/>').addClass(pfx + 'datatable-pager ' + pfx + 'datatable-paging-loaded'); // numbering links\n\n            var pagerNumber = $('<ul/>').addClass(pfx + 'datatable-pager-nav my-2 mb-sm-0');\n            pg.pagerLayout['pagination'] = pagerNumber; // pager first/previous button\n\n            $('<li/>').append($('<a/>').attr('title', title.first).addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-first').append($('<i/>').addClass(icons.first)).on('click', pg.gotoMorePage).attr('data-page', 1)).appendTo(pagerNumber);\n            $('<li/>').append($('<a/>').attr('title', title.prev).addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-prev').append($('<i/>').addClass(icons.prev)).on('click', pg.gotoMorePage)).appendTo(pagerNumber);\n            $('<li/>').append($('<input/>').attr('type', 'text').addClass(pfx + 'datatable-pager-input form-control').attr('title', title.input).on('keyup', function () {\n              // on keyup update [data-page]\n              $(this).attr('data-page', Math.abs($(this).val()));\n            }).on('keypress', function (e) {\n              // on keypressed enter button\n              if (e.which === 13) pg.gotoMorePage(e);\n            })).appendTo(pagerNumber);\n            var pagesNumber = Plugin.getOption('toolbar.items.pagination.pages.desktop.pagesNumber');\n            var end = Math.ceil(pg.meta.page / pagesNumber) * pagesNumber;\n            var start = end - pagesNumber;\n\n            if (end > pg.meta.pages) {\n              end = pg.meta.pages;\n            } // keep pagination 1 if there is no records\n\n\n            if (start < 0) {\n              start = 0;\n            }\n\n            for (var x = start; x < (end || 1); x++) {\n              var pageNumber = x + 1;\n              $('<li/>').append($('<a/>').addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-number').text(pageNumber).attr('data-page', pageNumber).attr('title', pageNumber).on('click', pg.gotoPage)).appendTo(pagerNumber);\n            } // pager next/last button\n\n\n            $('<li/>').append($('<a/>').attr('title', title.next).addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-next').append($('<i/>').addClass(icons.next)).on('click', pg.gotoMorePage)).appendTo(pagerNumber);\n            $('<li/>').append($('<a/>').attr('title', title.last).addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-last').append($('<i/>').addClass(icons.last)).on('click', pg.gotoMorePage).attr('data-page', pg.meta.pages)).appendTo(pagerNumber); // page info\n\n            if (Plugin.getOption('toolbar.items.info')) {\n              pg.pagerLayout['info'] = $('<div/>').addClass(pfx + 'datatable-pager-info my-2 mb-sm-0').append($('<span/>').addClass(pfx + 'datatable-pager-detail'));\n            }\n\n            $.each(Plugin.getOption('toolbar.layout'), function (i, layout) {\n              $(pg.pagerLayout[layout]).appendTo(pg.pager);\n            }); // page size select\n\n            var pageSizeSelect = $('<select/>').addClass('selectpicker ' + pfx + 'datatable-pager-size').attr('title', Plugin.getOption('translate.toolbar.pagination.items.default.select')).attr('data-width', '60px').attr('data-container', 'body').val(pg.meta.perpage).on('change', pg.updatePerpage).prependTo(pg.pagerLayout['info']);\n            var pageSizes = Plugin.getOption('toolbar.items.pagination.pageSizeSelect'); // default value here, to fix override option by user\n\n            if (pageSizes.length == 0) pageSizes = [5, 10, 20, 30, 50, 100];\n            $.each(pageSizes, function (i, size) {\n              var display = size;\n              if (size === -1) display = Plugin.getOption('translate.toolbar.pagination.items.default.all');\n              $('<option/>').attr('value', size).html(display).appendTo(pageSizeSelect);\n            }); // init selectpicker to dropdown\n\n            $(datatable).ready(function () {\n              $('.selectpicker').selectpicker().on('hide.bs.select', function () {\n                // fix dropup arrow icon on hide\n                $(this).closest('.bootstrap-select').removeClass('dropup');\n              }).siblings('.dropdown-toggle').attr('title', Plugin.getOption('translate.toolbar.pagination.items.default.select'));\n            });\n            pg.paste();\n          },\n          paste: function paste() {\n            // insert pagination based on placement position, top|bottom\n            $.each($.unique(Plugin.getOption('toolbar.placement')), function (i, position) {\n              if (position === 'bottom') {\n                $(pg.pager).clone(true).insertAfter(datatable.table);\n              }\n\n              if (position === 'top') {\n                // pager top need some extra space\n                $(pg.pager).clone(true).addClass(pfx + 'datatable-pager-top').insertBefore(datatable.table);\n              }\n            });\n          },\n          gotoMorePage: function gotoMorePage(e) {\n            e.preventDefault(); // $(this) is a link of .'+pfx+'datatable-pager-link\n\n            if ($(this).attr('disabled') === 'disabled') return false;\n            var page = $(this).attr('data-page'); // event from text input\n\n            if (typeof page === 'undefined') {\n              page = $(e.target).attr('data-page');\n            }\n\n            pg.openPage(parseInt(page));\n            return false;\n          },\n          gotoPage: function gotoPage(e) {\n            e.preventDefault(); // prevent from click same page number\n\n            if ($(this).hasClass(pfx + 'datatable-pager-link-active')) return;\n            pg.openPage(parseInt($(this).data('page')));\n          },\n          openPage: function openPage(page) {\n            // currentPage is 1-based index\n            pg.meta.page = parseInt(page);\n            $(datatable).trigger(pg.paginateEvent, pg.meta);\n            pg.callback(pg, pg.meta); // update page callback function\n\n            $(pg.pager).trigger(pfx + 'datatable-on-goto-page', pg.meta);\n          },\n          updatePerpage: function updatePerpage(e) {\n            e.preventDefault(); // if (Plugin.getOption('layout.height') === null) {\n            // fix white space, when perpage is set from many records to less records\n            // $('html, body').animate({scrollTop: $(datatable).position().top});\n            // }\n            // hide dropdown after select\n\n            $(this).selectpicker('toggle');\n            pg.pager = $(datatable.table).siblings('.' + pfx + 'datatable-pager').removeClass(pfx + 'datatable-paging-loaded'); // on change select page size\n\n            if (e.originalEvent) {\n              pg.meta.perpage = parseInt($(this).val());\n            }\n\n            $(pg.pager).find('select.' + pfx + 'datatable-pager-size').val(pg.meta.perpage).attr('data-selected', pg.meta.perpage); // update datasource params\n\n            Plugin.setDataSourceParam('pagination', {\n              page: pg.meta.page,\n              pages: pg.meta.pages,\n              perpage: pg.meta.perpage,\n              total: pg.meta.total\n            }); // update page callback function\n\n            $(pg.pager).trigger(pfx + 'datatable-on-update-perpage', pg.meta);\n            $(datatable).trigger(pg.paginateEvent, pg.meta);\n            pg.callback(pg, pg.meta); // update pagination info\n\n            pg.updateInfo.call();\n          },\n          addPaginateEvent: function addPaginateEvent(e) {\n            // pagination event\n            $(datatable).off(pg.paginateEvent).on(pg.paginateEvent, function (e, meta) {\n              Plugin.spinnerCallback(true);\n              pg.pager = $(datatable.table).siblings('.' + pfx + 'datatable-pager');\n              var pagerNumber = $(pg.pager).find('.' + pfx + 'datatable-pager-nav'); // set sync active page class\n\n              $(pagerNumber).find('.' + pfx + 'datatable-pager-link-active').removeClass(pfx + 'datatable-pager-link-active');\n              $(pagerNumber).find('.' + pfx + 'datatable-pager-link-number[data-page=\"' + meta.page + '\"]').addClass(pfx + 'datatable-pager-link-active'); // set next and previous link page number\n\n              $(pagerNumber).find('.' + pfx + 'datatable-pager-link-prev').attr('data-page', Math.max(meta.page - 1, 1));\n              $(pagerNumber).find('.' + pfx + 'datatable-pager-link-next').attr('data-page', Math.min(meta.page + 1, meta.pages)); // current page input value sync\n\n              $(pg.pager).each(function () {\n                $(this).find('.' + pfx + 'datatable-pager-input[type=\"text\"]').prop('value', meta.page);\n              }); // if only 1 page, should hide page?\n              // $(pg.pager).find('.' + pfx + 'datatable-pager-nav').show();\n              // if (meta.pages <= 1) {\n              // \t// hide pager if has 1 page\n              // \t$(pg.pager).find('.' + pfx + 'datatable-pager-nav').hide();\n              // }\n              // update datasource params\n\n              Plugin.setDataSourceParam('pagination', {\n                page: pg.meta.page,\n                pages: pg.meta.pages,\n                perpage: pg.meta.perpage,\n                total: pg.meta.total\n              });\n              $(pg.pager).find('select.' + pfx + 'datatable-pager-size').val(meta.perpage).attr('data-selected', meta.perpage); // clear active rows\n\n              $(datatable.table).find('.' + pfx + 'checkbox > [type=\"checkbox\"]').prop('checked', false);\n              $(datatable.table).find('.' + pfx + 'datatable-row-active').removeClass(pfx + 'datatable-row-active');\n              pg.updateInfo.call();\n              pg.pagingBreakpoint.call(); // Plugin.resetScroll();\n            });\n          },\n          updateInfo: function updateInfo() {\n            var start = Math.max(pg.meta.perpage * (pg.meta.page - 1) + 1, 1);\n            var end = Math.min(start + pg.meta.perpage - 1, pg.meta.total); // page info update\n\n            $(pg.pager).find('.' + pfx + 'datatable-pager-info').find('.' + pfx + 'datatable-pager-detail').html(Plugin.dataPlaceholder(Plugin.getOption('translate.toolbar.pagination.items.info'), {\n              // set start page 0 if the is no records. eg. Showing 0 - 0 of 0\n              start: pg.meta.total === 0 ? 0 : start,\n              end: pg.meta.perpage === -1 ? pg.meta.total : end,\n              pageSize: pg.meta.perpage === -1 || pg.meta.perpage >= pg.meta.total ? pg.meta.total : pg.meta.perpage,\n              total: pg.meta.total\n            }));\n          },\n\n          /**\r\n           * Update pagination layout breakpoint\r\n           */\n          pagingBreakpoint: function pagingBreakpoint() {\n            // keep page links reference\n            var pagerNumber = $(datatable.table).siblings('.' + pfx + 'datatable-pager').find('.' + pfx + 'datatable-pager-nav');\n            if ($(pagerNumber).length === 0) return;\n            var currentPage = Plugin.getCurrentPage();\n            var pagerInput = $(pagerNumber).find('.' + pfx + 'datatable-pager-input').closest('li'); // reset\n\n            $(pagerNumber).find('li').show(); // pagination update\n\n            $.each(Plugin.getOption('toolbar.items.pagination.pages'), function (mode, option) {\n              if (util.isInResponsiveRange(mode)) {\n                switch (mode) {\n                  case 'desktop':\n                  case 'tablet':\n                    var end = Math.ceil(currentPage / option.pagesNumber) * option.pagesNumber;\n                    var start = end - option.pagesNumber;\n                    $(pagerInput).hide();\n                    pg.meta = Plugin.getDataSourceParam('pagination');\n                    pg.paginationUpdate();\n                    break;\n\n                  case 'mobile':\n                    $(pagerInput).show();\n                    $(pagerNumber).find('.' + pfx + 'datatable-pager-link-more-prev').closest('li').hide();\n                    $(pagerNumber).find('.' + pfx + 'datatable-pager-link-more-next').closest('li').hide();\n                    $(pagerNumber).find('.' + pfx + 'datatable-pager-link-number').closest('li').hide();\n                    break;\n                }\n\n                return false;\n              }\n            });\n          },\n\n          /**\r\n           * Update pagination number and button display\r\n           */\n          paginationUpdate: function paginationUpdate() {\n            var pager = $(datatable.table).siblings('.' + pfx + 'datatable-pager').find('.' + pfx + 'datatable-pager-nav'),\n                pagerMorePrev = $(pager).find('.' + pfx + 'datatable-pager-link-more-prev'),\n                pagerMoreNext = $(pager).find('.' + pfx + 'datatable-pager-link-more-next'),\n                pagerFirst = $(pager).find('.' + pfx + 'datatable-pager-link-first'),\n                pagerPrev = $(pager).find('.' + pfx + 'datatable-pager-link-prev'),\n                pagerNext = $(pager).find('.' + pfx + 'datatable-pager-link-next'),\n                pagerLast = $(pager).find('.' + pfx + 'datatable-pager-link-last'); // get visible page\n\n            var pagerNumber = $(pager).find('.' + pfx + 'datatable-pager-link-number'); // get page before of first visible\n\n            var morePrevPage = Math.max($(pagerNumber).first().data('page') - 1, 1);\n            $(pagerMorePrev).each(function (i, prev) {\n              $(prev).attr('data-page', morePrevPage);\n            }); // show/hide <li>\n\n            if (morePrevPage === 1) {\n              $(pagerMorePrev).parent().hide();\n            } else {\n              $(pagerMorePrev).parent().show();\n            } // get page after of last visible\n\n\n            var moreNextPage = Math.min($(pagerNumber).last().data('page') + 1, pg.meta.pages);\n            $(pagerMoreNext).each(function (i, prev) {\n              $(pagerMoreNext).attr('data-page', moreNextPage).show();\n            }); // show/hide <li>\n\n            if (moreNextPage === pg.meta.pages // missing dot fix when last hidden page is one left\n            && moreNextPage === $(pagerNumber).last().data('page')) {\n              $(pagerMoreNext).parent().hide();\n            } else {\n              $(pagerMoreNext).parent().show();\n            } // begin/end of pages\n\n\n            if (pg.meta.page === 1) {\n              $(pagerFirst).attr('disabled', true).addClass(pfx + 'datatable-pager-link-disabled');\n              $(pagerPrev).attr('disabled', true).addClass(pfx + 'datatable-pager-link-disabled');\n            } else {\n              $(pagerFirst).removeAttr('disabled').removeClass(pfx + 'datatable-pager-link-disabled');\n              $(pagerPrev).removeAttr('disabled').removeClass(pfx + 'datatable-pager-link-disabled');\n            }\n\n            if (pg.meta.page === pg.meta.pages) {\n              $(pagerNext).attr('disabled', true).addClass(pfx + 'datatable-pager-link-disabled');\n              $(pagerLast).attr('disabled', true).addClass(pfx + 'datatable-pager-link-disabled');\n            } else {\n              $(pagerNext).removeAttr('disabled').removeClass(pfx + 'datatable-pager-link-disabled');\n              $(pagerLast).removeAttr('disabled').removeClass(pfx + 'datatable-pager-link-disabled');\n            } // display more buttons\n\n\n            var nav = Plugin.getOption('toolbar.items.pagination.navigation');\n            if (!nav.first) $(pagerFirst).remove();\n            if (!nav.prev) $(pagerPrev).remove();\n            if (!nav.next) $(pagerNext).remove();\n            if (!nav.last) $(pagerLast).remove();\n\n            if (!nav.more) {\n              $(pagerMorePrev).remove();\n              $(pagerMoreNext).remove();\n            }\n          }\n        };\n        pg.init(meta);\n        return pg;\n      },\n\n      /**\r\n       * Hide/show table cell defined by\r\n       * options[columns][i][responsive][visible/hidden]\r\n       */\n      columnHide: function columnHide() {\n        var screen = util.getViewPort().width; // foreach columns setting\n\n        $.each(options.columns, function (i, column) {\n          if (typeof column.responsive !== 'undefined' || typeof column.visible !== 'undefined') {\n            var field = column.field;\n            var tds = $.grep($(datatable.table).find('.' + pfx + 'datatable-cell'), function (n, i) {\n              return field === $(n).data('field');\n            });\n            setTimeout(function () {\n              // hide by force\n              if (Plugin.getObject('visible', column) === false) {\n                $(tds).hide();\n              } else {\n                // show/hide by responsive breakpoint\n                if (util.getBreakpoint(Plugin.getObject('responsive.hidden', column)) >= screen) {\n                  $(tds).hide();\n                } else {\n                  $(tds).show();\n                }\n\n                if (util.getBreakpoint(Plugin.getObject('responsive.visible', column)) <= screen) {\n                  $(tds).show();\n                } else {\n                  $(tds).hide();\n                }\n              }\n            });\n          }\n        });\n      },\n\n      /**\r\n       * Setup sub datatable\r\n       */\n      setupSubDatatable: function setupSubDatatable() {\n        var subTableCallback = Plugin.getOption('detail.content');\n        if (typeof subTableCallback !== 'function') return; // subtable already exist\n\n        if ($(datatable.table).find('.' + pfx + 'datatable-subtable').length > 0) return;\n        $(datatable.wrap).addClass(pfx + 'datatable-subtable');\n        options.columns[0]['subtable'] = true; // toggle on open sub table\n\n        var toggleSubTable = function toggleSubTable(e) {\n          e.preventDefault(); // get parent row of this subtable\n\n          var parentRow = $(this).closest('.' + pfx + 'datatable-row'); // get subtable row for sub table\n\n          var subTableRow = $(parentRow).next('.' + pfx + 'datatable-row-subtable');\n\n          if ($(subTableRow).length === 0) {\n            // prepare DOM for sub table, each <tr> as parent and add <tr> as child table\n            subTableRow = $('<tr/>').addClass(pfx + 'datatable-row-subtable ' + pfx + 'datatable-row-loading').hide().append($('<td/>').addClass(pfx + 'datatable-subtable').attr('colspan', Plugin.getTotalColumns()));\n            $(parentRow).after(subTableRow); // add class to even row\n\n            if ($(parentRow).hasClass(pfx + 'datatable-row-even')) {\n              $(subTableRow).addClass(pfx + 'datatable-row-subtable-even');\n            }\n          }\n\n          $(subTableRow).toggle();\n          var subTable = $(subTableRow).find('.' + pfx + 'datatable-subtable'); // get id from first column of parent row\n\n          var primaryKey = $(this).closest('[data-field]:first-child').find('.' + pfx + 'datatable-toggle-subtable').data('value');\n          var icon = $(this).find('i').removeAttr('class'); // prevent duplicate datatable init\n\n          if ($(parentRow).hasClass(pfx + 'datatable-row-subtable-expanded')) {\n            $(icon).addClass(Plugin.getOption('layout.icons.rowDetail.collapse')); // remove expand class from parent row\n\n            $(parentRow).removeClass(pfx + 'datatable-row-subtable-expanded'); // trigger event on collapse\n\n            $(datatable).trigger(pfx + 'datatable-on-collapse-subtable', [parentRow]);\n          } else {\n            // expand and run callback function\n            $(icon).addClass(Plugin.getOption('layout.icons.rowDetail.expand')); // add expand class to parent row\n\n            $(parentRow).addClass(pfx + 'datatable-row-subtable-expanded'); // trigger event on expand\n\n            $(datatable).trigger(pfx + 'datatable-on-expand-subtable', [parentRow]);\n          } // prevent duplicate datatable init\n\n\n          if ($(subTable).find('.' + pfx + 'datatable').length === 0) {\n            // get data by primary id\n            $.map(datatable.dataSet, function (n, i) {\n              // primary id must be at the first column, otherwise e.data will be undefined\n              if (primaryKey === n[options.columns[0].field]) {\n                e.data = n;\n                return true;\n              }\n\n              return false;\n            }); // deprecated in v5.0.6\n\n            e.detailCell = subTable;\n            e.parentRow = parentRow;\n            e.subTable = subTable; // run callback with event\n\n            subTableCallback(e);\n            $(subTable).children('.' + pfx + 'datatable').on(pfx + 'datatable-on-init', function (e) {\n              $(subTableRow).removeClass(pfx + 'datatable-row-loading');\n            });\n\n            if (Plugin.getOption('data.type') === 'local') {\n              $(subTableRow).removeClass(pfx + 'datatable-row-loading');\n            }\n          }\n        };\n\n        var columns = options.columns;\n        $(datatable.tableBody).find('.' + pfx + 'datatable-row').each(function (tri, tr) {\n          $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {\n            // get column settings by field\n            var column = $.grep(columns, function (n, i) {\n              return $(td).data('field') === n.field;\n            })[0];\n\n            if (typeof column !== 'undefined') {\n              var value = $(td).text(); // enable column subtable toggle\n\n              if (typeof column.subtable !== 'undefined' && column.subtable) {\n                // check if subtable toggle exist\n                if ($(td).find('.' + pfx + 'datatable-toggle-subtable').length > 0) return; // append subtable toggle\n\n                $(td).html($('<a/>').addClass(pfx + 'datatable-toggle-subtable').attr('href', '#').attr('data-value', value).attr('title', Plugin.getOption('detail.title')).on('click', toggleSubTable).append($('<i/>').css('width', $(td).data('width')).addClass(Plugin.getOption('layout.icons.rowDetail.collapse'))));\n              }\n            }\n          });\n        }); // $(datatable.tableHead).find('.'+pfx+'-datatable-row').first()\n      },\n\n      /**\r\n       * Datasource mapping callback\r\n       */\n      dataMapCallback: function dataMapCallback(raw) {\n        // static dataset array\n        var dataSet = raw; // dataset mapping callback\n\n        if (typeof Plugin.getOption('data.source.read.map') === 'function') {\n          return Plugin.getOption('data.source.read.map')(raw);\n        } else {\n          // default data mapping fallback\n          if (typeof raw !== 'undefined' && typeof raw.data !== 'undefined') {\n            dataSet = raw.data;\n          }\n        }\n\n        return dataSet;\n      },\n      isSpinning: false,\n\n      /**\r\n       * BlockUI spinner callback\r\n       * @param block\r\n       * @param target\r\n       */\n      spinnerCallback: function spinnerCallback(block, target) {\n        if (typeof target === 'undefined') target = datatable; // get spinner options\n\n        var spinnerOptions = Plugin.getOption('layout.spinner'); // spinner is disabled\n\n        if (typeof spinnerOptions === 'undefined' || !spinnerOptions) {\n          return;\n        }\n\n        if (block) {\n          if (!Plugin.isSpinning) {\n            if (typeof spinnerOptions.message !== 'undefined' && spinnerOptions.message === true) {\n              // use default spinner message from translation\n              spinnerOptions.message = Plugin.getOption('translate.records.processing');\n            }\n\n            Plugin.isSpinning = true;\n\n            if (typeof app !== 'undefined') {\n              app.block(target, spinnerOptions);\n            }\n          }\n        } else {\n          Plugin.isSpinning = false;\n\n          if (typeof app !== 'undefined') {\n            app.unblock(target);\n          }\n        }\n      },\n\n      /**\r\n       * Default sort callback function\r\n       * @param data\r\n       * @param sort\r\n       * @param column\r\n       * @returns {*|Array.<T>|{sort, field}|{asc, desc}}\r\n       */\n      sortCallback: function sortCallback(data, sort, column) {\n        var type = column['type'] || 'string';\n        var format = column['format'] || '';\n        var field = column['field'];\n        return $(data).sort(function (a, b) {\n          var aField = a[field];\n          var bField = b[field];\n\n          switch (type) {\n            case 'date':\n              if (typeof moment === 'undefined') {\n                throw new Error('Moment.js is required.');\n              }\n\n              var diff = moment(aField, format).diff(moment(bField, format));\n\n              if (sort === 'asc') {\n                return diff > 0 ? 1 : diff < 0 ? -1 : 0;\n              } else {\n                return diff < 0 ? 1 : diff > 0 ? -1 : 0;\n              }\n\n              break;\n\n            case 'number':\n              if (isNaN(parseFloat(aField)) && aField != null) {\n                aField = Number(aField.replace(/[^0-9\\.-]+/g, ''));\n              }\n\n              if (isNaN(parseFloat(bField)) && bField != null) {\n                bField = Number(bField.replace(/[^0-9\\.-]+/g, ''));\n              }\n\n              aField = parseFloat(aField);\n              bField = parseFloat(bField);\n\n              if (sort === 'asc') {\n                return aField > bField ? 1 : aField < bField ? -1 : 0;\n              } else {\n                return aField < bField ? 1 : aField > bField ? -1 : 0;\n              }\n\n              break;\n\n            case 'html':\n              return $(data).sort(function (a, b) {\n                // get the text only from html\n                aField = $(a[field]).text();\n                bField = $(b[field]).text(); // sort\n\n                if (sort === 'asc') {\n                  return aField > bField ? 1 : aField < bField ? -1 : 0;\n                } else {\n                  return aField < bField ? 1 : aField > bField ? -1 : 0;\n                }\n              });\n              break;\n\n            case 'string':\n            default:\n              if (sort === 'asc') {\n                return aField > bField ? 1 : aField < bField ? -1 : 0;\n              } else {\n                return aField < bField ? 1 : aField > bField ? -1 : 0;\n              }\n\n              break;\n          }\n        });\n      },\n\n      /**\r\n       * Custom debug log\r\n       * @param text\r\n       * @param obj\r\n       */\n      log: function log(text, obj) {\n        if (typeof obj === 'undefined') obj = '';\n\n        if (datatable.debug) {\n          console.log(text, obj);\n        }\n      },\n\n      /**\r\n       * Auto hide columnds overflow in row\r\n       */\n      autoHide: function autoHide() {\n        var hiddenExist = false; // force hide enabled\n\n        var hidDefault = $(datatable.table).find('[data-autohide-enabled]');\n\n        if (hidDefault.length) {\n          hiddenExist = true;\n          hidDefault.hide();\n        }\n\n        var toggleHiddenColumns = function toggleHiddenColumns(e) {\n          e.preventDefault();\n          var row = $(this).closest('.' + pfx + 'datatable-row');\n          var detailRow = $(row).next();\n\n          if (!$(detailRow).hasClass(pfx + 'datatable-row-detail')) {\n            $(this).find('i').removeClass(Plugin.getOption('layout.icons.rowDetail.collapse')).addClass(Plugin.getOption('layout.icons.rowDetail.expand'));\n            var hiddenCells = $(row).find('.' + pfx + 'datatable-cell:hidden');\n            var clonedCells = hiddenCells.clone().show();\n            detailRow = $('<tr/>').addClass(pfx + 'datatable-row-detail').insertAfter(row);\n            var detailRowTd = $('<td/>').addClass(pfx + 'datatable-detail').attr('colspan', Plugin.getTotalColumns()).appendTo(detailRow);\n            var detailSubTable = $('<table/>');\n            $(clonedCells).each(function () {\n              var field = $(this).data('field');\n              var column = $.grep(options.columns, function (n, i) {\n                return field === n.field;\n              })[0];\n\n              if (typeof column === 'undefined' || column.visible !== false) {\n                $(detailSubTable).append($('<tr class=\"' + pfx + 'datatable-row\"></tr>').append($('<td class=\"' + pfx + 'datatable-cell\"></td>').append($('<span/>').append(column.title))).append(this));\n              }\n            });\n            $(detailRowTd).append(detailSubTable);\n          } else {\n            $(this).find('i').removeClass(Plugin.getOption('layout.icons.rowDetail.expand')).addClass(Plugin.getOption('layout.icons.rowDetail.collapse'));\n            $(detailRow).remove();\n          }\n        };\n\n        setTimeout(function () {\n          $(datatable.table).find('.' + pfx + 'datatable-cell').show();\n          $(datatable.tableBody).each(function () {\n            var recursive = 0;\n\n            while ($(this)[0].offsetWidth < $(this)[0].scrollWidth && recursive < options.columns.length) {\n              $(datatable.table).find('.' + pfx + 'datatable-row').each(function (i) {\n                var cell = $(this).find('.' + pfx + 'datatable-cell:not(:hidden):not([data-autohide-disabled])').last();\n\n                if (cell.length) {\n                  $(cell).hide();\n                  hiddenExist = true;\n                }\n              });\n              recursive++;\n            }\n          });\n\n          if (hiddenExist) {\n            // toggle show hidden columns\n            $(datatable.tableBody).find('.' + pfx + 'datatable-row').each(function () {\n              // if no toggle yet\n              if ($(this).find('.' + pfx + 'datatable-toggle-detail').length === 0) {\n                // add toggle\n                $(this).prepend($('<td/>').addClass(pfx + 'datatable-cell ' + pfx + 'datatable-toggle-detail').append($('<a/>').addClass(pfx + 'datatable-toggle-detail').attr('href', '').on('click', toggleHiddenColumns).append('<i class=\"' + Plugin.getOption('layout.icons.rowDetail.collapse') + '\"></i>')));\n              } // check if subtable toggle exist\n\n\n              if ($(datatable.tableHead).find('.' + pfx + 'datatable-toggle-detail').length === 0) {\n                // add empty column to the header and footer\n                $(datatable.tableHead).find('.' + pfx + 'datatable-row').first().prepend('<th class=\"' + pfx + 'datatable-cell ' + pfx + 'datatable-toggle-detail\"><span></span></th>');\n                $(datatable.tableFoot).find('.' + pfx + 'datatable-row').first().prepend('<th class=\"' + pfx + 'datatable-cell ' + pfx + 'datatable-toggle-detail\"><span></span></th>');\n              } else {\n                $(datatable.tableHead).find('.' + pfx + 'datatable-toggle-detail').find('span');\n              }\n            });\n          }\n        });\n        Plugin.adjustCellsWidth.call();\n      },\n\n      /**\r\n       * To enable auto columns features for remote data source\r\n       */\n      setAutoColumns: function setAutoColumns() {\n        if (Plugin.getOption('data.autoColumns')) {\n          $.each(datatable.dataSet[0], function (k, v) {\n            var found = $.grep(options.columns, function (n, i) {\n              return k === n.field;\n            });\n\n            if (found.length === 0) {\n              options.columns.push({\n                field: k,\n                title: k\n              });\n            }\n          });\n          $(datatable.tableHead).find('.' + pfx + 'datatable-row').remove();\n          Plugin.setHeadTitle();\n\n          if (Plugin.getOption('layout.footer')) {\n            $(datatable.tableFoot).find('.' + pfx + 'datatable-row').remove();\n            Plugin.setHeadTitle(datatable.tableFoot);\n          }\n        }\n      },\n\n      /********************\r\n       ** HELPERS\r\n       ********************/\n\n      /**\r\n       * Check if table is a locked colums table\r\n       */\n      isLocked: function isLocked() {\n        var isLocked = Plugin.lockEnabledColumns();\n        return isLocked.left.length > 0 || isLocked.right.length > 0;\n      },\n      isSubtable: function isSubtable() {\n        return util.hasClass(datatable.wrap[0], pfx + 'datatable-subtable') || false;\n      },\n\n      /**\r\n       * Get total extra space of an element for width calculation,\r\n       * including padding, margin, border\r\n       * @param element\r\n       * @returns {number}\r\n       */\n      getExtraSpace: function getExtraSpace(element) {\n        var padding = parseInt($(element).css('paddingRight')) + parseInt($(element).css('paddingLeft'));\n        var margin = parseInt($(element).css('marginRight')) + parseInt($(element).css('marginLeft'));\n        var border = Math.ceil($(element).css('border-right-width').replace('px', ''));\n        return padding + margin + border;\n      },\n\n      /**\r\n       * Insert data of array into {{ }} template placeholder\r\n       * @param template\r\n       * @param data\r\n       * @returns {*}\r\n       */\n      dataPlaceholder: function dataPlaceholder(template, data) {\n        var result = template;\n        $.each(data, function (key, val) {\n          result = result.replace('{{' + key + '}}', val);\n        });\n        return result;\n      },\n\n      /**\r\n       * Get table unique ID\r\n       * Note: table unique change each time refreshed\r\n       * @param suffix\r\n       * @returns {*}\r\n       */\n      getTableId: function getTableId(suffix) {\n        if (typeof suffix === 'undefined') suffix = '';\n        var id = $(datatable).attr('id');\n\n        if (typeof id === 'undefined') {\n          id = $(datatable).attr('class').split(' ')[0];\n        }\n\n        return id + suffix;\n      },\n\n      /**\r\n       * Get table prefix with depth number\r\n       */\n      getTablePrefix: function getTablePrefix(suffix) {\n        if (typeof suffix !== 'undefined') suffix = '-' + suffix;\n        return Plugin.getTableId() + '-' + Plugin.getDepth() + suffix;\n      },\n\n      /**\r\n       * Get current table depth of sub table\r\n       * @returns {number}\r\n       */\n      getDepth: function getDepth() {\n        var depth = 0;\n        var table = datatable.table;\n\n        do {\n          table = $(table).parents('.' + pfx + 'datatable-table');\n          depth++;\n        } while ($(table).length > 0);\n\n        return depth;\n      },\n\n      /**\r\n       * Keep state item\r\n       * @param key\r\n       * @param value\r\n       */\n      stateKeep: function stateKeep(key, value) {\n        key = Plugin.getTablePrefix(key);\n        if (Plugin.getOption('data.saveState') === false) return;\n\n        if (localStorage) {\n          localStorage.setItem(key, JSON.stringify(value));\n        }\n      },\n\n      /**\r\n       * Get state item\r\n       * @param key\r\n       * @param defValue\r\n       */\n      stateGet: function stateGet(key, defValue) {\n        key = Plugin.getTablePrefix(key);\n        if (Plugin.getOption('data.saveState') === false) return;\n        var value = null;\n\n        if (localStorage) {\n          value = localStorage.getItem(key);\n        }\n\n        if (typeof value !== 'undefined' && value !== null) {\n          return JSON.parse(value);\n        }\n      },\n\n      /**\r\n       * Update data in state without clear existing\r\n       * @param key\r\n       * @param value\r\n       */\n      stateUpdate: function stateUpdate(key, value) {\n        var ori = Plugin.stateGet(key);\n        if (typeof ori === 'undefined' || ori === null) ori = {};\n        Plugin.stateKeep(key, $.extend({}, ori, value));\n      },\n\n      /**\r\n       * Remove state item\r\n       * @param key\r\n       */\n      stateRemove: function stateRemove(key) {\n        key = Plugin.getTablePrefix(key);\n\n        if (localStorage) {\n          localStorage.removeItem(key);\n        }\n      },\n\n      /**\r\n       * Get total columns.\r\n       */\n      getTotalColumns: function getTotalColumns(tablePart) {\n        if (typeof tablePart === 'undefined') tablePart = datatable.tableBody;\n        return $(tablePart).find('.' + pfx + 'datatable-row').first().find('.' + pfx + 'datatable-cell').length;\n      },\n\n      /**\r\n       * Get table row. Useful to get row when current table is in lock\r\n       * mode. Can be used for both lock and normal table mode. By\r\n       * default, returning result will be in a list of <td>.\r\n       * @param tablePart\r\n       * @param row 1-based index\r\n       * @param tdOnly Optional. Default true\r\n       * @returns {*}\r\n       */\n      getOneRow: function getOneRow(tablePart, row, tdOnly) {\n        if (typeof tdOnly === 'undefined') tdOnly = true; // get list of <tr>\n\n        var result = $(tablePart).find('.' + pfx + 'datatable-row:not(.' + pfx + 'datatable-row-detail):nth-child(' + row + ')');\n\n        if (tdOnly) {\n          // get list of <td> or <th>\n          result = result.find('.' + pfx + 'datatable-cell');\n        }\n\n        return result;\n      },\n\n      /**\r\n       * Sort table row at HTML level by column index.\r\n       * todo; Not in use.\r\n       * @param header Header sort clicked\r\n       * @param sort asc|desc. Optional. Default asc\r\n       * @param int Boolean. Optional. Comparison value parse to integer.\r\n       *     Default false\r\n       */\n      sortColumn: function sortColumn(header, sort, _int) {\n        if (typeof sort === 'undefined') sort = 'asc'; // desc\n\n        if (typeof _int === 'undefined') _int = false;\n        var column = $(header).index();\n        var rows = $(datatable.tableBody).find('.' + pfx + 'datatable-row');\n        var hIndex = $(header).closest('.' + pfx + 'datatable-lock').index();\n\n        if (hIndex !== -1) {\n          rows = $(datatable.tableBody).find('.' + pfx + 'datatable-lock:nth-child(' + (hIndex + 1) + ')').find('.' + pfx + 'datatable-row');\n        }\n\n        var container = $(rows).parent();\n        $(rows).sort(function (a, b) {\n          var tda = $(a).find('td:nth-child(' + column + ')').text();\n          var tdb = $(b).find('td:nth-child(' + column + ')').text();\n\n          if (_int) {\n            // useful for integer type sorting\n            tda = parseInt(tda);\n            tdb = parseInt(tdb);\n          }\n\n          if (sort === 'asc') {\n            return tda > tdb ? 1 : tda < tdb ? -1 : 0;\n          } else {\n            return tda < tdb ? 1 : tda > tdb ? -1 : 0;\n          }\n        }).appendTo(container);\n      },\n\n      /**\r\n       * Perform sort remote and local\r\n       */\n      sorting: function sorting() {\n        var sortObj = {\n          init: function init() {\n            if (options.sortable) {\n              $(datatable.tableHead).find('.' + pfx + 'datatable-cell:not(.' + pfx + 'datatable-cell-check)').addClass(pfx + 'datatable-cell-sort').off('click').on('click', sortObj.sortClick); // first init\n\n              sortObj.setIcon();\n            }\n          },\n          setIcon: function setIcon() {\n            var meta = Plugin.getDataSourceParam('sort');\n            if ($.isEmptyObject(meta)) return;\n            var column = Plugin.getColumnByField(meta.field); // sort is disabled for this column\n\n            if (typeof column === 'undefined') return;\n            if (typeof column.sortable !== 'undefined' && column.sortable === false) return;\n            if (typeof column.selector !== 'undefined' && column.selector === true) return; // sort icon beside column header\n\n            var td = $(datatable.tableHead).find('.' + pfx + 'datatable-cell[data-field=\"' + meta.field + '\"]').attr('data-sort', meta.sort);\n            var sorting = $(td).find('span');\n            var icon = $(sorting).find('i');\n            var icons = Plugin.getOption('layout.icons.sort'); // update sort icon; desc & asc\n\n            if ($(icon).length > 0) {\n              $(icon).removeAttr('class').addClass(icons[meta.sort]);\n            } else {\n              $(sorting).append($('<i/>').addClass(icons[meta.sort]));\n            } // set sorted class to header on init\n\n\n            $(td).addClass(pfx + 'datatable-cell-sorted');\n          },\n          sortClick: function sortClick(e) {\n            var meta = Plugin.getDataSourceParam('sort');\n            var field = $(this).data('field');\n            var column = Plugin.getColumnByField(field); // sort is disabled for this column\n\n            if (typeof column === 'undefined') return;\n            if (typeof column.sortable !== 'undefined' && column.sortable === false) return;\n            if (typeof column.selector !== 'undefined' && column.selector === true) return; // set sorted class to header\n\n            $(datatable.tableHead).find('th').removeClass(pfx + 'datatable-cell-sorted');\n            util.addClass(this, pfx + 'datatable-cell-sorted');\n            $(datatable.tableHead).find('.' + pfx + 'datatable-cell > span > i').remove();\n\n            if (options.sortable) {\n              Plugin.spinnerCallback(true);\n              var sort = 'desc';\n\n              if (Plugin.getObject('field', meta) === field) {\n                sort = Plugin.getObject('sort', meta);\n              } // toggle sort\n\n\n              sort = typeof sort === 'undefined' || sort === 'desc' ? 'asc' : 'desc'; // update field and sort params\n\n              meta = {\n                field: field,\n                sort: sort\n              };\n              Plugin.setDataSourceParam('sort', meta);\n              sortObj.setIcon();\n              setTimeout(function () {\n                Plugin.dataRender('sort');\n                $(datatable).trigger(pfx + 'datatable-on-sort', meta);\n              }, 300);\n            }\n          }\n        };\n        sortObj.init();\n      },\n\n      /**\r\n       * Update JSON data list linked with sort, filter and pagination.\r\n       * Call this method, before using dataSet variable.\r\n       * @returns {*|null}\r\n       */\n      localDataUpdate: function localDataUpdate() {\n        var params = Plugin.getDataSourceParam();\n\n        if (typeof datatable.originalDataSet === 'undefined') {\n          datatable.originalDataSet = datatable.dataSet;\n        }\n\n        var field = Plugin.getObject('sort.field', params);\n        var sort = Plugin.getObject('sort.sort', params);\n        var column = Plugin.getColumnByField(field);\n\n        if (typeof column !== 'undefined' && Plugin.getOption('data.serverSorting') !== true) {\n          if (typeof column.sortCallback === 'function') {\n            datatable.dataSet = column.sortCallback(datatable.originalDataSet, sort, column);\n          } else {\n            datatable.dataSet = Plugin.sortCallback(datatable.originalDataSet, sort, column);\n          }\n        } else {\n          datatable.dataSet = datatable.originalDataSet;\n        } // if server filter enable, don't pass local filter\n\n\n        if (_typeof(params.query) === 'object' && !Plugin.getOption('data.serverFiltering')) {\n          params.query = params.query || {};\n\n          var nestedSearch = function nestedSearch(obj) {\n            for (var field in obj) {\n              if (!obj.hasOwnProperty(field)) continue;\n\n              if (typeof obj[field] === 'string') {\n                if (obj[field].toLowerCase() == search || obj[field].toLowerCase().indexOf(search) !== -1) {\n                  return true;\n                }\n              } else if (typeof obj[field] === 'number') {\n                if (obj[field] === search) {\n                  return true;\n                }\n              } else if (_typeof(obj[field]) === 'object') {\n                if (nestedSearch(obj[field])) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          };\n\n          var search = $(Plugin.getOption('search.input')).val();\n\n          if (typeof search !== 'undefined' && search !== '') {\n            search = search.toLowerCase();\n            datatable.dataSet = $.grep(datatable.dataSet, nestedSearch); // remove generalSearch as we don't need this for next columns filter\n\n            delete params.query[Plugin.getGeneralSearchKey()];\n          } // remove empty element from array\n\n\n          $.each(params.query, function (k, v) {\n            if (v === '') {\n              delete params.query[k];\n            }\n          }); // filter array by query\n\n          datatable.dataSet = Plugin.filterArray(datatable.dataSet, params.query); // reset array index\n\n          datatable.dataSet = datatable.dataSet.filter(function () {\n            return true;\n          });\n        }\n\n        return datatable.dataSet;\n      },\n\n      /**\r\n       * Utility helper to filter array by object pair of {key:value}\r\n       * @param list\r\n       * @param args\r\n       * @param operator\r\n       * @returns {*}\r\n       */\n      filterArray: function filterArray(list, args, operator) {\n        if (_typeof(list) !== 'object') {\n          return [];\n        }\n\n        if (typeof operator === 'undefined') operator = 'AND';\n\n        if (_typeof(args) !== 'object') {\n          return list;\n        }\n\n        operator = operator.toUpperCase();\n\n        if ($.inArray(operator, ['AND', 'OR', 'NOT']) === -1) {\n          return [];\n        }\n\n        var count = Object.keys(args).length;\n        var filtered = [];\n        $.each(list, function (key, obj) {\n          var to_match = obj;\n          var matched = 0;\n          $.each(args, function (m_key, m_value) {\n            m_value = m_value instanceof Array ? m_value : [m_value];\n            var match_property = Plugin.getObject(m_key, to_match);\n\n            if (typeof match_property !== 'undefined' && match_property) {\n              var lhs = match_property.toString().toLowerCase();\n              m_value.forEach(function (item, index) {\n                if (item.toString().toLowerCase() == lhs || lhs.indexOf(item.toString().toLowerCase()) !== -1) {\n                  matched++;\n                }\n              });\n            }\n          });\n\n          if ('AND' == operator && matched == count || 'OR' == operator && matched > 0 || 'NOT' == operator && 0 == matched) {\n            filtered[key] = obj;\n          }\n        });\n        list = filtered;\n        return list;\n      },\n\n      /**\r\n       * Reset lock column scroll to 0 when resize\r\n       */\n      resetScroll: function resetScroll() {\n        if (typeof options.detail === 'undefined' && Plugin.getDepth() === 1) {\n          $(datatable.table).find('.' + pfx + 'datatable-row').css('left', 0);\n          $(datatable.table).find('.' + pfx + 'datatable-lock').css('top', 0);\n          $(datatable.tableBody).scrollTop(0);\n        }\n      },\n\n      /**\r\n       * Get column options by field\r\n       * @param field\r\n       * @returns {boolean}\r\n       */\n      getColumnByField: function getColumnByField(field) {\n        if (typeof field === 'undefined') return;\n        var result;\n        $.each(options.columns, function (i, column) {\n          if (field === column.field) {\n            result = column;\n            return false;\n          }\n        });\n        return result;\n      },\n\n      /**\r\n       * Get default sort column\r\n       */\n      getDefaultSortColumn: function getDefaultSortColumn() {\n        var result;\n        $.each(options.columns, function (i, column) {\n          if (typeof column.sortable !== 'undefined' && $.inArray(column.sortable, ['asc', 'desc']) !== -1) {\n            result = {\n              sort: column.sortable,\n              field: column.field\n            };\n            return false;\n          }\n        });\n        return result;\n      },\n\n      /**\r\n       * Helper to get element dimensions, when the element is hidden\r\n       * @param element\r\n       * @param includeMargin\r\n       * @returns {{width: number, height: number, innerWidth: number,\r\n       *     innerHeight: number, outerWidth: number, outerHeight:\r\n       *     number}}\r\n       */\n      getHiddenDimensions: function getHiddenDimensions(element, includeMargin) {\n        var props = {\n          position: 'absolute',\n          visibility: 'hidden',\n          display: 'block'\n        },\n            dim = {\n          width: 0,\n          height: 0,\n          innerWidth: 0,\n          innerHeight: 0,\n          outerWidth: 0,\n          outerHeight: 0\n        },\n            hiddenParents = $(element).parents().addBack().not(':visible');\n        includeMargin = typeof includeMargin === 'boolean' ? includeMargin : false;\n        var oldProps = [];\n        hiddenParents.each(function () {\n          var old = {};\n\n          for (var name in props) {\n            old[name] = this.style[name];\n            this.style[name] = props[name];\n          }\n\n          oldProps.push(old);\n        });\n        dim.width = $(element).width();\n        dim.outerWidth = $(element).outerWidth(includeMargin);\n        dim.innerWidth = $(element).innerWidth();\n        dim.height = $(element).height();\n        dim.innerHeight = $(element).innerHeight();\n        dim.outerHeight = $(element).outerHeight(includeMargin);\n        hiddenParents.each(function (i) {\n          var old = oldProps[i];\n\n          for (var name in props) {\n            this.style[name] = old[name];\n          }\n        });\n        return dim;\n      },\n      getGeneralSearchKey: function getGeneralSearchKey() {\n        var searchInput = $(Plugin.getOption('search.input'));\n        return Plugin.getOption('search.key') || $(searchInput).prop('name');\n      },\n\n      /**\r\n       * Get value by dot notation path string and to prevent undefined\r\n       * errors\r\n       * @param path String Dot notation path in string\r\n       * @param object Object to iterate\r\n       * @returns {*}\r\n       */\n      getObject: function getObject(path, object) {\n        return path.split('.').reduce(function (obj, i) {\n          return obj !== null && typeof obj[i] !== 'undefined' ? obj[i] : null;\n        }, object);\n      },\n\n      /**\r\n       * Extend object\r\n       * @param obj\r\n       * @param path\r\n       * @param value\r\n       * @returns {*}\r\n       */\n      extendObj: function extendObj(obj, path, value) {\n        var levels = path.split('.'),\n            i = 0;\n\n        function createLevel(child) {\n          var name = levels[i++];\n\n          if (typeof child[name] !== 'undefined' && child[name] !== null) {\n            if (_typeof(child[name]) !== 'object' && typeof child[name] !== 'function') {\n              child[name] = {};\n            }\n          } else {\n            child[name] = {};\n          }\n\n          if (i === levels.length) {\n            child[name] = value;\n          } else {\n            createLevel(child[name]);\n          }\n        }\n\n        createLevel(obj);\n        return obj;\n      },\n      rowEvenOdd: function rowEvenOdd() {\n        // row even class\n        $(datatable.tableBody).find('.' + pfx + 'datatable-row').removeClass(pfx + 'datatable-row-even');\n\n        if ($(datatable.wrap).hasClass(pfx + 'datatable-subtable')) {\n          $(datatable.tableBody).find('.' + pfx + 'datatable-row:not(.' + pfx + 'datatable-row-detail):even').addClass(pfx + 'datatable-row-even');\n        } else {\n          $(datatable.tableBody).find('.' + pfx + 'datatable-row:nth-child(even)').addClass(pfx + 'datatable-row-even');\n        }\n      },\n\n      /********************\r\n       ** PUBLIC API METHODS\r\n       ********************/\n      // delay timer\n      timer: 0,\n\n      /**\r\n       * Redraw datatable by recalculating its DOM elements, etc.\r\n       * @returns {jQuery}\r\n       */\n      redraw: function redraw() {\n        Plugin.adjustCellsWidth.call();\n\n        if (Plugin.isLocked()) {\n          // fix hiding cell width issue\n          Plugin.scrollbar();\n          Plugin.resetScroll();\n          Plugin.adjustCellsHeight.call();\n        }\n\n        Plugin.adjustLockContainer.call();\n        Plugin.initHeight.call();\n        return datatable;\n      },\n\n      /**\r\n       * Shortcode to reload\r\n       * @returns {jQuery}\r\n       */\n      load: function load() {\n        Plugin.reload();\n        return datatable;\n      },\n\n      /**\r\n       * Datasource reload\r\n       * @returns {jQuery}\r\n       */\n      reload: function reload() {\n        var delay = function () {\n          return function (callback, ms) {\n            clearTimeout(Plugin.timer);\n            Plugin.timer = setTimeout(callback, ms);\n          };\n        }();\n\n        delay(function () {\n          // local only. remote pagination will skip this block\n          if (!options.data.serverFiltering) {\n            Plugin.localDataUpdate();\n          }\n\n          Plugin.dataRender();\n          $(datatable).trigger(pfx + 'datatable-on-reloaded');\n        }, Plugin.getOption('search.delay'));\n        return datatable;\n      },\n\n      /**\r\n       * Get record by record ID\r\n       * @param id\r\n       * @returns {jQuery}\r\n       */\n      getRecord: function getRecord(id) {\n        if (typeof datatable.tableBody === 'undefined') datatable.tableBody = $(datatable.table).children('tbody');\n        $(datatable.tableBody).find('.' + pfx + 'datatable-cell:first-child').each(function (i, cell) {\n          if (id == $(cell).text()) {\n            var rowNumber = $(cell).closest('.' + pfx + 'datatable-row').index() + 1;\n            datatable.API.record = datatable.API.value = Plugin.getOneRow(datatable.tableBody, rowNumber);\n            return datatable;\n          }\n        });\n        return datatable;\n      },\n\n      /**\r\n       * @deprecated in v5.0.6\r\n       * Get column of current record ID\r\n       * @param columnName\r\n       * @returns {jQuery}\r\n       */\n      getColumn: function getColumn(columnName) {\n        Plugin.setSelectedRecords();\n        datatable.API.value = $(datatable.API.record).find('[data-field=\"' + columnName + '\"]');\n        return datatable;\n      },\n\n      /**\r\n       * Destroy datatable to original DOM state before datatable was\r\n       * initialized\r\n       * @returns {jQuery}\r\n       */\n      destroy: function destroy() {\n        $(datatable).parent().find('.' + pfx + 'datatable-pager').remove();\n        var initialDatatable = $(datatable.initialDatatable).addClass(pfx + 'datatable-destroyed').show();\n        $(datatable).replaceWith(initialDatatable);\n        datatable = initialDatatable;\n        $(datatable).trigger(pfx + 'datatable-on-destroy');\n        Plugin.isInit = false; // clean up variables\n\n        initialDatatable = null;\n        datatable.dataSet = null;\n        datatable.originalDataSet = null;\n        datatable.tableHead = null;\n        datatable.tableBody = null;\n        datatable.table = null;\n        datatable.wrap = null;\n        datatable.API = {\n          record: null,\n          value: null,\n          params: null\n        };\n        Plugin.ajaxParams = {};\n        Plugin.pagingObject = {};\n        Plugin.nodeTr = [];\n        Plugin.nodeTd = [];\n        Plugin.nodeCols = [];\n        Plugin.recentNode = [];\n        return initialDatatable;\n      },\n\n      /**\r\n       * Sort by column field\r\n       * @param field\r\n       * @param sort\r\n       */\n      sort: function sort(field, _sort) {\n        // toggle sort\n        _sort = typeof _sort === 'undefined' ? 'asc' : _sort;\n        Plugin.spinnerCallback(true); // update field and sort params\n\n        var meta = {\n          field: field,\n          sort: _sort\n        };\n        Plugin.setDataSourceParam('sort', meta);\n        setTimeout(function () {\n          Plugin.dataRender('sort');\n          $(datatable).trigger(pfx + 'datatable-on-sort', meta);\n          $(datatable.tableHead).find('.' + pfx + 'datatable-cell > span > i').remove();\n        }, 300);\n        return datatable;\n      },\n\n      /**\r\n       * @deprecated in v5.0.6\r\n       * Get current selected column value\r\n       * @returns {jQuery}\r\n       */\n      getValue: function getValue() {\n        return $(datatable.API.value).text();\n      },\n\n      /**\r\n       * Set checkbox active\r\n       * @param cell JQuery selector or checkbox ID\r\n       */\n      setActive: function setActive(cell) {\n        if (typeof cell === 'string') {\n          // set by checkbox id\n          cell = $(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type=\"checkbox\"][value=\"' + cell + '\"]');\n        }\n\n        $(cell).prop('checked', true);\n        var ids = [];\n        $(cell).each(function (i, td) {\n          // normal table\n          var row = $(td).closest('tr').addClass(pfx + 'datatable-row-active');\n          var id = $(td).attr('value');\n\n          if (typeof id !== 'undefined') {\n            ids.push(id);\n          }\n        });\n        $(datatable).trigger(pfx + 'datatable-on-check', [ids]);\n      },\n\n      /**\r\n       * Set checkbox inactive\r\n       * @param cell JQuery selector or checkbox ID\r\n       */\n      setInactive: function setInactive(cell) {\n        if (typeof cell === 'string') {\n          // set by checkbox id\n          cell = $(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type=\"checkbox\"][value=\"' + cell + '\"]');\n        }\n\n        $(cell).prop('checked', false);\n        var ids = [];\n        $(cell).each(function (i, td) {\n          // normal table\n          var row = $(td).closest('tr').removeClass(pfx + 'datatable-row-active');\n          var id = $(td).attr('value');\n\n          if (typeof id !== 'undefined') {\n            ids.push(id);\n          }\n        });\n        $(datatable).trigger(pfx + 'datatable-on-uncheck', [ids]);\n      },\n\n      /**\r\n       * Set all checkboxes active or inactive\r\n       * @param active\r\n       */\n      setActiveAll: function setActiveAll(active) {\n        var checkboxes = $(datatable.table).find('> tbody, > thead').find('tr').not('.' + pfx + 'datatable-row-subtable').find('.' + pfx + 'datatable-cell-check [type=\"checkbox\"]');\n\n        if (active) {\n          Plugin.setActive(checkboxes);\n        } else {\n          Plugin.setInactive(checkboxes);\n        }\n      },\n\n      /**\r\n       * @deprecated in v5.0.6\r\n       * Get selected rows which are active\r\n       * @returns {jQuery}\r\n       */\n      setSelectedRecords: function setSelectedRecords() {\n        datatable.API.record = $(datatable.tableBody).find('.' + pfx + 'datatable-row-active');\n        return datatable;\n      },\n\n      /**\r\n       * Get selected records\r\n       * @returns {null}\r\n       */\n      getSelectedRecords: function getSelectedRecords() {\n        // support old method\n        Plugin.setSelectedRecords();\n        datatable.API.record = datatable.rows('.' + pfx + 'datatable-row-active').nodes();\n        return datatable.API.record;\n      },\n\n      /**\r\n       * Get options by dots notation path\r\n       * @param path String Dot notation path in string\r\n       * @returns {*}\r\n       */\n      getOption: function getOption(path) {\n        return Plugin.getObject(path, options);\n      },\n\n      /**\r\n       * Set global options nodes by dots notation path\r\n       * @param path\r\n       * @param object\r\n       */\n      setOption: function setOption(path, object) {\n        options = Plugin.extendObj(options, path, object);\n      },\n\n      /**\r\n       * Search filter for local & remote\r\n       * @param value\r\n       * @param columns. Optional list of columns to be filtered.\r\n       */\n      search: function search(value, columns) {\n        if (typeof columns !== 'undefined') columns = $.makeArray(columns);\n\n        var delay = function () {\n          return function (callback, ms) {\n            clearTimeout(Plugin.timer);\n            Plugin.timer = setTimeout(callback, ms);\n          };\n        }();\n\n        delay(function () {\n          // get query parameters\n          var query = Plugin.getDataSourceQuery(); // search not by columns\n\n          if (typeof columns === 'undefined' && typeof value !== 'undefined') {\n            var key = Plugin.getGeneralSearchKey();\n            query[key] = value;\n          } // search by columns, support multiple columns\n\n\n          if (_typeof(columns) === 'object') {\n            $.each(columns, function (k, column) {\n              query[column] = value;\n            }); // remove empty element from arrays\n\n            $.each(query, function (k, v) {\n              if (v === '' || $.isEmptyObject(v)) {\n                delete query[k];\n              }\n            });\n          }\n\n          Plugin.setDataSourceQuery(query); // reset pagination to 1 when doing seearching\n\n          datatable.setDataSourceParam('pagination', Object.assign({}, datatable.getDataSourceParam('pagination'), {\n            page: 1\n          })); // local filter only. remote pagination will skip this block\n\n          if (!options.data.serverFiltering) {\n            Plugin.localDataUpdate();\n          }\n\n          Plugin.dataRender('search');\n        }, Plugin.getOption('search.delay'));\n      },\n\n      /**\r\n       * Set datasource params extract\r\n       * @param param\r\n       * @param value\r\n       */\n      setDataSourceParam: function setDataSourceParam(param, value) {\n        datatable.API.params = $.extend({}, {\n          pagination: {\n            page: 1,\n            perpage: Plugin.getOption('data.pageSize')\n          },\n          sort: Plugin.getDefaultSortColumn(),\n          query: {}\n        }, datatable.API.params, Plugin.stateGet(Plugin.stateId));\n        datatable.API.params = Plugin.extendObj(datatable.API.params, param, value);\n        Plugin.stateKeep(Plugin.stateId, datatable.API.params);\n      },\n\n      /**\r\n       * Get datasource params\r\n       * @param param\r\n       */\n      getDataSourceParam: function getDataSourceParam(param) {\n        datatable.API.params = $.extend({}, {\n          pagination: {\n            page: 1,\n            perpage: Plugin.getOption('data.pageSize')\n          },\n          sort: Plugin.getDefaultSortColumn(),\n          query: {}\n        }, datatable.API.params, Plugin.stateGet(Plugin.stateId));\n\n        if (typeof param === 'string') {\n          return Plugin.getObject(param, datatable.API.params);\n        }\n\n        return datatable.API.params;\n      },\n\n      /**\r\n       * Shortcode to datatable.getDataSourceParam('query');\r\n       * @returns {*}\r\n       */\n      getDataSourceQuery: function getDataSourceQuery() {\n        return Plugin.getDataSourceParam('query') || {};\n      },\n\n      /**\r\n       * Shortcode to datatable.setDataSourceParam('query', query);\r\n       * @param query\r\n       */\n      setDataSourceQuery: function setDataSourceQuery(query) {\n        Plugin.setDataSourceParam('query', query);\n      },\n\n      /**\r\n       * Get current page number\r\n       * @returns {number}\r\n       */\n      getCurrentPage: function getCurrentPage() {\n        return $(datatable.table).siblings('.' + pfx + 'datatable-pager').last().find('.' + pfx + 'datatable-pager-nav').find('.' + pfx + 'datatable-pager-link.' + pfx + 'datatable-pager-link-active').data('page') || 1;\n      },\n\n      /**\r\n       * Get selected dropdown page size\r\n       * @returns {*|number}\r\n       */\n      getPageSize: function getPageSize() {\n        return $(datatable.table).siblings('.' + pfx + 'datatable-pager').last().find('select.' + pfx + 'datatable-pager-size').val() || 10;\n      },\n\n      /**\r\n       * Get total rows\r\n       */\n      getTotalRows: function getTotalRows() {\n        return datatable.API.params.pagination.total;\n      },\n\n      /**\r\n       * Get full dataset in grid\r\n       * @returns {*|null|Array}\r\n       */\n      getDataSet: function getDataSet() {\n        return datatable.originalDataSet;\n      },\n      nodeTr: [],\n      nodeTd: [],\n      nodeCols: [],\n      recentNode: [],\n      table: function table() {\n        if (typeof datatable.table !== 'undefined') {\n          return datatable.table;\n        }\n      },\n\n      /**\r\n       * Select a single row from the table\r\n       * @param selector\r\n       * @returns {jQuery}\r\n       */\n      row: function row(selector) {\n        Plugin.rows(selector);\n        Plugin.nodeTr = Plugin.recentNode = $(Plugin.nodeTr).first();\n        return datatable;\n      },\n\n      /**\r\n       * Select multiple rows from the table\r\n       * @param selector\r\n       * @returns {jQuery}\r\n       */\n      rows: function rows(selector) {\n        if (Plugin.isLocked()) {\n          Plugin.nodeTr = Plugin.recentNode = $(datatable.tableBody).find(selector).filter('.' + pfx + 'datatable-lock-scroll > .' + pfx + 'datatable-row');\n        } else {\n          Plugin.nodeTr = Plugin.recentNode = $(datatable.tableBody).find(selector).filter('.' + pfx + 'datatable-row');\n        }\n\n        return datatable;\n      },\n\n      /**\r\n       * Select a single column from the table\r\n       * @param index zero-based index\r\n       * @returns {jQuery}\r\n       */\n      column: function column(index) {\n        Plugin.nodeCols = Plugin.recentNode = $(datatable.tableBody).find('.' + pfx + 'datatable-cell:nth-child(' + (index + 1) + ')');\n        return datatable;\n      },\n\n      /**\r\n       * Select multiple columns from the table\r\n       * @param selector\r\n       * @returns {jQuery}\r\n       */\n      columns: function columns(selector) {\n        var context = datatable.table;\n\n        if (Plugin.nodeTr === Plugin.recentNode) {\n          context = Plugin.nodeTr;\n        }\n\n        var columns = $(context).find('.' + pfx + 'datatable-cell[data-field=\"' + selector + '\"]');\n\n        if (columns.length > 0) {\n          Plugin.nodeCols = Plugin.recentNode = columns;\n        } else {\n          Plugin.nodeCols = Plugin.recentNode = $(context).find(selector).filter('.' + pfx + 'datatable-cell');\n        }\n\n        return datatable;\n      },\n      cell: function cell(selector) {\n        Plugin.cells(selector);\n        Plugin.nodeTd = Plugin.recentNode = $(Plugin.nodeTd).first();\n        return datatable;\n      },\n      cells: function cells(selector) {\n        var cells = $(datatable.tableBody).find('.' + pfx + 'datatable-cell');\n\n        if (typeof selector !== 'undefined') {\n          cells = $(cells).filter(selector);\n        }\n\n        Plugin.nodeTd = Plugin.recentNode = cells;\n        return datatable;\n      },\n\n      /**\r\n       * Delete the selected row from the table\r\n       * @returns {jQuery}\r\n       */\n      remove: function remove() {\n        if ($(Plugin.nodeTr.length) && Plugin.nodeTr === Plugin.recentNode) {\n          $(Plugin.nodeTr).remove();\n        }\n\n        Plugin.layoutUpdate();\n        return datatable;\n      },\n\n      /**\r\n       * Show or hide the columns or rows\r\n       */\n      visible: function visible(bool) {\n        if ($(Plugin.recentNode.length)) {\n          var locked = Plugin.lockEnabledColumns();\n\n          if (Plugin.recentNode === Plugin.nodeCols) {\n            var index = Plugin.recentNode.index();\n\n            if (Plugin.isLocked()) {\n              var scrollColumns = $(Plugin.recentNode).closest('.' + pfx + 'datatable-lock-scroll').length;\n\n              if (scrollColumns) {\n                // is at center of scrollable area\n                index += locked.left.length + 1;\n              } else if ($(Plugin.recentNode).closest('.' + pfx + 'datatable-lock-right').length) {\n                // is at the right locked table\n                index += locked.left.length + scrollColumns + 1;\n              }\n            }\n          }\n\n          if (bool) {\n            if (Plugin.recentNode === Plugin.nodeCols) {\n              delete options.columns[index].visible;\n            }\n\n            $(Plugin.recentNode).show();\n          } else {\n            if (Plugin.recentNode === Plugin.nodeCols) {\n              Plugin.setOption('columns.' + index + '.visible', false);\n            }\n\n            $(Plugin.recentNode).hide();\n          }\n\n          Plugin.columnHide();\n          Plugin.redraw();\n        }\n      },\n\n      /**\r\n       * Get the the DOM element for the selected rows or columns\r\n       * @returns {Array}\r\n       */\n      nodes: function nodes() {\n        return Plugin.recentNode;\n      },\n\n      /**\r\n       * will be implemented soon\r\n       * @returns {jQuery}\r\n       */\n      dataset: function dataset() {\n        return datatable;\n      },\n\n      /**\r\n       * Open page by number\r\n       * @param page number\r\n       */\n      gotoPage: function gotoPage(page) {\n        if (typeof Plugin.pagingObject !== 'undefined') {\n          Plugin.isInit = true;\n          Plugin.pagingObject.openPage(page);\n        }\n      }\n    };\n    /**\r\n     * Public API methods can be used directly by datatable\r\n     */\n\n    $.each(Plugin, function (funcName, func) {\n      datatable[funcName] = func;\n    }); // initialize main datatable plugin\n\n    if (typeof options !== 'undefined') {\n      if (typeof options === 'string') {\n        var method = options;\n        datatable = $(this).data(pluginName);\n\n        if (typeof datatable !== 'undefined') {\n          options = datatable.options;\n          Plugin[method].apply(this, Array.prototype.slice.call(arguments, 1));\n        }\n      } else {\n        if (!datatable.data(pluginName) && !$(this).hasClass(pfx + 'datatable-loaded')) {\n          datatable.dataSet = null;\n          datatable.textAlign = {\n            left: pfx + 'datatable-cell-left',\n            center: pfx + 'datatable-cell-center',\n            right: pfx + 'datatable-cell-right'\n          }; // merge default and user defined options\n\n          options = $.extend(true, {}, $.fn[pluginName].defaults, options);\n          datatable.options = options; // init plugin process\n\n          Plugin.init.apply(this, [options]);\n          $(datatable.wrap).data(pluginName, datatable);\n        }\n      }\n    } else {\n      // get existing instance datatable\n      datatable = $(this).data(pluginName);\n\n      if (typeof datatable === 'undefined') {\n        $.error(pluginName + ' not initialized');\n      }\n\n      options = datatable.options;\n    }\n\n    return datatable;\n  }; // default options\n\n\n  $.fn[pluginName].defaults = {\n    // datasource definition\n    data: {\n      type: 'local',\n      source: null,\n      pageSize: 10,\n      // display records per page\n      saveState: true,\n      serverPaging: false,\n      serverFiltering: false,\n      serverSorting: false,\n      autoColumns: false,\n      attr: {\n        rowProps: []\n      }\n    },\n    // layout definition\n    layout: {\n      theme: 'default',\n      // datatable will support multiple themes and designs\n      \"class\": pfx + 'datatable-primary',\n      // custom wrapper class\n      scroll: false,\n      // enable/disable datatable scroll both horizontal and vertical when needed.\n      height: null,\n      // datatable's body's fixed height\n      minHeight: null,\n      footer: false,\n      // display/hide footer\n      header: true,\n      // display/hide header\n      customScrollbar: true,\n      // set false to disable custom scrollbar\n      // datatable spinner\n      spinner: {\n        overlayColor: '#000000',\n        opacity: 0,\n        type: 'loader',\n        state: 'primary',\n        message: true\n      },\n      // datatable UI icons\n      icons: {\n        sort: {\n          asc: 'flaticon2-arrow-up',\n          desc: 'flaticon2-arrow-down'\n        },\n        pagination: {\n          next: 'flaticon2-next',\n          prev: 'flaticon2-back',\n          first: 'flaticon2-fast-back',\n          last: 'flaticon2-fast-next',\n          more: 'flaticon-more-1'\n        },\n        rowDetail: {\n          expand: 'fa fa-caret-down',\n          collapse: 'fa fa-caret-right'\n        }\n      }\n    },\n    // column sorting\n    sortable: true,\n    // resize column size with mouse drag coming soon)\n    resizable: false,\n    // column based filtering (coming soon)\n    filterable: false,\n    pagination: true,\n    // inline and bactch editing (cooming soon)\n    editable: false,\n    // columns definition\n    columns: [],\n    search: {\n      // enable trigger search by keyup enter\n      onEnter: false,\n      // input text for search\n      input: null,\n      // search delay in milliseconds\n      delay: 400,\n      //\tremote server search key value\n      key: null\n    },\n    rows: {\n      // deprecated\n      callback: function callback() {},\n      // call before row template\n      beforeTemplate: function beforeTemplate() {},\n      // call after row template\n      afterTemplate: function afterTemplate() {},\n      autoHide: true\n    },\n    // toolbar\n    toolbar: {\n      // place pagination and displayInfo blocks according to the array order\n      layout: ['pagination', 'info'],\n      // toolbar placement can be at top or bottom or both top and bottom repeated\n      placement: ['bottom'],\n      //'top', 'bottom'\n      // toolbar items\n      items: {\n        // pagination\n        pagination: {\n          // pagination type(default or scroll)\n          type: 'default',\n          // number of pages to display by breakpoints\n          pages: {\n            desktop: {\n              layout: 'default',\n              pagesNumber: 5\n            },\n            tablet: {\n              layout: 'default',\n              pagesNumber: 3\n            },\n            mobile: {\n              layout: 'compact'\n            }\n          },\n          // navigation buttons\n          navigation: {\n            prev: true,\n            // display prev button\n            next: true,\n            // display next button\n            first: true,\n            // display first button\n            last: true,\n            // display last button\n            more: false // display more button\n\n          },\n          // page size select\n          pageSizeSelect: [] // display dropdown to select pagination size. -1 is used for \"ALl\" option\n\n        },\n        // records info\n        info: true\n      }\n    },\n    // here we will keep all strings and message used by datatable UI so developer can easiliy translate to any language.\n    // By default the stirngs will be in the plugin source and here can override it\n    translate: {\n      records: {\n        processing: 'Please wait...',\n        noRecords: 'No records found'\n      },\n      toolbar: {\n        pagination: {\n          items: {\n            \"default\": {\n              first: 'First',\n              prev: 'Previous',\n              next: 'Next',\n              last: 'Last',\n              more: 'More pages',\n              input: 'Page number',\n              select: 'Select page size',\n              all: 'all'\n            },\n            info: 'Showing {{start}} - {{end}} of {{total}}'\n          }\n        }\n      }\n    },\n    extensions: {}\n  };\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvY29tcG9uZW50cy9kYXRhdGFibGUvY29yZS5kYXRhdGFibGUuanM/MGVlZiJdLCJuYW1lcyI6WyIkIiwicGx1Z2luTmFtZSIsInBmeCIsInV0aWwiLCJLVFV0aWwiLCJhcHAiLCJLVEFwcCIsIkVycm9yIiwiZm4iLCJvcHRpb25zIiwibGVuZ3RoIiwiY29uc29sZSIsIndhcm4iLCJkYXRhdGFibGUiLCJkZWJ1ZyIsIkFQSSIsInJlY29yZCIsInZhbHVlIiwicGFyYW1zIiwiUGx1Z2luIiwiaXNJbml0IiwiY2VsbE9mZnNldCIsImljb25PZmZzZXQiLCJzdGF0ZUlkIiwiYWpheFBhcmFtcyIsInBhZ2luZ09iamVjdCIsImluaXQiLCJpc0h0bWxUYWJsZSIsImRhdGEiLCJzb3VyY2UiLCJleHRyYWN0VGFibGUiLCJzZXR1cEJhc2VET00iLCJjYWxsIiwic2V0dXBET00iLCJ0YWJsZSIsIm9uIiwiYWZ0ZXJSZW5kZXIiLCJzdGF0ZVJlbW92ZSIsInNldERhdGFTb3VyY2VRdWVyeSIsImdldE9wdGlvbiIsImVhY2giLCJleHROYW1lIiwiZXh0T3B0aW9ucyIsImV4dGVuZCIsInNwaW5uZXJDYWxsYmFjayIsInR5cGUiLCJzYXZlU3RhdGUiLCJkYXRhU2V0Iiwib3JpZ2luYWxEYXRhU2V0IiwiZGF0YU1hcENhbGxiYWNrIiwiZGF0YVJlbmRlciIsInRhYmxlSGVhZCIsImZpbmQiLCJyZW1vdmUiLCJ0YWJsZUZvb3QiLCJzZXRIZWFkVGl0bGUiLCJsYXlvdXQiLCJoZWFkZXIiLCJmb290ZXIiLCJzZXR1cENlbGxGaWVsZCIsInNldHVwVGVtcGxhdGVDZWxsIiwic2V0dXBTdWJEYXRhdGFibGUiLCJzZXR1cFN5c3RlbUNvbHVtbiIsInJlZHJhdyIsIndpZHRoIiwiaW5pdGlhbFdpZHRoIiwid2luZG93IiwicmVzaXplIiwiZnVsbFJlbmRlciIsImhlaWdodCIsInByZXZLZXl3b3JkIiwiZSIsIndoaWNoIiwia2V5d29yZCIsInZhbCIsInNlYXJjaCIsImNvbHVtbnMiLCJoZWFkZXJzIiwiZ2V0IiwibWFwIiwiY2VsbCIsImkiLCJmaWVsZCIsInRpdGxlIiwidGV4dCIsInRyaW0iLCJjb2x1bW4iLCJpaSIsInB1c2giLCJyb3dQcm9wIiwicHJvcCIsInRkIiwiaW5uZXJIVE1MIiwiaXNFbXB0eSIsImF0dHIiLCJyb3dQcm9wcyIsImxheW91dFVwZGF0ZSIsInNldHVwSG92ZXIiLCJkZXRhaWwiLCJnZXREZXB0aCIsImxvY2tUYWJsZSIsInJlc2V0U2Nyb2xsIiwiaXNMb2NrZWQiLCJpc1N1YnRhYmxlIiwiYXV0b0hpZGUiLCJjc3MiLCJjb2x1bW5IaWRlIiwicm93RXZlbk9kZCIsInNvcnRpbmciLCJzY3JvbGxiYXIiLCJkcm9wZG93bkZpeCIsInRyaWdnZXIiLCJ3cmFwIiwiZHJvcGRvd25NZW51IiwidGFyZ2V0IiwiYXBwZW5kIiwiZGV0YWNoIiwicG9zaXRpb24iLCJyZWxhdGVkVGFyZ2V0IiwiY2xvc2VzdCIsImhpZGUiLCJsb2NrIiwibG9ja0VuYWJsZWQiLCJsb2NrRW5hYmxlZENvbHVtbnMiLCJsZWZ0IiwicmlnaHQiLCJlbmFibGUiLCJlbmFibGVMb2NrIiwidGFibGVQYXJ0IiwibG9nIiwibG9ja0xlZnQiLCJhZGRDbGFzcyIsImxvY2tTY3JvbGwiLCJsb2NrUmlnaHQiLCJyb3dMZWZ0IiwiYXBwZW5kVG8iLCJyb3dTY3JvbGwiLCJyb3dSaWdodCIsImxvY2tlZCIsInJlYWR5IiwiZW1wdHkiLCJyZW1vdmVDbGFzcyIsImluc2VydERhdGEiLCJzY3JlZW4iLCJlbmFibGVkIiwiZ2V0QnJlYWtwb2ludCIsImFyZ3MiLCJ0YWJsZUJvZHkiLCJob3ZlclRpbWVyIiwiaXNTY3JvbGxpbmciLCJzY3JvbGwiLCJjbGVhclRpbWVvdXQiLCJvZmYiLCJzZXRUaW1lb3V0Iiwicm93IiwiaW5kZXgiLCJwYXJlbnQiLCJhZGp1c3RMb2NrQ29udGFpbmVyIiwiY29udGFpbmVyV2lkdGgiLCJNYXRoIiwiZmxvb3IiLCJkcmFnUmVzaXplIiwicHJlc3NlZCIsInN0YXJ0IiwidW5kZWZpbmVkIiwic3RhcnRYIiwic3RhcnRXaWR0aCIsIm1vdXNlZG93biIsInBhZ2VYIiwibW91c2Vtb3ZlIiwiaWZMb2NrZWQiLCJsb2NrZWRJbmRleCIsImVxIiwidHJpIiwidHIiLCJjaGlsZHJlbiIsIm1vdXNldXAiLCJkb2N1bWVudCIsImluaXRIZWlnaHQiLCJ0aGVhZEhlaWdodCIsIm91dGVySGVpZ2h0IiwidGZvb3RIZWlnaHQiLCJib2R5SGVpZ2h0IiwicGFyc2VGbG9hdCIsImluaXRpYWxEYXRhdGFibGUiLCJjbG9uZSIsInBhcmVudHMiLCJ0aGVtZSIsInNldE9wdGlvbiIsImdldFVuaXF1ZUlEIiwicHJlcGVuZFRvIiwidGFibGVQYXJ0cyIsInBhcnQiLCJ0ZGkiLCJvYmoiLCJyb3dDYWxsYmFjayIsImJlZm9yZVRlbXBsYXRlIiwiZ3JlcCIsIm4iLCJ0ZW1wbGF0ZSIsImZpbmFsVmFsdWUiLCJkYXRhUGxhY2Vob2xkZXIiLCJET01QdXJpZnkiLCJzYW5pdGl6ZSIsInNwYW4iLCJjcmVhdGVFbGVtZW50IiwiaHRtbCIsIm92ZXJmbG93IiwiYWZ0ZXJUZW1wbGF0ZSIsInNlbGVjdG9yIiwiY2hrIiwiaXMiLCJzZXRBY3RpdmUiLCJzZXRJbmFjdGl2ZSIsInN1YnRhYmxlIiwiaW5pdENoZWNrYm94Iiwic2V0QWN0aXZlQWxsIiwiZmlyc3QiLCJtYXhXaWR0aExpc3QiLCJhZGp1c3RDZWxsc1dpZHRoIiwiaW5uZXJXaWR0aCIsIm5vdCIsIm1pbldpZHRoIiwiZGF0YVdpZHRoIiwiY2VsbHMiLCJtYXgiLCJhcHBseSIsIm91dGVyV2lkdGgiLCJjZWlsIiwiYWRqdXN0Q2VsbHNIZWlnaHQiLCJ0b3RhbFJvd3MiLCJyb3dzIiwibWF4SGVpZ2h0Iiwid3JhcElubmVyIiwic2Nyb2xsYWJsZSIsInRhYmxlTG9ja2VkIiwiaW5pdFBvc2l0aW9uIiwiZ2V0Vmlld1BvcnQiLCJzY3JvbGxIZWFkIiwic2Nyb2xsRm9vdCIsImRldGVjdElFIiwiaW5pdEN1c3RvbVNjcm9sbGJhciIsImluaXREZWZhdWx0U2Nyb2xsYmFyIiwic2Nyb2xsTGVmdCIsIm9uU2Nyb2xsaW5nIiwidG9wIiwic2Nyb2xsVG9wIiwiaXNSVEwiLCJpbml0U2Nyb2xsYmFyIiwiZWxlbWVudCIsIm5vZGVOYW1lIiwicHMiLCJoYXNDbGFzcyIsInVwZGF0ZSIsIlBlcmZlY3RTY3JvbGxiYXIiLCJPYmplY3QiLCJhc3NpZ24iLCJ3aGVlbFNwZWVkIiwic3dpcGVFYXNpbmciLCJtaW5TY3JvbGxiYXJMZW5ndGgiLCJtYXhTY3JvbGxiYXJMZW5ndGgiLCJzdXBwcmVzc1Njcm9sbFgiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInRocyIsImFwcGVuZENoaWxkIiwidGgiLCJzZXRBdHRyaWJ1dGUiLCJrZXkiLCJ0ZXh0QWxpZ24iLCJhbGlnbiIsImFjdGlvbiIsInNpYmxpbmdzIiwiYnVpbGRNZXRhIiwibG9jYWxEYXRhVXBkYXRlIiwibWV0YSIsImdldERhdGFTb3VyY2VQYXJhbSIsInBlcnBhZ2UiLCJwYWdlU2l6ZSIsInRvdGFsIiwicGFnZSIsImVuZCIsIm1pbiIsInNsaWNlIiwiYWZ0ZXJHZXREYXRhIiwicmVzdWx0IiwibG9jYWxQYWdpbmdDYWxsYmFjayIsImN0eCIsInBhZ2VyIiwicGFnaW5hdGlvbiIsInNlcnZlclBhZ2luZyIsInNlcnZlck1ldGEiLCJnZXRPYmplY3QiLCJwYWdpbmciLCJzZXJ2ZXJTb3J0aW5nIiwic2VydmVyRmlsdGVyaW5nIiwic2V0QXV0b0NvbHVtbnMiLCJnZXREYXRhIiwiZG9uZSIsInBhZ2VzIiwic3R5bGUiLCJ2aXNpYmlsaXR5IiwiY29sTGVuZ3RoIiwicm93SW5kZXgiLCJuYW1lIiwiY2VsbEluZGV4IiwidGRzIiwiYSIsImNsYXNzZXMiLCJqb2luIiwiZXJyb3JTcGFuIiwicmVwbGFjZVdpdGgiLCJ1cGRhdGVUYWJsZUNvbXBvbmVudHMiLCJkYXRhVHlwZSIsIm1ldGhvZCIsInRpbWVvdXQiLCJ1cmwiLCJhamF4IiwicmVzcG9uc2UiLCJ0ZXh0U3RhdHVzIiwianFYSFIiLCJsYXN0UmVzcG9uc2UiLCJmYWlsIiwiZXJyb3JUaHJvd24iLCJhbHdheXMiLCJjYWxsYmFjayIsInBnIiwicGFnaW5hdGVFdmVudCIsInBhZ2VyTGF5b3V0IiwiaW5mbyIsInBhcnNlSW50IiwiZ2V0VGFibGVQcmVmaXgiLCJzZXREYXRhU291cmNlUGFyYW0iLCJzZXJ2ZXJDYWxsYmFjayIsImFkZFBhZ2luYXRlRXZlbnQiLCJwb3B1bGF0ZSIsInBhZ2luZ0JyZWFrcG9pbnQiLCJpY29ucyIsInBhZ2VyTnVtYmVyIiwiZ290b01vcmVQYWdlIiwicHJldiIsImlucHV0IiwiYWJzIiwicGFnZXNOdW1iZXIiLCJ4IiwicGFnZU51bWJlciIsImdvdG9QYWdlIiwibmV4dCIsImxhc3QiLCJwYWdlU2l6ZVNlbGVjdCIsInVwZGF0ZVBlcnBhZ2UiLCJwYWdlU2l6ZXMiLCJzaXplIiwiZGlzcGxheSIsInNlbGVjdHBpY2tlciIsInBhc3RlIiwidW5pcXVlIiwiaW5zZXJ0QWZ0ZXIiLCJpbnNlcnRCZWZvcmUiLCJwcmV2ZW50RGVmYXVsdCIsIm9wZW5QYWdlIiwib3JpZ2luYWxFdmVudCIsInVwZGF0ZUluZm8iLCJjdXJyZW50UGFnZSIsImdldEN1cnJlbnRQYWdlIiwicGFnZXJJbnB1dCIsInNob3ciLCJtb2RlIiwib3B0aW9uIiwiaXNJblJlc3BvbnNpdmVSYW5nZSIsInBhZ2luYXRpb25VcGRhdGUiLCJwYWdlck1vcmVQcmV2IiwicGFnZXJNb3JlTmV4dCIsInBhZ2VyRmlyc3QiLCJwYWdlclByZXYiLCJwYWdlck5leHQiLCJwYWdlckxhc3QiLCJtb3JlUHJldlBhZ2UiLCJtb3JlTmV4dFBhZ2UiLCJyZW1vdmVBdHRyIiwibmF2IiwibW9yZSIsInJlc3BvbnNpdmUiLCJ2aXNpYmxlIiwic3ViVGFibGVDYWxsYmFjayIsInRvZ2dsZVN1YlRhYmxlIiwicGFyZW50Um93Iiwic3ViVGFibGVSb3ciLCJnZXRUb3RhbENvbHVtbnMiLCJhZnRlciIsInRvZ2dsZSIsInN1YlRhYmxlIiwicHJpbWFyeUtleSIsImljb24iLCJkZXRhaWxDZWxsIiwicmF3IiwiaXNTcGlubmluZyIsImJsb2NrIiwic3Bpbm5lck9wdGlvbnMiLCJtZXNzYWdlIiwidW5ibG9jayIsInNvcnRDYWxsYmFjayIsInNvcnQiLCJmb3JtYXQiLCJiIiwiYUZpZWxkIiwiYkZpZWxkIiwibW9tZW50IiwiZGlmZiIsImlzTmFOIiwiTnVtYmVyIiwicmVwbGFjZSIsImhpZGRlbkV4aXN0IiwiaGlkRGVmYXVsdCIsInRvZ2dsZUhpZGRlbkNvbHVtbnMiLCJkZXRhaWxSb3ciLCJoaWRkZW5DZWxscyIsImNsb25lZENlbGxzIiwiZGV0YWlsUm93VGQiLCJkZXRhaWxTdWJUYWJsZSIsInJlY3Vyc2l2ZSIsIm9mZnNldFdpZHRoIiwic2Nyb2xsV2lkdGgiLCJwcmVwZW5kIiwiayIsInYiLCJmb3VuZCIsImdldEV4dHJhU3BhY2UiLCJwYWRkaW5nIiwibWFyZ2luIiwiYm9yZGVyIiwiZ2V0VGFibGVJZCIsInN1ZmZpeCIsImlkIiwic3BsaXQiLCJkZXB0aCIsInN0YXRlS2VlcCIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5Iiwic3RhdGVHZXQiLCJkZWZWYWx1ZSIsImdldEl0ZW0iLCJwYXJzZSIsInN0YXRlVXBkYXRlIiwib3JpIiwicmVtb3ZlSXRlbSIsImdldE9uZVJvdyIsInRkT25seSIsInNvcnRDb2x1bW4iLCJpbnQiLCJoSW5kZXgiLCJjb250YWluZXIiLCJ0ZGEiLCJ0ZGIiLCJzb3J0T2JqIiwic29ydGFibGUiLCJzb3J0Q2xpY2siLCJzZXRJY29uIiwiaXNFbXB0eU9iamVjdCIsImdldENvbHVtbkJ5RmllbGQiLCJxdWVyeSIsIm5lc3RlZFNlYXJjaCIsImhhc093blByb3BlcnR5IiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwiZ2V0R2VuZXJhbFNlYXJjaEtleSIsImZpbHRlckFycmF5IiwiZmlsdGVyIiwibGlzdCIsIm9wZXJhdG9yIiwidG9VcHBlckNhc2UiLCJpbkFycmF5IiwiY291bnQiLCJrZXlzIiwiZmlsdGVyZWQiLCJ0b19tYXRjaCIsIm1hdGNoZWQiLCJtX2tleSIsIm1fdmFsdWUiLCJBcnJheSIsIm1hdGNoX3Byb3BlcnR5IiwibGhzIiwidG9TdHJpbmciLCJmb3JFYWNoIiwiaXRlbSIsImdldERlZmF1bHRTb3J0Q29sdW1uIiwiZ2V0SGlkZGVuRGltZW5zaW9ucyIsImluY2x1ZGVNYXJnaW4iLCJwcm9wcyIsImRpbSIsImlubmVySGVpZ2h0IiwiaGlkZGVuUGFyZW50cyIsImFkZEJhY2siLCJvbGRQcm9wcyIsIm9sZCIsInNlYXJjaElucHV0IiwicGF0aCIsIm9iamVjdCIsInJlZHVjZSIsImV4dGVuZE9iaiIsImxldmVscyIsImNyZWF0ZUxldmVsIiwiY2hpbGQiLCJ0aW1lciIsImxvYWQiLCJyZWxvYWQiLCJkZWxheSIsIm1zIiwiZ2V0UmVjb3JkIiwicm93TnVtYmVyIiwiZ2V0Q29sdW1uIiwiY29sdW1uTmFtZSIsInNldFNlbGVjdGVkUmVjb3JkcyIsImRlc3Ryb3kiLCJub2RlVHIiLCJub2RlVGQiLCJub2RlQ29scyIsInJlY2VudE5vZGUiLCJnZXRWYWx1ZSIsImlkcyIsImFjdGl2ZSIsImNoZWNrYm94ZXMiLCJnZXRTZWxlY3RlZFJlY29yZHMiLCJub2RlcyIsIm1ha2VBcnJheSIsImdldERhdGFTb3VyY2VRdWVyeSIsInBhcmFtIiwiZ2V0UGFnZVNpemUiLCJnZXRUb3RhbFJvd3MiLCJnZXREYXRhU2V0IiwiY29udGV4dCIsImJvb2wiLCJzY3JvbGxDb2x1bW5zIiwiZGF0YXNldCIsImZ1bmNOYW1lIiwiZnVuYyIsInByb3RvdHlwZSIsImFyZ3VtZW50cyIsImNlbnRlciIsImRlZmF1bHRzIiwiZXJyb3IiLCJhdXRvQ29sdW1ucyIsIm1pbkhlaWdodCIsImN1c3RvbVNjcm9sbGJhciIsInNwaW5uZXIiLCJvdmVybGF5Q29sb3IiLCJvcGFjaXR5Iiwic3RhdGUiLCJhc2MiLCJkZXNjIiwicm93RGV0YWlsIiwiZXhwYW5kIiwiY29sbGFwc2UiLCJyZXNpemFibGUiLCJmaWx0ZXJhYmxlIiwiZWRpdGFibGUiLCJvbkVudGVyIiwidG9vbGJhciIsInBsYWNlbWVudCIsIml0ZW1zIiwiZGVza3RvcCIsInRhYmxldCIsIm1vYmlsZSIsIm5hdmlnYXRpb24iLCJ0cmFuc2xhdGUiLCJyZWNvcmRzIiwicHJvY2Vzc2luZyIsIm5vUmVjb3JkcyIsInNlbGVjdCIsImFsbCIsImV4dGVuc2lvbnMiLCJqUXVlcnkiXSwibWFwcGluZ3MiOiJBQUFhOzs7O0FBQ1osV0FBU0EsQ0FBVCxFQUFZO0FBRVosTUFBSUMsVUFBVSxHQUFHLGFBQWpCO0FBQ0EsTUFBSUMsR0FBRyxHQUFHLEVBQVY7QUFDQSxNQUFJQyxJQUFJLEdBQUdDLE1BQVg7QUFDQSxNQUFJQyxHQUFHLEdBQUdDLEtBQVY7QUFFQSxNQUFJLE9BQU9ILElBQVAsS0FBZ0IsV0FBcEIsRUFBaUMsTUFBTSxJQUFJSSxLQUFKLENBQVUsd0RBQXdETixVQUFsRSxDQUFOLENBUHJCLENBU1o7O0FBQ0FELEdBQUMsQ0FBQ1EsRUFBRixDQUFLUCxVQUFMLElBQW1CLFVBQVNRLE9BQVQsRUFBa0I7QUFDcEMsUUFBSVQsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRVSxNQUFSLEtBQW1CLENBQXZCLEVBQTBCO0FBQ3pCQyxhQUFPLENBQUNDLElBQVIsQ0FBYSxRQUFRWCxVQUFSLEdBQXFCLGlCQUFsQztBQUNBO0FBQ0EsS0FKbUMsQ0FNcEM7OztBQUNBLFFBQUlZLFNBQVMsR0FBRyxJQUFoQixDQVBvQyxDQVNwQztBQUNBO0FBQ0E7QUFDQTs7QUFDQUEsYUFBUyxDQUFDQyxLQUFWLEdBQWtCLEtBQWxCO0FBRUFELGFBQVMsQ0FBQ0UsR0FBVixHQUFnQjtBQUNmQyxZQUFNLEVBQUUsSUFETztBQUVmQyxXQUFLLEVBQUUsSUFGUTtBQUdmQyxZQUFNLEVBQUU7QUFITyxLQUFoQjtBQU1BLFFBQUlDLE1BQU0sR0FBRztBQUNaO0FBQ0g7QUFDQTtBQUNHQyxZQUFNLEVBQUUsS0FKSTtBQUtaQyxnQkFBVSxFQUFFLEdBTEE7QUFN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dGF0YWJsZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuKGZ1bmN0aW9uKCQpIHtcclxuXHJcblx0dmFyIHBsdWdpbk5hbWUgPSAnS1REYXRhdGFibGUnO1xyXG5cdHZhciBwZnggPSAnJztcclxuXHR2YXIgdXRpbCA9IEtUVXRpbDtcclxuXHR2YXIgYXBwID0gS1RBcHA7XHJcblxyXG5cdGlmICh0eXBlb2YgdXRpbCA9PT0gJ3VuZGVmaW5lZCcpIHRocm93IG5ldyBFcnJvcignVXRpbCBjbGFzcyBpcyByZXF1aXJlZCBhbmQgbXVzdCBiZSBpbmNsdWRlZCBiZWZvcmUgJyArIHBsdWdpbk5hbWUpO1xyXG5cclxuXHQvLyBwbHVnaW4gc2V0dXBcclxuXHQkLmZuW3BsdWdpbk5hbWVdID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG5cdFx0aWYgKCQodGhpcykubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdGNvbnNvbGUud2FybignTm8gJyArIHBsdWdpbk5hbWUgKyAnIGVsZW1lbnQgZXhpc3QuJyk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBnbG9iYWwgdmFyaWFibGVzXHJcblx0XHR2YXIgZGF0YXRhYmxlID0gdGhpcztcclxuXHJcblx0XHQvLyBkZWJ1ZyBlbmFibGVkP1xyXG5cdFx0Ly8gMSkgc3RhdGUgd2lsbCBiZSBjbGVhcmVkIG9uIGVhY2ggcmVmcmVzaFxyXG5cdFx0Ly8gMikgZW5hYmxlIHNvbWUgbG9nc1xyXG5cdFx0Ly8gMykgZXRjLlxyXG5cdFx0ZGF0YXRhYmxlLmRlYnVnID0gZmFsc2U7XHJcblxyXG5cdFx0ZGF0YXRhYmxlLkFQSSA9IHtcclxuXHRcdFx0cmVjb3JkOiBudWxsLFxyXG5cdFx0XHR2YWx1ZTogbnVsbCxcclxuXHRcdFx0cGFyYW1zOiBudWxsLFxyXG5cdFx0fTtcclxuXHJcblx0XHR2YXIgUGx1Z2luID0ge1xyXG5cdFx0XHQvKioqKioqKioqKioqKioqKioqKipcclxuXHRcdFx0ICoqIFBSSVZBVEUgTUVUSE9EU1xyXG5cdFx0XHQgKioqKioqKioqKioqKioqKioqKiovXHJcblx0XHRcdGlzSW5pdDogZmFsc2UsXHJcblx0XHRcdGNlbGxPZmZzZXQ6IDExMCxcclxuXHRcdFx0aWNvbk9mZnNldDogMTUsXHJcblx0XHRcdHN0YXRlSWQ6ICdtZXRhJyxcclxuXHRcdFx0YWpheFBhcmFtczoge30sXHJcblx0XHRcdHBhZ2luZ09iamVjdDoge30sXHJcblxyXG5cdFx0XHRpbml0OiBmdW5jdGlvbihvcHRpb25zKSB7XHJcblx0XHRcdFx0dmFyIGlzSHRtbFRhYmxlID0gZmFsc2U7XHJcblx0XHRcdFx0Ly8gZGF0YSBzb3VyY2Ugb3B0aW9uIGVtcHR5IGlzIG5vcm1hbCB0YWJsZVxyXG5cdFx0XHRcdGlmIChvcHRpb25zLmRhdGEuc291cmNlID09PSBudWxsKSB7XHJcblx0XHRcdFx0XHRQbHVnaW4uZXh0cmFjdFRhYmxlKCk7XHJcblx0XHRcdFx0XHRpc0h0bWxUYWJsZSA9IHRydWU7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRQbHVnaW4uc2V0dXBCYXNlRE9NLmNhbGwoKTtcclxuXHRcdFx0XHRQbHVnaW4uc2V0dXBET00oZGF0YXRhYmxlLnRhYmxlKTtcclxuXHJcblx0XHRcdFx0Ly8gb24gZXZlbnQgYWZ0ZXIgbGF5b3V0IGhhZCBkb25lIHNldHVwLCBzaG93IGRhdGF0YWJsZVxyXG5cdFx0XHRcdCQoZGF0YXRhYmxlKS5vbihwZnggKyAnZGF0YXRhYmxlLW9uLWxheW91dC11cGRhdGVkJywgUGx1Z2luLmFmdGVyUmVuZGVyKTtcclxuXHJcblx0XHRcdFx0aWYgKGRhdGF0YWJsZS5kZWJ1Zykge1xyXG5cdFx0XHRcdFx0UGx1Z2luLnN0YXRlUmVtb3ZlKFBsdWdpbi5zdGF0ZUlkKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8qdmFyIGVzID0gUGx1Z2luLnN0YXRlR2V0KFBsdWdpbi5zdGF0ZUlkKTtcclxuXHRcdFx0XHR2YXIgZXEgPSB7fTtcclxuXHRcdFx0XHRpZiAoZXMgJiYgZXMuaGFzT3duUHJvcGVydHkoJ3F1ZXJ5JykpIHtcclxuXHRcdFx0XHRcdGVxID0gZXMucXVlcnk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFBsdWdpbi5zZXREYXRhU291cmNlUXVlcnkoT2JqZWN0LmFzc2lnbih7fSwgZXEsIFBsdWdpbi5nZXRPcHRpb24oJ2RhdGEuc291cmNlLnJlYWQucGFyYW1zLnF1ZXJ5JykpKTsqL1xyXG5cclxuXHRcdFx0XHQvLyBzZXQgY3VzdG9tIHF1ZXJ5IGZyb20gb3B0aW9uc1xyXG5cdFx0XHRcdFBsdWdpbi5zZXREYXRhU291cmNlUXVlcnkoUGx1Z2luLmdldE9wdGlvbignZGF0YS5zb3VyY2UucmVhZC5wYXJhbXMucXVlcnknKSk7XHJcblxyXG5cdFx0XHRcdC8vIGluaXRpYWxpemUgZXh0ZW5zaW9uc1xyXG5cdFx0XHRcdCQuZWFjaChQbHVnaW4uZ2V0T3B0aW9uKCdleHRlbnNpb25zJyksIGZ1bmN0aW9uKGV4dE5hbWUsIGV4dE9wdGlvbnMpIHtcclxuXHRcdFx0XHRcdGlmICh0eXBlb2YgJC5mbltwbHVnaW5OYW1lXVtleHROYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xyXG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGV4dE9wdGlvbnMgIT09ICdvYmplY3QnKSB7XHJcblx0XHRcdFx0XHRcdFx0ZXh0T3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBleHRPcHRpb25zKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRuZXcgJC5mbltwbHVnaW5OYW1lXVtleHROYW1lXShkYXRhdGFibGUsIGV4dE9wdGlvbnMpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRQbHVnaW4uc3Bpbm5lckNhbGxiYWNrKHRydWUpO1xyXG5cdFx0XHRcdC8vIGdldCBkYXRhXHJcblx0XHRcdFx0aWYgKG9wdGlvbnMuZGF0YS50eXBlID09PSAncmVtb3RlJyB8fCBvcHRpb25zLmRhdGEudHlwZSA9PT0gJ2xvY2FsJykge1xyXG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMuZGF0YS5zYXZlU3RhdGUgPT09IGZhbHNlKSB7XHJcblx0XHRcdFx0XHRcdFBsdWdpbi5zdGF0ZVJlbW92ZShQbHVnaW4uc3RhdGVJZCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQvLyBnZXQgZGF0YSBmb3IgbG9jYWwgZGF0YXRhYmxlIGFuZCBsb2NhbCB0YWJsZVxyXG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMuZGF0YS50eXBlID09PSAnbG9jYWwnICYmIHR5cGVvZiBvcHRpb25zLmRhdGEuc291cmNlID09PSAnb2JqZWN0Jykge1xyXG5cdFx0XHRcdFx0XHRkYXRhdGFibGUuZGF0YVNldCA9IGRhdGF0YWJsZS5vcmlnaW5hbERhdGFTZXQgPSBQbHVnaW4uZGF0YU1hcENhbGxiYWNrKG9wdGlvbnMuZGF0YS5zb3VyY2UpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0UGx1Z2luLmRhdGFSZW5kZXIoKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIGlmIGh0bWwgdGFibGUsIHJlbW92ZSBhbmQgc2V0dXAgYSBuZXcgaGVhZGVyXHJcblx0XHRcdFx0aWYgKGlzSHRtbFRhYmxlKSB7XHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUhlYWQpLmZpbmQoJ3RyJykucmVtb3ZlKCk7XHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUZvb3QpLmZpbmQoJ3RyJykucmVtb3ZlKCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRQbHVnaW4uc2V0SGVhZFRpdGxlKCk7XHJcblx0XHRcdFx0aWYgKFBsdWdpbi5nZXRPcHRpb24oJ2xheW91dC5mb290ZXInKSkge1xyXG5cdFx0XHRcdFx0UGx1Z2luLnNldEhlYWRUaXRsZShkYXRhdGFibGUudGFibGVGb290KTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIGhpZGUgaGVhZGVyXHJcblx0XHRcdFx0aWYgKHR5cGVvZiBvcHRpb25zLmxheW91dC5oZWFkZXIgIT09ICd1bmRlZmluZWQnICYmXHJcblx0XHRcdFx0XHRvcHRpb25zLmxheW91dC5oZWFkZXIgPT09IGZhbHNlKSB7XHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZSkuZmluZCgndGhlYWQnKS5yZW1vdmUoKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIGhpZGUgZm9vdGVyXHJcblx0XHRcdFx0aWYgKHR5cGVvZiBvcHRpb25zLmxheW91dC5mb290ZXIgIT09ICd1bmRlZmluZWQnICYmXHJcblx0XHRcdFx0XHRvcHRpb25zLmxheW91dC5mb290ZXIgPT09IGZhbHNlKSB7XHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZSkuZmluZCgndGZvb3QnKS5yZW1vdmUoKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIGZvciBub3JtYWwgYW5kIGxvY2FsIGRhdGEgdHlwZSwgcnVuIGxheW91dFVwZGF0ZVxyXG5cdFx0XHRcdGlmIChvcHRpb25zLmRhdGEudHlwZSA9PT0gbnVsbCB8fFxyXG5cdFx0XHRcdFx0b3B0aW9ucy5kYXRhLnR5cGUgPT09ICdsb2NhbCcpIHtcclxuXHRcdFx0XHRcdFBsdWdpbi5zZXR1cENlbGxGaWVsZC5jYWxsKCk7XHJcblx0XHRcdFx0XHRQbHVnaW4uc2V0dXBUZW1wbGF0ZUNlbGwuY2FsbCgpO1xyXG5cclxuXHRcdFx0XHRcdC8vIHNldHVwIG5lc3RlZCBkYXRhdGFibGUsIGlmIG9wdGlvbiBlbmFibGVkXHJcblx0XHRcdFx0XHRQbHVnaW4uc2V0dXBTdWJEYXRhdGFibGUuY2FsbCgpO1xyXG5cclxuXHRcdFx0XHRcdC8vIHNldHVwIGV4dHJhIHN5c3RlbSBjb2x1bW4gcHJvcGVydGllc1xyXG5cdFx0XHRcdFx0UGx1Z2luLnNldHVwU3lzdGVtQ29sdW1uLmNhbGwoKTtcclxuXHRcdFx0XHRcdFBsdWdpbi5yZWRyYXcoKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHZhciB3aWR0aDtcclxuXHRcdFx0XHR2YXIgaW5pdGlhbFdpZHRoID0gZmFsc2U7XHJcblx0XHRcdFx0JCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdC8vIGlzc3VlOiBVUkwgQmFyIFJlc2l6aW5nIG9uIG1vYmlsZSwgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL3VwZGF0ZXMvMjAxNi8xMi91cmwtYmFyLXJlc2l6aW5nXHJcblx0XHRcdFx0XHQvLyB0cmlnZ2VyIGRhdGF0YWJsZSByZXNpemUgb24gd2lkdGggY2hhbmdlIG9ubHlcclxuXHRcdFx0XHRcdGlmICgkKHRoaXMpLndpZHRoKCkgIT09IHdpZHRoKSB7XHJcblx0XHRcdFx0XHRcdHdpZHRoID0gJCh0aGlzKS53aWR0aCgpO1xyXG5cdFx0XHRcdFx0XHRQbHVnaW4uZnVsbFJlbmRlcigpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0Ly8gZ2V0IGluaXRpYWwgd2lkdGhcclxuXHRcdFx0XHRcdGlmICghaW5pdGlhbFdpZHRoKSB7XHJcblx0XHRcdFx0XHRcdHdpZHRoID0gJCh0aGlzKS53aWR0aCgpO1xyXG5cdFx0XHRcdFx0XHRpbml0aWFsV2lkdGggPSB0cnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHQkKGRhdGF0YWJsZSkuaGVpZ2h0KCcnKTtcclxuXHJcblx0XHRcdFx0dmFyIHByZXZLZXl3b3JkID0gJyc7XHJcblx0XHRcdFx0JChQbHVnaW4uZ2V0T3B0aW9uKCdzZWFyY2guaW5wdXQnKSkub24oJ2tleXVwJywgZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdFx0aWYgKFBsdWdpbi5nZXRPcHRpb24oJ3NlYXJjaC5vbkVudGVyJykgJiYgZS53aGljaCAhPT0gMTMpIHJldHVybjtcclxuXHRcdFx0XHRcdHZhciBrZXl3b3JkID0gJCh0aGlzKS52YWwoKTtcclxuXHRcdFx0XHRcdC8vIHByZXZlbnQgbXVsdGlwbGUgc2VhcmNoIHJlcXVlc3Qgb24gZXZlcnkgYnV0dG9uIGtleXVwXHJcblx0XHRcdFx0XHRpZiAocHJldktleXdvcmQgIT09IGtleXdvcmQpIHtcclxuXHRcdFx0XHRcdFx0UGx1Z2luLnNlYXJjaChrZXl3b3JkKTtcclxuXHRcdFx0XHRcdFx0cHJldktleXdvcmQgPSBrZXl3b3JkO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gZGF0YXRhYmxlO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEV4dHJhY3Qgc3RhdGljIEhUTUwgdGFibGUgY29udGVudCBpbnRvIGRhdGFzb3VyY2VcclxuXHRcdFx0ICovXHJcblx0XHRcdGV4dHJhY3RUYWJsZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIGNvbHVtbnMgPSBbXTtcclxuXHRcdFx0XHR2YXIgaGVhZGVycyA9ICQoZGF0YXRhYmxlKS5maW5kKCd0cjpmaXJzdC1jaGlsZCB0aCcpLmdldCgpLm1hcChmdW5jdGlvbihjZWxsLCBpKSB7XHJcblx0XHRcdFx0XHR2YXIgZmllbGQgPSAkKGNlbGwpLmRhdGEoJ2ZpZWxkJyk7XHJcblx0XHRcdFx0XHR2YXIgdGl0bGUgPSAkKGNlbGwpLmRhdGEoJ3RpdGxlJyk7XHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIGZpZWxkID09PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHRmaWVsZCA9ICQoY2VsbCkudGV4dCgpLnRyaW0oKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmICh0eXBlb2YgdGl0bGUgPT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdHRpdGxlID0gJChjZWxsKS50ZXh0KCkudHJpbSgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0dmFyIGNvbHVtbiA9IHtmaWVsZDogZmllbGQsIHRpdGxlOiB0aXRsZX07XHJcblx0XHRcdFx0XHRmb3IgKHZhciBpaSBpbiBvcHRpb25zLmNvbHVtbnMpIHtcclxuXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMuY29sdW1uc1tpaV0uZmllbGQgPT09IGZpZWxkKSB7XHJcblx0XHRcdFx0XHRcdFx0Y29sdW1uID0gJC5leHRlbmQodHJ1ZSwge30sIG9wdGlvbnMuY29sdW1uc1tpaV0sIGNvbHVtbik7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGNvbHVtbnMucHVzaChjb2x1bW4pO1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZpZWxkO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdC8vIGF1dG8gY3JlYXRlIGNvbHVtbnMgY29uZmlnXHJcblx0XHRcdFx0b3B0aW9ucy5jb2x1bW5zID0gY29sdW1ucztcclxuXHJcblx0XHRcdFx0dmFyIHJvd1Byb3AgPSBbXTtcclxuXHRcdFx0XHR2YXIgc291cmNlID0gW107XHJcblxyXG5cdFx0XHRcdCQoZGF0YXRhYmxlKS5maW5kKCd0cicpLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRpZiAoJCh0aGlzKS5maW5kKCd0ZCcpLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0XHRyb3dQcm9wLnB1c2goJCh0aGlzKS5wcm9wKCdhdHRyaWJ1dGVzJykpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0dmFyIHRkID0ge307XHJcblx0XHRcdFx0XHQkKHRoaXMpLmZpbmQoJ3RkJykuZWFjaChmdW5jdGlvbihpLCBjZWxsKSB7XHJcblx0XHRcdFx0XHRcdHRkW2hlYWRlcnNbaV1dID0gY2VsbC5pbm5lckhUTUwudHJpbSgpO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRpZiAoIXV0aWwuaXNFbXB0eSh0ZCkpIHtcclxuXHRcdFx0XHRcdFx0c291cmNlLnB1c2godGQpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRvcHRpb25zLmRhdGEuYXR0ci5yb3dQcm9wcyA9IHJvd1Byb3A7XHJcblx0XHRcdFx0b3B0aW9ucy5kYXRhLnNvdXJjZSA9IHNvdXJjZTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBPbmUgdGltZSBsYXlvdXQgdXBkYXRlIG9uIGluaXRcclxuXHRcdFx0ICovXHJcblx0XHRcdGxheW91dFVwZGF0ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0Ly8gc2V0dXAgbmVzdGVkIGRhdGF0YWJsZSwgaWYgb3B0aW9uIGVuYWJsZWRcclxuXHRcdFx0XHRQbHVnaW4uc2V0dXBTdWJEYXRhdGFibGUuY2FsbCgpO1xyXG5cclxuXHRcdFx0XHQvLyBzZXR1cCBleHRyYSBzeXN0ZW0gY29sdW1uIHByb3BlcnRpZXNcclxuXHRcdFx0XHRQbHVnaW4uc2V0dXBTeXN0ZW1Db2x1bW4uY2FsbCgpO1xyXG5cclxuXHRcdFx0XHQvLyBzZXR1cCBjZWxsIGhvdmVyIGV2ZW50XHJcblx0XHRcdFx0UGx1Z2luLnNldHVwSG92ZXIuY2FsbCgpO1xyXG5cclxuXHRcdFx0XHRpZiAodHlwZW9mIG9wdGlvbnMuZGV0YWlsID09PSAndW5kZWZpbmVkJ1xyXG5cdFx0XHRcdFx0Ly8gdGVtcG9yYXJ5IGRpc2FibGUgbG9jayBjb2x1bW4gaW4gc3VidGFibGVcclxuXHRcdFx0XHRcdCYmIFBsdWdpbi5nZXREZXB0aCgpID09PSAxKSB7XHJcblx0XHRcdFx0XHQvLyBsb2NrIGNvbHVtbnMgaGFuZGxlclxyXG5cdFx0XHRcdFx0UGx1Z2luLmxvY2tUYWJsZS5jYWxsKCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRQbHVnaW4ucmVzZXRTY3JvbGwoKTtcclxuXHJcblx0XHRcdFx0Ly8gY2hlY2sgaWYgbm90IGlzIGEgbG9ja2VkIGNvbHVtblxyXG5cdFx0XHRcdGlmICghUGx1Z2luLmlzTG9ja2VkKCkpIHtcclxuXHRcdFx0XHRcdFBsdWdpbi5yZWRyYXcuY2FsbCgpO1xyXG5cdFx0XHRcdFx0Ly8gY2hlY2sgaWYgaXRzIG5vdCBhIHN1YnRhYmxlIGFuZCBoYXMgYXV0b0hpZGUgb3B0aW9uIGVuYWJsZWRcclxuXHRcdFx0XHRcdGlmICghUGx1Z2luLmlzU3VidGFibGUoKSAmJiBQbHVnaW4uZ2V0T3B0aW9uKCdyb3dzLmF1dG9IaWRlJykgPT09IHRydWUpIHtcclxuXHRcdFx0XHRcdFx0UGx1Z2luLmF1dG9IaWRlKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQvLyByZXNldCByb3dcclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93JykuY3NzKCdoZWlnaHQnLCAnJyk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRQbHVnaW4uY29sdW1uSGlkZS5jYWxsKCk7XHJcblxyXG5cdFx0XHRcdFBsdWdpbi5yb3dFdmVuT2RkLmNhbGwoKTtcclxuXHJcblx0XHRcdFx0UGx1Z2luLnNvcnRpbmcuY2FsbCgpO1xyXG5cclxuXHRcdFx0XHRQbHVnaW4uc2Nyb2xsYmFyLmNhbGwoKTtcclxuXHJcblx0XHRcdFx0aWYgKCFQbHVnaW4uaXNJbml0KSB7XHJcblx0XHRcdFx0XHQvLyBydW4gb25jZSBkcm9wZG93biBpbnNpZGUgZGF0YXRhYmxlXHJcblx0XHRcdFx0XHRQbHVnaW4uZHJvcGRvd25GaXgoKTtcclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlKS50cmlnZ2VyKHBmeCArICdkYXRhdGFibGUtb24taW5pdCcsIHt0YWJsZTogJChkYXRhdGFibGUud3JhcCkuYXR0cignaWQnKSwgb3B0aW9uczogb3B0aW9uc30pO1xyXG5cdFx0XHRcdFx0UGx1Z2luLmlzSW5pdCA9IHRydWU7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQkKGRhdGF0YWJsZSkudHJpZ2dlcihwZnggKyAnZGF0YXRhYmxlLW9uLWxheW91dC11cGRhdGVkJywge3RhYmxlOiAkKGRhdGF0YWJsZS53cmFwKS5hdHRyKCdpZCcpfSk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRkcm9wZG93bkZpeDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIGRyb3Bkb3duTWVudTtcclxuXHRcdFx0XHQkKCdib2R5Jykub24oJ3Nob3cuYnMuZHJvcGRvd24nLCAnLicgKyBwZnggKyAnZGF0YXRhYmxlIC4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1ib2R5JywgZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdFx0ZHJvcGRvd25NZW51ID0gJChlLnRhcmdldCkuZmluZCgnLmRyb3Bkb3duLW1lbnUnKTtcclxuXHRcdFx0XHRcdCQoJ2JvZHknKS5hcHBlbmQoZHJvcGRvd25NZW51LmRldGFjaCgpKTtcclxuXHRcdFx0XHRcdGRyb3Bkb3duTWVudS5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKTtcclxuXHRcdFx0XHRcdGRyb3Bkb3duTWVudS5wb3NpdGlvbih7XHJcblx0XHRcdFx0XHRcdCdteSc6ICdyaWdodCB0b3AnLFxyXG5cdFx0XHRcdFx0XHQnYXQnOiAncmlnaHQgYm90dG9tJyxcclxuXHRcdFx0XHRcdFx0J29mJzogJChlLnJlbGF0ZWRUYXJnZXQpLFxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHQvLyBpZiBkYXRhdGFibGUgaXMgaW5zaWRlIG1vZGFsXHJcblx0XHRcdFx0XHRpZiAoZGF0YXRhYmxlLmNsb3Nlc3QoJy5tb2RhbCcpLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0XHQvLyBpbmNyZWFzZSBkcm9wZG93biB6LWluZGV4XHJcblx0XHRcdFx0XHRcdGRyb3Bkb3duTWVudS5jc3MoJ3otaW5kZXgnLCAnMjAwMCcpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pLm9uKCdoaWRlLmJzLmRyb3Bkb3duJywgJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZSAuJyArIHBmeCArICdkYXRhdGFibGUtYm9keScsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdCQoZS50YXJnZXQpLmFwcGVuZChkcm9wZG93bk1lbnUuZGV0YWNoKCkpO1xyXG5cdFx0XHRcdFx0ZHJvcGRvd25NZW51LmhpZGUoKTtcclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0Ly8gcmVtb3ZlIGRyb3Bkb3duIGlmIHdpbmRvdyByZXNpemVcclxuXHRcdFx0XHQkKHdpbmRvdykub24oJ3Jlc2l6ZScsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdGlmICh0eXBlb2YgZHJvcGRvd25NZW51ICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHRkcm9wZG93bk1lbnUuaGlkZSgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0bG9ja1RhYmxlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgbG9jayA9IHtcclxuXHRcdFx0XHRcdGxvY2tFbmFibGVkOiBmYWxzZSxcclxuXHRcdFx0XHRcdGluaXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHQvLyBjaGVjayBpZiB0YWJsZSBzaG91bGQgYmUgbG9ja2VkIGNvbHVtbnNcclxuXHRcdFx0XHRcdFx0bG9jay5sb2NrRW5hYmxlZCA9IFBsdWdpbi5sb2NrRW5hYmxlZENvbHVtbnMoKTtcclxuXHRcdFx0XHRcdFx0aWYgKGxvY2subG9ja0VuYWJsZWQubGVmdC5sZW5ndGggPT09IDAgJiZcclxuXHRcdFx0XHRcdFx0XHRsb2NrLmxvY2tFbmFibGVkLnJpZ2h0Lmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRsb2NrLmVuYWJsZSgpO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdGVuYWJsZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdHZhciBlbmFibGVMb2NrID0gZnVuY3Rpb24odGFibGVQYXJ0KSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gY2hlY2sgaWYgYWxyZWFkeSBoYXMgbG9jayBjb2x1bW5cclxuXHRcdFx0XHRcdFx0XHRpZiAoJCh0YWJsZVBhcnQpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1sb2NrJykubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0UGx1Z2luLmxvZygnTG9ja2VkIGNvbnRhaW5lciBhbHJlYWR5IGV4aXN0IGluOiAnLCB0YWJsZVBhcnQpO1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHQvLyBjaGVjayBpZiBubyByb3dzIGV4aXN0c1xyXG5cdFx0XHRcdFx0XHRcdGlmICgkKHRhYmxlUGFydCkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0UGx1Z2luLmxvZygnTm8gcm93IGV4aXN0IGluOiAnLCB0YWJsZVBhcnQpO1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gbG9ja2VkIGRpdiBjb250YWluZXJcclxuXHRcdFx0XHRcdFx0XHR2YXIgbG9ja0xlZnQgPSAkKCc8ZGl2Lz4nKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLWxvY2sgJyArIHBmeCArICdkYXRhdGFibGUtbG9jay1sZWZ0Jyk7XHJcblx0XHRcdFx0XHRcdFx0dmFyIGxvY2tTY3JvbGwgPSAkKCc8ZGl2Lz4nKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLWxvY2sgJyArIHBmeCArICdkYXRhdGFibGUtbG9jay1zY3JvbGwnKTtcclxuXHRcdFx0XHRcdFx0XHR2YXIgbG9ja1JpZ2h0ID0gJCgnPGRpdi8+JykuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1sb2NrICcgKyBwZnggKyAnZGF0YXRhYmxlLWxvY2stcmlnaHQnKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0JCh0YWJsZVBhcnQpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gY3JlYXRlIG5ldyByb3cgZm9yIGxvY2sgY29sdW1ucyBhbmQgcGFzcyB0aGUgZGF0YVxyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJvd0xlZnQgPSAkKCc8dHIvPicpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcm93JykuZGF0YSgnb2JqJywgJCh0aGlzKS5kYXRhKCdvYmonKSkuYXBwZW5kVG8obG9ja0xlZnQpO1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJvd1Njcm9sbCA9ICQoJzx0ci8+JykuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKS5kYXRhKCdvYmonLCAkKHRoaXMpLmRhdGEoJ29iaicpKS5hcHBlbmRUbyhsb2NrU2Nyb2xsKTtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciByb3dSaWdodCA9ICQoJzx0ci8+JykuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKS5kYXRhKCdvYmonLCAkKHRoaXMpLmRhdGEoJ29iaicpKS5hcHBlbmRUbyhsb2NrUmlnaHQpO1xyXG5cdFx0XHRcdFx0XHRcdFx0JCh0aGlzKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtY2VsbCcpLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHZhciBsb2NrZWQgPSAkKHRoaXMpLmRhdGEoJ2xvY2tlZCcpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIGxvY2tlZCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIGxvY2tlZC5sZWZ0ICE9PSAndW5kZWZpbmVkJyB8fCBsb2NrZWQgPT09IHRydWUpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGRlZmF1bHQgbG9ja2VkIHRvIGxlZnRcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCQodGhpcykuYXBwZW5kVG8ocm93TGVmdCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgbG9ja2VkLnJpZ2h0ICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0JCh0aGlzKS5hcHBlbmRUbyhyb3dSaWdodCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCQodGhpcykuYXBwZW5kVG8ocm93U2Nyb2xsKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyByZW1vdmUgb2xkIHJvd1xyXG5cdFx0XHRcdFx0XHRcdFx0JCh0aGlzKS5yZW1vdmUoKTtcclxuXHRcdFx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKGxvY2subG9ja0VuYWJsZWQubGVmdC5sZW5ndGggPiAwKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQkKGRhdGF0YWJsZS53cmFwKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLWxvY2snKTtcclxuXHRcdFx0XHRcdFx0XHRcdCQobG9ja0xlZnQpLmFwcGVuZFRvKHRhYmxlUGFydCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdGlmIChsb2NrLmxvY2tFbmFibGVkLmxlZnQubGVuZ3RoID4gMCB8fCBsb2NrLmxvY2tFbmFibGVkLnJpZ2h0Lmxlbmd0aCA+IDApIHtcclxuXHRcdFx0XHRcdFx0XHRcdCQobG9ja1Njcm9sbCkuYXBwZW5kVG8odGFibGVQYXJ0KTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0aWYgKGxvY2subG9ja0VuYWJsZWQucmlnaHQubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0JChkYXRhdGFibGUud3JhcCkuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1sb2NrJyk7XHJcblx0XHRcdFx0XHRcdFx0XHQkKGxvY2tSaWdodCkuYXBwZW5kVG8odGFibGVQYXJ0KTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZSkuZmluZCgndGhlYWQsdGJvZHksdGZvb3QnKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdHZhciB0YWJsZVBhcnQgPSB0aGlzO1xyXG5cdFx0XHRcdFx0XHRcdGlmICgkKHRoaXMpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1sb2NrJykubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQkKHRoaXMpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRlbmFibGVMb2NrKHRhYmxlUGFydCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRcdGxvY2suaW5pdCgpO1xyXG5cdFx0XHRcdHJldHVybiBsb2NrO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFJlbmRlciBldmVyeXRoaW5nIGZvciByZXNpemVcclxuXHRcdFx0ICovXHJcblx0XHRcdGZ1bGxSZW5kZXI6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlSGVhZCkuZW1wdHkoKTtcclxuXHRcdFx0XHRQbHVnaW4uc2V0SGVhZFRpdGxlKCk7XHJcblx0XHRcdFx0aWYgKFBsdWdpbi5nZXRPcHRpb24oJ2xheW91dC5mb290ZXInKSkge1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGVGb290KS5lbXB0eSgpO1xyXG5cdFx0XHRcdFx0UGx1Z2luLnNldEhlYWRUaXRsZShkYXRhdGFibGUudGFibGVGb290KTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFBsdWdpbi5zcGlubmVyQ2FsbGJhY2sodHJ1ZSk7XHJcblx0XHRcdFx0JChkYXRhdGFibGUud3JhcCkucmVtb3ZlQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1sb2FkZWQnKTtcclxuXHJcblx0XHRcdFx0UGx1Z2luLmluc2VydERhdGEoKTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdGxvY2tFbmFibGVkQ29sdW1uczogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIHNjcmVlbiA9ICQod2luZG93KS53aWR0aCgpO1xyXG5cdFx0XHRcdHZhciBjb2x1bW5zID0gb3B0aW9ucy5jb2x1bW5zO1xyXG5cdFx0XHRcdHZhciBlbmFibGVkID0ge2xlZnQ6IFtdLCByaWdodDogW119O1xyXG5cdFx0XHRcdCQuZWFjaChjb2x1bW5zLCBmdW5jdGlvbihpLCBjb2x1bW4pIHtcclxuXHRcdFx0XHRcdGlmICh0eXBlb2YgY29sdW1uLmxvY2tlZCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW4ubG9ja2VkLmxlZnQgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKHV0aWwuZ2V0QnJlYWtwb2ludChjb2x1bW4ubG9ja2VkLmxlZnQpIDw9IHNjcmVlbikge1xyXG5cdFx0XHRcdFx0XHRcdFx0ZW5hYmxlZFsnbGVmdCddLnB1c2goY29sdW1uLmxvY2tlZC5sZWZ0KTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW4ubG9ja2VkLnJpZ2h0ICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHRcdGlmICh1dGlsLmdldEJyZWFrcG9pbnQoY29sdW1uLmxvY2tlZC5yaWdodCkgPD0gc2NyZWVuKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRlbmFibGVkWydyaWdodCddLnB1c2goY29sdW1uLmxvY2tlZC5yaWdodCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0cmV0dXJuIGVuYWJsZWQ7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogQWZ0ZXIgcmVuZGVyIGV2ZW50LCBjYWxsZWQgYnkgXCJkYXRhdGFibGUtb24tbGF5b3V0LXVwZGF0ZWRcIlxyXG5cdFx0XHQgKiBAcGFyYW0gZVxyXG5cdFx0XHQgKiBAcGFyYW0gYXJnc1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0YWZ0ZXJSZW5kZXI6IGZ1bmN0aW9uKGUsIGFyZ3MpIHtcclxuXHRcdFx0XHQkKGRhdGF0YWJsZSkucmVhZHkoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHQvLyByZWRyYXcgbG9ja2VkIGNvbHVtbnMgdGFibGVcclxuXHRcdFx0XHRcdGlmIChQbHVnaW4uaXNMb2NrZWQoKSkge1xyXG5cdFx0XHRcdFx0XHRQbHVnaW4ucmVkcmF3KCk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGVCb2R5KS5jc3MoJ3Zpc2liaWxpdHknLCAnJyk7XHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZS53cmFwKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLWxvYWRlZCcpO1xyXG5cclxuXHRcdFx0XHRcdFBsdWdpbi5zcGlubmVyQ2FsbGJhY2soZmFsc2UpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0aG92ZXJUaW1lcjogMCxcclxuXHRcdFx0aXNTY3JvbGxpbmc6IGZhbHNlLFxyXG5cdFx0XHRzZXR1cEhvdmVyOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHQkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdC8vIHN0b3AgaG92ZXIgd2hlbiBzY3JvbGxpbmdcclxuXHRcdFx0XHRcdGNsZWFyVGltZW91dChQbHVnaW4uaG92ZXJUaW1lcik7XHJcblx0XHRcdFx0XHRQbHVnaW4uaXNTY3JvbGxpbmcgPSB0cnVlO1xyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUJvZHkpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsJykub2ZmKCdtb3VzZWVudGVyJywgJ21vdXNlbGVhdmUnKS5vbignbW91c2VlbnRlcicsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0Ly8gcmVzZXQgc2Nyb2xsIHRpbWVyIHRvIGhvdmVyIGNsYXNzXHJcblx0XHRcdFx0XHRQbHVnaW4uaG92ZXJUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFBsdWdpbi5pc1Njcm9sbGluZyA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0fSwgMjAwKTtcclxuXHRcdFx0XHRcdGlmIChQbHVnaW4uaXNTY3JvbGxpbmcpIHJldHVybjtcclxuXHJcblx0XHRcdFx0XHQvLyBub3JtYWwgdGFibGVcclxuXHRcdFx0XHRcdHZhciByb3cgPSAkKHRoaXMpLmNsb3Nlc3QoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXJvdy1ob3ZlcicpO1xyXG5cdFx0XHRcdFx0dmFyIGluZGV4ID0gJChyb3cpLmluZGV4KCkgKyAxO1xyXG5cclxuXHRcdFx0XHRcdC8vIGxvY2sgdGFibGVcclxuXHRcdFx0XHRcdCQocm93KS5jbG9zZXN0KCcuJyArIHBmeCArICdkYXRhdGFibGUtbG9jaycpLnBhcmVudCgpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3c6bnRoLWNoaWxkKCcgKyBpbmRleCArICcpJykuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1yb3ctaG92ZXInKTtcclxuXHRcdFx0XHR9KS5vbignbW91c2VsZWF2ZScsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0Ly8gbm9ybWFsIHRhYmxlXHJcblx0XHRcdFx0XHR2YXIgcm93ID0gJCh0aGlzKS5jbG9zZXN0KCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93JykucmVtb3ZlQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1yb3ctaG92ZXInKTtcclxuXHRcdFx0XHRcdHZhciBpbmRleCA9ICQocm93KS5pbmRleCgpICsgMTtcclxuXHJcblx0XHRcdFx0XHQvLyBsb29rIHRhYmxlXHJcblx0XHRcdFx0XHQkKHJvdykuY2xvc2VzdCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWxvY2snKS5wYXJlbnQoKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93Om50aC1jaGlsZCgnICsgaW5kZXggKyAnKScpLnJlbW92ZUNsYXNzKHBmeCArICdkYXRhdGFibGUtcm93LWhvdmVyJyk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogQWRqdXN0IHdpZHRoIG9mIGxvY2tlZCB0YWJsZSBjb250YWluZXJzIGJ5IHJlc2l6ZSBoYW5kbGVyXHJcblx0XHRcdCAqIEByZXR1cm5zIHtudW1iZXJ9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRhZGp1c3RMb2NrQ29udGFpbmVyOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoIVBsdWdpbi5pc0xvY2tlZCgpKSByZXR1cm4gMDtcclxuXHJcblx0XHRcdFx0Ly8gcmVmZXIgdG8gaGVhZCBkaW1lbnNpb25cclxuXHRcdFx0XHR2YXIgY29udGFpbmVyV2lkdGggPSAkKGRhdGF0YWJsZS50YWJsZUhlYWQpLndpZHRoKCk7XHJcblx0XHRcdFx0dmFyIGxvY2tMZWZ0ID0gJChkYXRhdGFibGUudGFibGVIZWFkKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtbG9jay1sZWZ0Jykud2lkdGgoKTtcclxuXHRcdFx0XHR2YXIgbG9ja1JpZ2h0ID0gJChkYXRhdGFibGUudGFibGVIZWFkKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtbG9jay1yaWdodCcpLndpZHRoKCk7XHJcblxyXG5cdFx0XHRcdGlmICh0eXBlb2YgbG9ja0xlZnQgPT09ICd1bmRlZmluZWQnKSBsb2NrTGVmdCA9IDA7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBsb2NrUmlnaHQgPT09ICd1bmRlZmluZWQnKSBsb2NrUmlnaHQgPSAwO1xyXG5cclxuXHRcdFx0XHR2YXIgbG9ja1Njcm9sbCA9IE1hdGguZmxvb3IoY29udGFpbmVyV2lkdGggLSBsb2NrTGVmdCAtIGxvY2tSaWdodCk7XHJcblx0XHRcdFx0JChkYXRhdGFibGUudGFibGUpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1sb2NrLXNjcm9sbCcpLmNzcygnd2lkdGgnLCBsb2NrU2Nyb2xsKTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIGxvY2tTY3JvbGw7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogdG9kbzsgbm90IGluIHVzZVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0ZHJhZ1Jlc2l6ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIHByZXNzZWQgPSBmYWxzZTtcclxuXHRcdFx0XHR2YXIgc3RhcnQgPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0dmFyIHN0YXJ0WCwgc3RhcnRXaWR0aDtcclxuXHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUhlYWQpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsJykubW91c2Vkb3duKGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdHN0YXJ0ID0gJCh0aGlzKTtcclxuXHRcdFx0XHRcdHByZXNzZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0c3RhcnRYID0gZS5wYWdlWDtcclxuXHRcdFx0XHRcdHN0YXJ0V2lkdGggPSAkKHRoaXMpLndpZHRoKCk7XHJcblx0XHRcdFx0XHQkKHN0YXJ0KS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLWNlbGwtcmVzaXppbmcnKTtcclxuXHJcblx0XHRcdFx0fSkubW91c2Vtb3ZlKGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdGlmIChwcmVzc2VkKSB7XHJcblx0XHRcdFx0XHRcdHZhciBpID0gJChzdGFydCkuaW5kZXgoKTtcclxuXHRcdFx0XHRcdFx0dmFyIHRhYmxlQm9keSA9ICQoZGF0YXRhYmxlLnRhYmxlQm9keSk7XHJcblx0XHRcdFx0XHRcdHZhciBpZkxvY2tlZCA9ICQoc3RhcnQpLmNsb3Nlc3QoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1sb2NrJyk7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoaWZMb2NrZWQpIHtcclxuXHRcdFx0XHRcdFx0XHR2YXIgbG9ja2VkSW5kZXggPSAkKGlmTG9ja2VkKS5pbmRleCgpO1xyXG5cdFx0XHRcdFx0XHRcdHRhYmxlQm9keSA9ICQoZGF0YXRhYmxlLnRhYmxlQm9keSkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWxvY2snKS5lcShsb2NrZWRJbmRleCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdCQodGFibGVCb2R5KS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93JykuZWFjaChmdW5jdGlvbih0cmksIHRyKSB7XHJcblx0XHRcdFx0XHRcdFx0JCh0cikuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWNlbGwnKS5lcShpKS53aWR0aChzdGFydFdpZHRoICsgKGUucGFnZVggLSBzdGFydFgpKS5jaGlsZHJlbigpLndpZHRoKHN0YXJ0V2lkdGggKyAoZS5wYWdlWCAtIHN0YXJ0WCkpO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0XHRcdCQoc3RhcnQpLmNoaWxkcmVuKCkuY3NzKCd3aWR0aCcsIHN0YXJ0V2lkdGggKyAoZS5wYWdlWCAtIHN0YXJ0WCkpO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9KS5tb3VzZXVwKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0JChzdGFydCkucmVtb3ZlQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1jZWxsLXJlc2l6aW5nJyk7XHJcblx0XHRcdFx0XHRwcmVzc2VkID0gZmFsc2U7XHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdCQoZG9jdW1lbnQpLm1vdXNldXAoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHQkKHN0YXJ0KS5yZW1vdmVDbGFzcyhwZnggKyAnZGF0YXRhYmxlLWNlbGwtcmVzaXppbmcnKTtcclxuXHRcdFx0XHRcdHByZXNzZWQgPSBmYWxzZTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBUbyBwcmVwYXJlIHBsYWNlaG9sZGVyIGZvciB0YWJsZSBiZWZvcmUgY29udGVudCBpcyBsb2FkaW5nXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRpbml0SGVpZ2h0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAob3B0aW9ucy5sYXlvdXQuaGVpZ2h0ICYmIG9wdGlvbnMubGF5b3V0LnNjcm9sbCkge1xyXG5cdFx0XHRcdFx0dmFyIHRoZWFkSGVpZ2h0ID0gJChkYXRhdGFibGUudGFibGVIZWFkKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93Jykub3V0ZXJIZWlnaHQoKTtcclxuXHRcdFx0XHRcdHZhciB0Zm9vdEhlaWdodCA9ICQoZGF0YXRhYmxlLnRhYmxlRm9vdCkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpLm91dGVySGVpZ2h0KCk7XHJcblx0XHRcdFx0XHR2YXIgYm9keUhlaWdodCA9IG9wdGlvbnMubGF5b3V0LmhlaWdodDtcclxuXHRcdFx0XHRcdGlmICh0aGVhZEhlaWdodCA+IDApIHtcclxuXHRcdFx0XHRcdFx0Ym9keUhlaWdodCAtPSB0aGVhZEhlaWdodDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmICh0Zm9vdEhlaWdodCA+IDApIHtcclxuXHRcdFx0XHRcdFx0Ym9keUhlaWdodCAtPSB0Zm9vdEhlaWdodDtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBzY3JvbGxiYXIgb2Zmc2V0XHJcblx0XHRcdFx0XHRib2R5SGVpZ2h0IC09IDI7XHJcblxyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGVCb2R5KS5jc3MoJ21heC1oZWlnaHQnLCBNYXRoLmZsb29yKHBhcnNlRmxvYXQoYm9keUhlaWdodCkpKTtcclxuXHJcblx0XHRcdFx0XHQvLyBzZXQgc2Nyb2xsYWJsZSBhcmVhIGZpeGVkIGhlaWdodFxyXG5cdFx0XHRcdFx0Ly8gJChkYXRhdGFibGUudGFibGVCb2R5KS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtbG9jay1zY3JvbGwnKS5jc3MoJ2hlaWdodCcsIE1hdGguZmxvb3IocGFyc2VGbG9hdChib2R5SGVpZ2h0KSkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBTZXR1cCBiYXNlIERPTSAodGFibGUsIHRoZWFkLCB0Ym9keSwgdGZvb3QpIGFuZCBjcmVhdGUgaWYgbm90XHJcblx0XHRcdCAqIGV4aXN0LlxyXG5cdFx0XHQgKi9cclxuXHRcdFx0c2V0dXBCYXNlRE9NOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHQvLyBrZWVwIG9yaWdpbmFsIHN0YXRlIGJlZm9yZSBkYXRhdGFibGUgaW5pdGlhbGl6ZVxyXG5cdFx0XHRcdGRhdGF0YWJsZS5pbml0aWFsRGF0YXRhYmxlID0gJChkYXRhdGFibGUpLmNsb25lKCk7XHJcblxyXG5cdFx0XHRcdC8vIG1haW4gZWxlbWVudFxyXG5cdFx0XHRcdGlmICgkKGRhdGF0YWJsZSkucHJvcCgndGFnTmFtZScpID09PSAnVEFCTEUnKSB7XHJcblx0XHRcdFx0XHQvLyBpZiBtYWluIGluaXQgZWxlbWVudCBpcyA8dGFibGU+LCB3cmFwIHdpdGggZGl2XHJcblx0XHRcdFx0XHRkYXRhdGFibGUudGFibGUgPSAkKGRhdGF0YWJsZSkucmVtb3ZlQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZScpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtdGFibGUnKTtcclxuXHRcdFx0XHRcdGlmICgkKGRhdGF0YWJsZS50YWJsZSkucGFyZW50cygnLicgKyBwZnggKyAnZGF0YXRhYmxlJykubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdFx0XHRcdGRhdGF0YWJsZS50YWJsZS53cmFwKCQoJzxkaXYvPicpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUnKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLScgKyBvcHRpb25zLmxheW91dC50aGVtZSkpO1xyXG5cdFx0XHRcdFx0XHRkYXRhdGFibGUud3JhcCA9ICQoZGF0YXRhYmxlLnRhYmxlKS5wYXJlbnQoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Ly8gY3JlYXRlIHRhYmxlXHJcblx0XHRcdFx0XHRkYXRhdGFibGUud3JhcCA9ICQoZGF0YXRhYmxlKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlJykuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS0nICsgb3B0aW9ucy5sYXlvdXQudGhlbWUpO1xyXG5cdFx0XHRcdFx0ZGF0YXRhYmxlLnRhYmxlID0gJCgnPHRhYmxlLz4nKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXRhYmxlJykuYXBwZW5kVG8oZGF0YXRhYmxlKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICh0eXBlb2Ygb3B0aW9ucy5sYXlvdXQuY2xhc3MgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZS53cmFwKS5hZGRDbGFzcyhvcHRpb25zLmxheW91dC5jbGFzcyk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZSkucmVtb3ZlQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1kZXN0cm95ZWQnKS5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKTtcclxuXHJcblx0XHRcdFx0Ly8gZm9yY2UgZGlzYWJsZSBzYXZlIHN0YXRlXHJcblx0XHRcdFx0aWYgKHR5cGVvZiAkKGRhdGF0YWJsZSkuYXR0cignaWQnKSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFBsdWdpbi5zZXRPcHRpb24oJ2RhdGEuc2F2ZVN0YXRlJywgZmFsc2UpO1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGUpLmF0dHIoJ2lkJywgdXRpbC5nZXRVbmlxdWVJRChwZnggKyAnZGF0YXRhYmxlLScpKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIHByZWRlZmluZSB0YWJsZSBoZWlnaHRcclxuXHRcdFx0XHRpZiAoUGx1Z2luLmdldE9wdGlvbignbGF5b3V0Lm1pbkhlaWdodCcpKVxyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGUpLmNzcygnbWluLWhlaWdodCcsIFBsdWdpbi5nZXRPcHRpb24oJ2xheW91dC5taW5IZWlnaHQnKSk7XHJcblxyXG5cdFx0XHRcdGlmIChQbHVnaW4uZ2V0T3B0aW9uKCdsYXlvdXQuaGVpZ2h0JykpXHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZSkuY3NzKCdtYXgtaGVpZ2h0JywgUGx1Z2luLmdldE9wdGlvbignbGF5b3V0LmhlaWdodCcpKTtcclxuXHJcblx0XHRcdFx0Ly8gZm9yIG5vcm1hbCB0YWJsZSBsb2FkXHJcblx0XHRcdFx0aWYgKG9wdGlvbnMuZGF0YS50eXBlID09PSBudWxsKSB7XHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZSkuY3NzKCd3aWR0aCcsICcnKS5jc3MoJ2Rpc3BsYXknLCAnJyk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBjcmVhdGUgdGFibGUgaGVhZCBlbGVtZW50XHJcblx0XHRcdFx0ZGF0YXRhYmxlLnRhYmxlSGVhZCA9ICQoZGF0YXRhYmxlLnRhYmxlKS5maW5kKCd0aGVhZCcpO1xyXG5cdFx0XHRcdGlmICgkKGRhdGF0YWJsZS50YWJsZUhlYWQpLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0XHRcdFx0ZGF0YXRhYmxlLnRhYmxlSGVhZCA9ICQoJzx0aGVhZC8+JykucHJlcGVuZFRvKGRhdGF0YWJsZS50YWJsZSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBjcmVhdGUgdGFibGUgaGVhZCBlbGVtZW50XHJcblx0XHRcdFx0ZGF0YXRhYmxlLnRhYmxlQm9keSA9ICQoZGF0YXRhYmxlLnRhYmxlKS5maW5kKCd0Ym9keScpO1xyXG5cdFx0XHRcdGlmICgkKGRhdGF0YWJsZS50YWJsZUJvZHkpLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0XHRcdFx0ZGF0YXRhYmxlLnRhYmxlQm9keSA9ICQoJzx0Ym9keS8+JykuYXBwZW5kVG8oZGF0YXRhYmxlLnRhYmxlKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICh0eXBlb2Ygb3B0aW9ucy5sYXlvdXQuZm9vdGVyICE9PSAndW5kZWZpbmVkJyAmJlxyXG5cdFx0XHRcdFx0b3B0aW9ucy5sYXlvdXQuZm9vdGVyKSB7XHJcblx0XHRcdFx0XHQvLyBjcmVhdGUgdGFibGUgZm9vdCBlbGVtZW50XHJcblx0XHRcdFx0XHRkYXRhdGFibGUudGFibGVGb290ID0gJChkYXRhdGFibGUudGFibGUpLmZpbmQoJ3Rmb290Jyk7XHJcblx0XHRcdFx0XHRpZiAoJChkYXRhdGFibGUudGFibGVGb290KS5sZW5ndGggPT09IDApIHtcclxuXHRcdFx0XHRcdFx0ZGF0YXRhYmxlLnRhYmxlRm9vdCA9ICQoJzx0Zm9vdC8+JykuYXBwZW5kVG8oZGF0YXRhYmxlLnRhYmxlKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogU2V0IGNvbHVtbiBkYXRhIGJlZm9yZSB0YWJsZSBtYW5pcHVsYXRpb24uXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRzZXR1cENlbGxGaWVsZDogZnVuY3Rpb24odGFibGVQYXJ0cykge1xyXG5cdFx0XHRcdGlmICh0eXBlb2YgdGFibGVQYXJ0cyA9PT0gJ3VuZGVmaW5lZCcpIHRhYmxlUGFydHMgPSAkKGRhdGF0YWJsZS50YWJsZSkuY2hpbGRyZW4oKTtcclxuXHRcdFx0XHR2YXIgY29sdW1ucyA9IG9wdGlvbnMuY29sdW1ucztcclxuXHRcdFx0XHQkLmVhY2godGFibGVQYXJ0cywgZnVuY3Rpb24ocGFydCwgdGFibGVQYXJ0KSB7XHJcblx0XHRcdFx0XHQkKHRhYmxlUGFydCkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpLmVhY2goZnVuY3Rpb24odHJpLCB0cikge1xyXG5cdFx0XHRcdFx0XHQvLyBwcmVwYXJlIGRhdGFcclxuXHRcdFx0XHRcdFx0JCh0cikuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWNlbGwnKS5lYWNoKGZ1bmN0aW9uKHRkaSwgdGQpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbnNbdGRpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0XHRcdCQodGQpLmRhdGEoY29sdW1uc1t0ZGldKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogU2V0IGNvbHVtbiB0ZW1wbGF0ZSBjYWxsYmFja1xyXG5cdFx0XHQgKiBAcGFyYW0gdGFibGVQYXJ0XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRzZXR1cFRlbXBsYXRlQ2VsbDogZnVuY3Rpb24odGFibGVQYXJ0KSB7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiB0YWJsZVBhcnQgPT09ICd1bmRlZmluZWQnKSB0YWJsZVBhcnQgPSBkYXRhdGFibGUudGFibGVCb2R5O1xyXG5cdFx0XHRcdHZhciBjb2x1bW5zID0gb3B0aW9ucy5jb2x1bW5zO1xyXG5cdFx0XHRcdCQodGFibGVQYXJ0KS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93JykuZWFjaChmdW5jdGlvbih0cmksIHRyKSB7XHJcblx0XHRcdFx0XHQvLyByb3cgZGF0YSBvYmplY3QsIGlmIGFueVxyXG5cdFx0XHRcdFx0dmFyIG9iaiA9ICQodHIpLmRhdGEoJ29iaicpO1xyXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBAZGVwcmVjYXRlZCBpbiB2NS4wLjZcclxuXHRcdFx0XHRcdC8vIG9ialsnZ2V0SW5kZXgnXSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0Ly8gXHRyZXR1cm4gdHJpO1xyXG5cdFx0XHRcdFx0Ly8gfTtcclxuXHRcdFx0XHRcdC8vIEBkZXByZWNhdGVkIGluIHY1LjAuNlxyXG5cdFx0XHRcdFx0Ly8gb2JqWydnZXREYXRhdGFibGUnXSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0Ly8gXHRyZXR1cm4gZGF0YXRhYmxlO1xyXG5cdFx0XHRcdFx0Ly8gfTtcclxuXHJcblx0XHRcdFx0XHQvLyBAZGVwcmVjYXRlZCBpbiB2NS4wLjZcclxuXHRcdFx0XHRcdHZhciByb3dDYWxsYmFjayA9IFBsdWdpbi5nZXRPcHRpb24oJ3Jvd3MuY2FsbGJhY2snKTtcclxuXHRcdFx0XHRcdGlmICh0eXBlb2Ygcm93Q2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0XHRcdFx0cm93Q2FsbGJhY2soJCh0ciksIG9iaiwgdHJpKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdC8vIGJlZm9yZSB0ZW1wbGF0ZSByb3cgY2FsbGJhY2tcclxuXHRcdFx0XHRcdHZhciBiZWZvcmVUZW1wbGF0ZSA9IFBsdWdpbi5nZXRPcHRpb24oJ3Jvd3MuYmVmb3JlVGVtcGxhdGUnKTtcclxuXHRcdFx0XHRcdGlmICh0eXBlb2YgYmVmb3JlVGVtcGxhdGUgPT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0XHRcdFx0YmVmb3JlVGVtcGxhdGUoJCh0ciksIG9iaiwgdHJpKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdC8vIGlmIGRhdGEgb2JqZWN0IGlzIHVuZGVmaW5lZCwgY29sbGVjdCBmcm9tIHRhYmxlXHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0b2JqID0ge307XHJcblx0XHRcdFx0XHRcdCQodHIpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsJykuZWFjaChmdW5jdGlvbih0ZGksIHRkKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0IGNvbHVtbiBzZXR0aW5ncyBieSBmaWVsZFxyXG5cdFx0XHRcdFx0XHRcdHZhciBjb2x1bW4gPSAkLmdyZXAoY29sdW1ucywgZnVuY3Rpb24obiwgaSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuICQodGQpLmRhdGEoJ2ZpZWxkJykgPT09IG4uZmllbGQ7XHJcblx0XHRcdFx0XHRcdFx0fSlbMF07XHJcblx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW4gIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRvYmpbY29sdW1uWydmaWVsZCddXSA9ICQodGQpLnRleHQoKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdCQodHIpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsJykuZWFjaChmdW5jdGlvbih0ZGksIHRkKSB7XHJcblx0XHRcdFx0XHRcdC8vIGdldCBjb2x1bW4gc2V0dGluZ3MgYnkgZmllbGRcclxuXHRcdFx0XHRcdFx0dmFyIGNvbHVtbiA9ICQuZ3JlcChjb2x1bW5zLCBmdW5jdGlvbihuLCBpKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuICQodGQpLmRhdGEoJ2ZpZWxkJykgPT09IG4uZmllbGQ7XHJcblx0XHRcdFx0XHRcdH0pWzBdO1xyXG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBjb2x1bW4gdGVtcGxhdGVcclxuXHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbi50ZW1wbGF0ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciBmaW5hbFZhbHVlID0gJyc7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyB0ZW1wbGF0ZSBzdHJpbmdcclxuXHRcdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY29sdW1uLnRlbXBsYXRlID09PSAnc3RyaW5nJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRmaW5hbFZhbHVlID0gUGx1Z2luLmRhdGFQbGFjZWhvbGRlcihjb2x1bW4udGVtcGxhdGUsIG9iaik7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHQvLyB0ZW1wbGF0ZSBjYWxsYmFjayBmdW5jdGlvblxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW4udGVtcGxhdGUgPT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IGNvbHVtbi50ZW1wbGF0ZShvYmosIHRyaSwgZGF0YXRhYmxlKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBzYW5pdGl6ZSB1c2luZyBET01QdXJpZnkgaWYgaW5zdGFsbGVkXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIERPTVB1cmlmeSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IERPTVB1cmlmeS5zYW5pdGl6ZShmaW5hbFZhbHVlKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuXHRcdFx0XHRcdFx0XHRcdHNwYW4uaW5uZXJIVE1MID0gZmluYWxWYWx1ZTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBpbnNlcnQgdG8gY2VsbCwgd3JhcCB3aXRoIHNwYW5cclxuXHRcdFx0XHRcdFx0XHRcdCQodGQpLmh0bWwoc3Bhbik7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2V0IHNwYW4gb3ZlcmZsb3dcclxuXHRcdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY29sdW1uLm92ZXJmbG93ICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQkKHNwYW4pLmNzcygnb3ZlcmZsb3cnLCBjb2x1bW4ub3ZlcmZsb3cpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQkKHNwYW4pLmNzcygncG9zaXRpb24nLCAncmVsYXRpdmUnKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRcdC8vIGFmdGVyIHRlbXBsYXRlIHJvdyBjYWxsYmFja1xyXG5cdFx0XHRcdFx0dmFyIGFmdGVyVGVtcGxhdGUgPSBQbHVnaW4uZ2V0T3B0aW9uKCdyb3dzLmFmdGVyVGVtcGxhdGUnKTtcclxuXHRcdFx0XHRcdGlmICh0eXBlb2YgYWZ0ZXJUZW1wbGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG5cdFx0XHRcdFx0XHRhZnRlclRlbXBsYXRlKCQodHIpLCBvYmosIHRyaSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogU2V0dXAgZXh0cmEgc3lzdGVtIGNvbHVtbiBwcm9wZXJ0aWVzXHJcblx0XHRcdCAqIE5vdGU6IHNlbGVjdG9yIGNoZWNrYm94LCBzdWJ0YWJsZSB0b2dnbGVcclxuXHRcdFx0ICovXHJcblx0XHRcdHNldHVwU3lzdGVtQ29sdW1uOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRkYXRhdGFibGUuZGF0YVNldCA9IGRhdGF0YWJsZS5kYXRhU2V0IHx8IFtdO1xyXG5cdFx0XHRcdC8vIG5vIHJlY29yZHMgYXZhaWxhYmxlXHJcblx0XHRcdFx0aWYgKGRhdGF0YWJsZS5kYXRhU2V0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xyXG5cclxuXHRcdFx0XHR2YXIgY29sdW1ucyA9IG9wdGlvbnMuY29sdW1ucztcclxuXHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUJvZHkpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKS5lYWNoKGZ1bmN0aW9uKHRyaSwgdHIpIHtcclxuXHRcdFx0XHRcdCQodHIpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsJykuZWFjaChmdW5jdGlvbih0ZGksIHRkKSB7XHJcblx0XHRcdFx0XHRcdC8vIGdldCBjb2x1bW4gc2V0dGluZ3MgYnkgZmllbGRcclxuXHRcdFx0XHRcdFx0dmFyIGNvbHVtbiA9ICQuZ3JlcChjb2x1bW5zLCBmdW5jdGlvbihuLCBpKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuICQodGQpLmRhdGEoJ2ZpZWxkJykgPT09IG4uZmllbGQ7XHJcblx0XHRcdFx0XHRcdH0pWzBdO1xyXG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0XHR2YXIgdmFsdWUgPSAkKHRkKS50ZXh0KCk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIGVuYWJsZSBjb2x1bW4gc2VsZWN0b3JcclxuXHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbi5zZWxlY3RvciAhPT0gJ3VuZGVmaW5lZCcgJiYgY29sdW1uLnNlbGVjdG9yICE9PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gY2hlY2sgaWYgY2hlY2tib3ggZXhpc3RcclxuXHRcdFx0XHRcdFx0XHRcdGlmICgkKHRkKS5maW5kKCcuJyArIHBmeCArICdjaGVja2JveCBbdHlwZT1cImNoZWNrYm94XCJdJykubGVuZ3RoID4gMCkgcmV0dXJuO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdCQodGQpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtY2VsbC1jaGVjaycpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIGFwcGVuZCBjaGVja2JveFxyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIGNoayA9ICQoJzxsYWJlbC8+JykuXHJcblx0XHRcdFx0XHRcdFx0XHRcdGFkZENsYXNzKHBmeCArICdjaGVja2JveCAnICsgcGZ4ICsgJ2NoZWNrYm94LXNpbmdsZScpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRhcHBlbmQoJCgnPGlucHV0Lz4nKS5hdHRyKCd0eXBlJywgJ2NoZWNrYm94JykuYXR0cigndmFsdWUnLCB2YWx1ZSkub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCQodGhpcykuaXMoJzpjaGVja2VkJykpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFkZCBjaGVja2JveCBhY3RpdmUgcm93IGNsYXNzXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRQbHVnaW4uc2V0QWN0aXZlKHRoaXMpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhZGQgY2hlY2tib3ggYWN0aXZlIHJvdyBjbGFzc1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0UGx1Z2luLnNldEluYWN0aXZlKHRoaXMpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0fSkpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRhcHBlbmQoJyZuYnNwOzxzcGFuPjwvc3Bhbj4nKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBjaGVja2JveCBzZWxlY3RvciBoYXMgb3V0bGluZSBzdHlsZVxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW4uc2VsZWN0b3IuY2xhc3MgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdCQoY2hrKS5hZGRDbGFzcyhjb2x1bW4uc2VsZWN0b3IuY2xhc3MpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdCQodGQpLmNoaWxkcmVuKCkuaHRtbChjaGspO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gZW5hYmxlIGNvbHVtbiBzdWJ0YWJsZSB0b2dnbGVcclxuXHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbi5zdWJ0YWJsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29sdW1uLnN1YnRhYmxlKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBjaGVjayBpZiBzdWJ0YWJsZSB0b2dnbGUgZXhpc3RcclxuXHRcdFx0XHRcdFx0XHRcdGlmICgkKHRkKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtdG9nZ2xlLXN1YnRhYmxlJykubGVuZ3RoID4gMCkgcmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gYXBwZW5kIHN1YnRhYmxlIHRvZ2dsZVxyXG5cdFx0XHRcdFx0XHRcdFx0JCh0ZCkuXHJcblx0XHRcdFx0XHRcdFx0XHRcdGNoaWxkcmVuKCkuXHJcblx0XHRcdFx0XHRcdFx0XHRcdGh0bWwoJCgnPGEvPicpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtdG9nZ2xlLXN1YnRhYmxlJykuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YXR0cignaHJlZicsICcjJykuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YXR0cignZGF0YS12YWx1ZScsIHZhbHVlKS5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRhcHBlbmQoJCgnPGkvPicpLmFkZENsYXNzKFBsdWdpbi5nZXRPcHRpb24oJ2xheW91dC5pY29ucy5yb3dEZXRhaWwuY29sbGFwc2UnKSkpKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHQvLyBpbml0IGNoZWNrYm94IGZvciBoZWFkZXIvZm9vdGVyXHJcblx0XHRcdFx0dmFyIGluaXRDaGVja2JveCA9IGZ1bmN0aW9uKHRyKSB7XHJcblx0XHRcdFx0XHQvLyBnZXQgY29sdW1uIHNldHRpbmdzIGJ5IGZpZWxkXHJcblx0XHRcdFx0XHR2YXIgY29sdW1uID0gJC5ncmVwKGNvbHVtbnMsIGZ1bmN0aW9uKG4sIGkpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHR5cGVvZiBuLnNlbGVjdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuLnNlbGVjdG9yICE9PSBmYWxzZTtcclxuXHRcdFx0XHRcdH0pWzBdO1xyXG5cclxuXHRcdFx0XHRcdGlmICh0eXBlb2YgY29sdW1uICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHQvLyBlbmFibGUgY29sdW1uIHNlbGVjdG9yXHJcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY29sdW1uLnNlbGVjdG9yICE9PSAndW5kZWZpbmVkJyAmJiBjb2x1bW4uc2VsZWN0b3IgIT09IGZhbHNlKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIHRkID0gJCh0cikuZmluZCgnW2RhdGEtZmllbGQ9XCInICsgY29sdW1uLmZpZWxkICsgJ1wiXScpO1xyXG5cdFx0XHRcdFx0XHRcdC8vIGNoZWNrIGlmIGNoZWNrYm94IGV4aXN0XHJcblx0XHRcdFx0XHRcdFx0aWYgKCQodGQpLmZpbmQoJy4nICsgcGZ4ICsgJ2NoZWNrYm94IFt0eXBlPVwiY2hlY2tib3hcIl0nKS5sZW5ndGggPiAwKSByZXR1cm47XHJcblxyXG5cdFx0XHRcdFx0XHRcdCQodGQpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtY2VsbC1jaGVjaycpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBhcHBlbmQgY2hlY2tib3hcclxuXHRcdFx0XHRcdFx0XHR2YXIgY2hrID0gJCgnPGxhYmVsLz4nKS5cclxuXHRcdFx0XHRcdFx0XHRcdGFkZENsYXNzKHBmeCArICdjaGVja2JveCAnICsgcGZ4ICsgJ2NoZWNrYm94LXNpbmdsZSAnICsgcGZ4ICsgJ2NoZWNrYm94LWFsbCcpLlxyXG5cdFx0XHRcdFx0XHRcdFx0YXBwZW5kKCQoJzxpbnB1dC8+JykuYXR0cigndHlwZScsICdjaGVja2JveCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoJCh0aGlzKS5pcygnOmNoZWNrZWQnKSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFBsdWdpbi5zZXRBY3RpdmVBbGwodHJ1ZSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0UGx1Z2luLnNldEFjdGl2ZUFsbChmYWxzZSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH0pKS5cclxuXHRcdFx0XHRcdFx0XHRcdGFwcGVuZCgnJm5ic3A7PHNwYW4+PC9zcGFuPicpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBjaGVja2JveCBzZWxlY3RvciBoYXMgb3V0bGluZSBzdHlsZVxyXG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY29sdW1uLnNlbGVjdG9yLmNsYXNzICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0JChjaGspLmFkZENsYXNzKGNvbHVtbi5zZWxlY3Rvci5jbGFzcyk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHQkKHRkKS5jaGlsZHJlbigpLmh0bWwoY2hrKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdGlmIChvcHRpb25zLmxheW91dC5oZWFkZXIpIHtcclxuXHRcdFx0XHRcdGluaXRDaGVja2JveCgkKGRhdGF0YWJsZS50YWJsZUhlYWQpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKS5maXJzdCgpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKG9wdGlvbnMubGF5b3V0LmZvb3Rlcikge1xyXG5cdFx0XHRcdFx0aW5pdENoZWNrYm94KCQoZGF0YXRhYmxlLnRhYmxlRm9vdCkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpLmZpcnN0KCkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdG1heFdpZHRoTGlzdDoge30sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogQWRqdXN0IHdpZHRoIHRvIG1hdGNoIGNvbnRhaW5lciBzaXplXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRhZGp1c3RDZWxsc1dpZHRoOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHQvLyBnZXQgdGFibGUgd2lkdGhcclxuXHRcdFx0XHR2YXIgY29udGFpbmVyV2lkdGggPSAkKGRhdGF0YWJsZS50YWJsZUJvZHkpLmlubmVyV2lkdGgoKSAtIFBsdWdpbi5pY29uT2Zmc2V0O1xyXG5cclxuXHRcdFx0XHQvLyBnZXQgdG90YWwgbnVtYmVyIG9mIGNvbHVtbnNcclxuXHRcdFx0XHR2YXIgY29sdW1ucyA9ICQoZGF0YXRhYmxlLnRhYmxlSGVhZCkuXHJcblx0XHRcdFx0XHRmaW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93OmZpcnN0LWNoaWxkJykuXHJcblx0XHRcdFx0XHRmaW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtY2VsbCcpLlxyXG5cdFx0XHRcdFx0Ly8gZXhjbHVkZSBleHBhbmQgaWNvblxyXG5cdFx0XHRcdFx0bm90KCcuJyArIHBmeCArICdkYXRhdGFibGUtdG9nZ2xlLWRldGFpbCcpLlxyXG5cdFx0XHRcdFx0bm90KCc6aGlkZGVuJykubGVuZ3RoO1xyXG5cclxuXHRcdFx0XHRpZiAoY29sdW1ucyA+IDApIHtcclxuXHRcdFx0XHRcdC8vICByZW1vdmUgcmVzZXJ2ZWQgc29ydCBpY29uIHdpZHRoXHJcblx0XHRcdFx0XHRjb250YWluZXJXaWR0aCA9IGNvbnRhaW5lcldpZHRoIC0gKFBsdWdpbi5pY29uT2Zmc2V0ICogY29sdW1ucyk7XHJcblx0XHRcdFx0XHR2YXIgbWluV2lkdGggPSBNYXRoLmZsb29yKGNvbnRhaW5lcldpZHRoIC8gY29sdW1ucyk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gbWluaW11bSB3aWR0aFxyXG5cdFx0XHRcdFx0aWYgKG1pbldpZHRoIDw9IFBsdWdpbi5jZWxsT2Zmc2V0KSB7XHJcblx0XHRcdFx0XHRcdG1pbldpZHRoID0gUGx1Z2luLmNlbGxPZmZzZXQ7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGUpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKS5cclxuXHRcdFx0XHRcdFx0XHRmaW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtY2VsbCcpLlxyXG5cdFx0XHRcdFx0XHRcdC8vIGV4Y2x1ZGUgZXhwYW5kIGljb25cclxuXHRcdFx0XHRcdFx0XHRub3QoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS10b2dnbGUtZGV0YWlsJykuXHJcblx0XHRcdFx0XHRcdFx0bm90KCc6aGlkZGVuJykuZWFjaChmdW5jdGlvbih0ZGksIHRkKSB7XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgd2lkdGggPSBtaW5XaWR0aDtcclxuXHRcdFx0XHRcdFx0dmFyIGRhdGFXaWR0aCA9ICQodGQpLmRhdGEoJ3dpZHRoJyk7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGRhdGFXaWR0aCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoZGF0YVdpZHRoID09PSAnYXV0bycpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciBmaWVsZCA9ICQodGQpLmRhdGEoJ2ZpZWxkJyk7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoUGx1Z2luLm1heFdpZHRoTGlzdFtmaWVsZF0pIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0d2lkdGggPSBQbHVnaW4ubWF4V2lkdGhMaXN0W2ZpZWxkXTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgY2VsbHMgPSAkKGRhdGF0YWJsZS50YWJsZSkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWNlbGxbZGF0YS1maWVsZD1cIicgKyBmaWVsZCArICdcIl0nKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0d2lkdGggPSBQbHVnaW4ubWF4V2lkdGhMaXN0W2ZpZWxkXSA9IE1hdGgubWF4LmFwcGx5KG51bGwsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQkKGNlbGxzKS5tYXAoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiAkKHRoaXMpLm91dGVyV2lkdGgoKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH0pLmdldCgpKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHR3aWR0aCA9IGRhdGFXaWR0aDtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0JCh0ZCkuY2hpbGRyZW4oKS5jc3MoJ3dpZHRoJywgTWF0aC5jZWlsKHdpZHRoKSk7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiBkYXRhdGFibGU7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogQWRqdXN0IGhlaWdodCB0byBtYXRjaCBjb250YWluZXIgc2l6ZVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0YWRqdXN0Q2VsbHNIZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdCQuZWFjaCgkKGRhdGF0YWJsZS50YWJsZSkuY2hpbGRyZW4oKSwgZnVuY3Rpb24ocGFydCwgdGFibGVQYXJ0KSB7XHJcblx0XHRcdFx0XHR2YXIgdG90YWxSb3dzID0gJCh0YWJsZVBhcnQpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKS5maXJzdCgpLnBhcmVudCgpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKS5sZW5ndGg7XHJcblx0XHRcdFx0XHRmb3IgKHZhciBpID0gMTsgaSA8PSB0b3RhbFJvd3M7IGkrKykge1xyXG5cdFx0XHRcdFx0XHR2YXIgcm93cyA9ICQodGFibGVQYXJ0KS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93Om50aC1jaGlsZCgnICsgaSArICcpJyk7XHJcblx0XHRcdFx0XHRcdGlmICgkKHJvd3MpLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0XHRcdFx0XHR2YXIgbWF4SGVpZ2h0ID0gTWF0aC5tYXguYXBwbHkobnVsbCwgJChyb3dzKS5tYXAoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gJCh0aGlzKS5vdXRlckhlaWdodCgpO1xyXG5cdFx0XHRcdFx0XHRcdH0pLmdldCgpKTtcclxuXHRcdFx0XHRcdFx0XHQkKHJvd3MpLmNzcygnaGVpZ2h0JywgTWF0aC5jZWlsKG1heEhlaWdodCkpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogU2V0dXAgdGFibGUgRE9NIGFuZCBjbGFzc2VzXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRzZXR1cERPTTogZnVuY3Rpb24odGFibGUpIHtcclxuXHRcdFx0XHQvLyBzZXQgdGFibGUgY2xhc3Nlc1xyXG5cdFx0XHRcdCQodGFibGUpLmZpbmQoJz4gdGhlYWQnKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLWhlYWQnKTtcclxuXHRcdFx0XHQkKHRhYmxlKS5maW5kKCc+IHRib2R5JykuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1ib2R5Jyk7XHJcblx0XHRcdFx0JCh0YWJsZSkuZmluZCgnPiB0Zm9vdCcpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtZm9vdCcpO1xyXG5cdFx0XHRcdCQodGFibGUpLmZpbmQoJ3RyJykuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKTtcclxuXHRcdFx0XHQkKHRhYmxlKS5maW5kKCd0ciA+IHRoLCB0ciA+IHRkJykuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1jZWxsJyk7XHJcblx0XHRcdFx0JCh0YWJsZSkuZmluZCgndHIgPiB0aCwgdHIgPiB0ZCcpLmVhY2goZnVuY3Rpb24oaSwgdGQpIHtcclxuXHRcdFx0XHRcdGlmICgkKHRkKS5maW5kKCdzcGFuJykubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdFx0XHRcdCQodGQpLndyYXBJbm5lcigkKCc8c3Bhbi8+JykuY3NzKCd3aWR0aCcsIFBsdWdpbi5jZWxsT2Zmc2V0KSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogRGVmYXVsdCBzY3JvbGxiYXJcclxuXHRcdFx0ICogQHJldHVybnMge3t0YWJsZUxvY2tlZDogbnVsbCwgaW5pdDogaW5pdCwgb25TY3JvbGxpbmc6XHJcblx0XHRcdCAqICAgICBvblNjcm9sbGluZ319XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRzY3JvbGxiYXI6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBzY3JvbGwgPSB7XHJcblx0XHRcdFx0XHRzY3JvbGxhYmxlOiBudWxsLFxyXG5cdFx0XHRcdFx0dGFibGVMb2NrZWQ6IG51bGwsXHJcblx0XHRcdFx0XHRpbml0UG9zaXRpb246IG51bGwsXHJcblx0XHRcdFx0XHRpbml0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0dmFyIHNjcmVlbiA9IHV0aWwuZ2V0Vmlld1BvcnQoKS53aWR0aDtcclxuXHRcdFx0XHRcdFx0Ly8gc2V0dXAgc2Nyb2xsYWJsZSBkYXRhdGFibGVcclxuXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMubGF5b3V0LnNjcm9sbCkge1xyXG5cdFx0XHRcdFx0XHRcdC8vIGFkZCBzY3JvbGxhYmxlIGRhdGF0YWJsZSBjbGFzc1xyXG5cdFx0XHRcdFx0XHRcdCQoZGF0YXRhYmxlLndyYXApLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtc2Nyb2xsJyk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHZhciBzY3JvbGxhYmxlID0gJChkYXRhdGFibGUudGFibGVCb2R5KS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtbG9jay1zY3JvbGwnKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gY2hlY2sgaWYgc2Nyb2xsYWJsZSBhcmVhIGhhdmUgcm93c1xyXG5cdFx0XHRcdFx0XHRcdGlmICgkKHNjcm9sbGFibGUpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKS5sZW5ndGggPiAwICYmICQoc2Nyb2xsYWJsZSkubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0c2Nyb2xsLnNjcm9sbEhlYWQgPSAkKGRhdGF0YWJsZS50YWJsZUhlYWQpLmZpbmQoJz4gLicgKyBwZnggKyAnZGF0YXRhYmxlLWxvY2stc2Nyb2xsID4gLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpO1xyXG5cdFx0XHRcdFx0XHRcdFx0c2Nyb2xsLnNjcm9sbEZvb3QgPSAkKGRhdGF0YWJsZS50YWJsZUZvb3QpLmZpbmQoJz4gLicgKyBwZnggKyAnZGF0YXRhYmxlLWxvY2stc2Nyb2xsID4gLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpO1xyXG5cdFx0XHRcdFx0XHRcdFx0c2Nyb2xsLnRhYmxlTG9ja2VkID0gJChkYXRhdGFibGUudGFibGVCb2R5KS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtbG9jazpub3QoLicgKyBwZnggKyAnZGF0YXRhYmxlLWxvY2stc2Nyb2xsKScpO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKFBsdWdpbi5nZXRPcHRpb24oJ2xheW91dC5jdXN0b21TY3JvbGxiYXInKSAmJiB1dGlsLmRldGVjdElFKCkgIT0gMTAgJiYgc2NyZWVuID4gdXRpbC5nZXRCcmVha3BvaW50KCdsZycpKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHNjcm9sbC5pbml0Q3VzdG9tU2Nyb2xsYmFyKHNjcm9sbGFibGVbMF0pO1xyXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0c2Nyb2xsLmluaXREZWZhdWx0U2Nyb2xsYmFyKHNjcm9sbGFibGUpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoJChkYXRhdGFibGUudGFibGVCb2R5KS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93JykubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0c2Nyb2xsLnNjcm9sbEhlYWQgPSAkKGRhdGF0YWJsZS50YWJsZUhlYWQpLmZpbmQoJz4gLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpO1xyXG5cdFx0XHRcdFx0XHRcdFx0c2Nyb2xsLnNjcm9sbEZvb3QgPSAkKGRhdGF0YWJsZS50YWJsZUZvb3QpLmZpbmQoJz4gLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKFBsdWdpbi5nZXRPcHRpb24oJ2xheW91dC5jdXN0b21TY3JvbGxiYXInKSAmJiB1dGlsLmRldGVjdElFKCkgIT0gMTAgJiYgc2NyZWVuID4gdXRpbC5nZXRCcmVha3BvaW50KCdsZycpKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHNjcm9sbC5pbml0Q3VzdG9tU2Nyb2xsYmFyKGRhdGF0YWJsZS50YWJsZUJvZHkpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0c2Nyb2xsLmluaXREZWZhdWx0U2Nyb2xsYmFyKGRhdGF0YWJsZS50YWJsZUJvZHkpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdGluaXREZWZhdWx0U2Nyb2xsYmFyOiBmdW5jdGlvbihzY3JvbGxhYmxlKSB7XHJcblx0XHRcdFx0XHRcdC8vIGdldCBpbml0aWFsIHNjcm9sbCBwb3NpdGlvblxyXG5cdFx0XHRcdFx0XHRzY3JvbGwuaW5pdFBvc2l0aW9uID0gJChzY3JvbGxhYmxlKS5zY3JvbGxMZWZ0KCk7XHJcblx0XHRcdFx0XHRcdCQoc2Nyb2xsYWJsZSkuY3NzKCdvdmVyZmxvdy15JywgJ2F1dG8nKS5vZmYoKS5vbignc2Nyb2xsJywgc2Nyb2xsLm9uU2Nyb2xsaW5nKTtcclxuXHRcdFx0XHRcdFx0JChzY3JvbGxhYmxlKS5jc3MoJ292ZXJmbG93LXgnLCAnYXV0bycpO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdG9uU2Nyb2xsaW5nOiBmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0XHRcdHZhciBsZWZ0ID0gJCh0aGlzKS5zY3JvbGxMZWZ0KCk7XHJcblx0XHRcdFx0XHRcdHZhciB0b3AgPSAkKHRoaXMpLnNjcm9sbFRvcCgpO1xyXG5cdFx0XHRcdFx0XHRpZiAodXRpbC5pc1JUTCgpKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gZGVkdWN0IGluaXRpYWwgcG9zaXRpb24gZm9yIFJUTFxyXG5cdFx0XHRcdFx0XHRcdGxlZnQgPSBsZWZ0IC0gc2Nyb2xsLmluaXRQb3NpdGlvbjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHQkKHNjcm9sbC5zY3JvbGxIZWFkKS5jc3MoJ2xlZnQnLCAtbGVmdCk7XHJcblx0XHRcdFx0XHRcdCQoc2Nyb2xsLnNjcm9sbEZvb3QpLmNzcygnbGVmdCcsIC1sZWZ0KTtcclxuXHRcdFx0XHRcdFx0JChzY3JvbGwudGFibGVMb2NrZWQpLmVhY2goZnVuY3Rpb24oaSwgdGFibGUpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoUGx1Z2luLmlzTG9ja2VkKCkpIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIHNjcm9sbGJhciBvZmZzZXRcclxuXHRcdFx0XHRcdFx0XHRcdHRvcCAtPSAxO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHQkKHRhYmxlKS5jc3MoJ3RvcCcsIC10b3ApO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRpbml0Q3VzdG9tU2Nyb2xsYmFyOiBmdW5jdGlvbihzY3JvbGxhYmxlKSB7XHJcblx0XHRcdFx0XHRcdHNjcm9sbC5zY3JvbGxhYmxlID0gc2Nyb2xsYWJsZTtcclxuXHRcdFx0XHRcdFx0Ly8gY3JlYXRlIGEgbmV3IGluc3RhbmNlIGZvciB0YWJsZSBib2R5IHdpdGggc2Nyb2xsYmFyXHJcblx0XHRcdFx0XHRcdFBsdWdpbi5pbml0U2Nyb2xsYmFyKHNjcm9sbGFibGUpO1xyXG5cdFx0XHRcdFx0XHQvLyBnZXQgaW5pdGlhbCBzY3JvbGwgcG9zaXRpb25cclxuXHRcdFx0XHRcdFx0c2Nyb2xsLmluaXRQb3NpdGlvbiA9ICQoc2Nyb2xsYWJsZSkuc2Nyb2xsTGVmdCgpO1xyXG5cdFx0XHRcdFx0XHQkKHNjcm9sbGFibGUpLm9mZigpLm9uKCdzY3JvbGwnLCBzY3JvbGwub25TY3JvbGxpbmcpO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRcdHNjcm9sbC5pbml0KCk7XHJcblx0XHRcdFx0cmV0dXJuIHNjcm9sbDtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBJbml0IGN1c3RvbSBzY3JvbGxiYXIgYW5kIHJlc2V0IHBvc2l0aW9uXHJcblx0XHRcdCAqIEBwYXJhbSBlbGVtZW50XHJcblx0XHRcdCAqIEBwYXJhbSBvcHRpb25zXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRpbml0U2Nyb2xsYmFyOiBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XHJcblx0XHRcdFx0aWYgKCFlbGVtZW50IHx8ICFlbGVtZW50Lm5vZGVOYW1lKSB7XHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlQm9keSkuY3NzKCdvdmVyZmxvdycsICcnKTtcclxuXHRcdFx0XHR2YXIgcHMgPSAkKGVsZW1lbnQpLmRhdGEoJ3BzJyk7XHJcblx0XHRcdFx0aWYgKHV0aWwuaGFzQ2xhc3MoZWxlbWVudCwgJ3BzJykgJiYgdHlwZW9mIHBzICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0cHMudXBkYXRlKCk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHBzID0gbmV3IFBlcmZlY3RTY3JvbGxiYXIoZWxlbWVudCwgT2JqZWN0LmFzc2lnbih7fSwge1xyXG5cdFx0XHRcdFx0XHR3aGVlbFNwZWVkOiAwLjUsXHJcblx0XHRcdFx0XHRcdHN3aXBlRWFzaW5nOiB0cnVlLFxyXG5cdFx0XHRcdFx0XHQvLyB3aGVlbFByb3BhZ2F0aW9uOiBmYWxzZSxcclxuXHRcdFx0XHRcdFx0bWluU2Nyb2xsYmFyTGVuZ3RoOiA0MCxcclxuXHRcdFx0XHRcdFx0bWF4U2Nyb2xsYmFyTGVuZ3RoOiAzMDAsXHJcblx0XHRcdFx0XHRcdHN1cHByZXNzU2Nyb2xsWDogUGx1Z2luLmdldE9wdGlvbigncm93cy5hdXRvSGlkZScpICYmICFQbHVnaW4uaXNMb2NrZWQoKVxyXG5cdFx0XHRcdFx0fSwgb3B0aW9ucykpO1xyXG5cdFx0XHRcdFx0JChlbGVtZW50KS5kYXRhKCdwcycsIHBzKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIHJlc2V0IHBlcmZlY3Qgc2Nyb2xsYmFyIG9uIHJlc2l6ZVxyXG5cdFx0XHRcdCQod2luZG93KS5yZXNpemUoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRwcy51cGRhdGUoKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBTZXQgY29sdW1uIHRpdGxlIGZyb20gb3B0aW9ucy5jb2x1bW5zIHNldHRpbmdzXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRzZXRIZWFkVGl0bGU6IGZ1bmN0aW9uKHRhYmxlUGFydCkge1xyXG5cdFx0XHRcdGlmICh0eXBlb2YgdGFibGVQYXJ0ID09PSAndW5kZWZpbmVkJykgdGFibGVQYXJ0ID0gZGF0YXRhYmxlLnRhYmxlSGVhZDtcclxuXHRcdFx0XHR0YWJsZVBhcnQgPSAkKHRhYmxlUGFydClbMF07XHJcblx0XHRcdFx0dmFyIGNvbHVtbnMgPSBvcHRpb25zLmNvbHVtbnM7XHJcblx0XHRcdFx0dmFyIHJvdyA9IHRhYmxlUGFydC5nZXRFbGVtZW50c0J5VGFnTmFtZSgndHInKVswXTtcclxuXHRcdFx0XHR2YXIgdGhzID0gdGFibGVQYXJ0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0ZCcpO1xyXG5cclxuXHRcdFx0XHRpZiAodHlwZW9mIHJvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XHJcblx0XHRcdFx0XHR0YWJsZVBhcnQuYXBwZW5kQ2hpbGQocm93KTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdCQuZWFjaChjb2x1bW5zLCBmdW5jdGlvbihpLCBjb2x1bW4pIHtcclxuXHRcdFx0XHRcdHZhciB0aCA9IHRoc1tpXTtcclxuXHRcdFx0XHRcdGlmICh0eXBlb2YgdGggPT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdHRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGgnKTtcclxuXHRcdFx0XHRcdFx0cm93LmFwcGVuZENoaWxkKHRoKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBzZXQgY29sdW1uIHRpdGxlXHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtblsndGl0bGUnXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0dGguaW5uZXJIVE1MID0gY29sdW1uLnRpdGxlO1xyXG5cdFx0XHRcdFx0XHR0aC5zZXRBdHRyaWJ1dGUoJ2RhdGEtZmllbGQnLCBjb2x1bW4uZmllbGQpO1xyXG5cdFx0XHRcdFx0XHR1dGlsLmFkZENsYXNzKHRoLCBjb2x1bW4uY2xhc3MpO1xyXG5cdFx0XHRcdFx0XHQvLyBzZXQgZGlzYWJsZSBhdXRvSGlkZSBvciBmb3JjZSBlbmFibGVcclxuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW4uYXV0b0hpZGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKGNvbHVtbi5hdXRvSGlkZSAhPT0gdHJ1ZSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dGguc2V0QXR0cmlidXRlKCdkYXRhLWF1dG9oaWRlLWRpc2FibGVkJywgY29sdW1uLmF1dG9IaWRlKTtcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0dGguc2V0QXR0cmlidXRlKCdkYXRhLWF1dG9oaWRlLWVuYWJsZWQnLCBjb2x1bW4uYXV0b0hpZGUpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHQkKHRoKS5kYXRhKGNvbHVtbik7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gc2V0IGhlYWRlciBhdHRyIG9wdGlvblxyXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW4uYXR0ciAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0JC5lYWNoKGNvbHVtbi5hdHRyLCBmdW5jdGlvbihrZXksIHZhbCkge1xyXG5cdFx0XHRcdFx0XHRcdHRoLnNldEF0dHJpYnV0ZShrZXksIHZhbCk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIGFwcGx5IHRleHQgYWxpZ24gdG8gdGhlYWQvdGZvb3RcclxuXHRcdFx0XHRcdGlmICh0eXBlb2YgY29sdW1uLnRleHRBbGlnbiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0dmFyIGFsaWduID0gdHlwZW9mIGRhdGF0YWJsZS50ZXh0QWxpZ25bY29sdW1uLnRleHRBbGlnbl0gIT09ICd1bmRlZmluZWQnID8gZGF0YXRhYmxlLnRleHRBbGlnbltjb2x1bW4udGV4dEFsaWduXSA6ICcnO1xyXG5cdFx0XHRcdFx0XHR1dGlsLmFkZENsYXNzKHRoLCBhbGlnbik7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0UGx1Z2luLnNldHVwRE9NKHRhYmxlUGFydCk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogSW5pdGlhdGUgdG8gZ2V0IHJlbW90ZSBvciBsb2NhbCBkYXRhIHZpYSBhamF4XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRkYXRhUmVuZGVyOiBmdW5jdGlvbihhY3Rpb24pIHtcclxuXHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZSkuc2libGluZ3MoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlcicpLnJlbW92ZUNsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnaW5nLWxvYWRlZCcpO1xyXG5cclxuXHRcdFx0XHR2YXIgYnVpbGRNZXRhID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRkYXRhdGFibGUuZGF0YVNldCA9IGRhdGF0YWJsZS5kYXRhU2V0IHx8IFtdO1xyXG5cdFx0XHRcdFx0UGx1Z2luLmxvY2FsRGF0YVVwZGF0ZSgpO1xyXG5cdFx0XHRcdFx0Ly8gbG9jYWwgcGFnaW5hdGlvbiBtZXRhXHJcblx0XHRcdFx0XHR2YXIgbWV0YSA9IFBsdWdpbi5nZXREYXRhU291cmNlUGFyYW0oJ3BhZ2luYXRpb24nKTtcclxuXHRcdFx0XHRcdGlmIChtZXRhLnBlcnBhZ2UgPT09IDApIHtcclxuXHRcdFx0XHRcdFx0bWV0YS5wZXJwYWdlID0gb3B0aW9ucy5kYXRhLnBhZ2VTaXplIHx8IDEwO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0bWV0YS50b3RhbCA9IGRhdGF0YWJsZS5kYXRhU2V0Lmxlbmd0aDtcclxuXHRcdFx0XHRcdHZhciBzdGFydCA9IE1hdGgubWF4KG1ldGEucGVycGFnZSAqIChtZXRhLnBhZ2UgLSAxKSwgMCk7XHJcblx0XHRcdFx0XHR2YXIgZW5kID0gTWF0aC5taW4oc3RhcnQgKyBtZXRhLnBlcnBhZ2UsIG1ldGEudG90YWwpO1xyXG5cdFx0XHRcdFx0ZGF0YXRhYmxlLmRhdGFTZXQgPSAkKGRhdGF0YWJsZS5kYXRhU2V0KS5zbGljZShzdGFydCwgZW5kKTtcclxuXHRcdFx0XHRcdHJldHVybiBtZXRhO1xyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdHZhciBhZnRlckdldERhdGEgPSBmdW5jdGlvbihyZXN1bHQpIHtcclxuXHRcdFx0XHRcdHZhciBsb2NhbFBhZ2luZ0NhbGxiYWNrID0gZnVuY3Rpb24oY3R4LCBtZXRhKSB7XHJcblx0XHRcdFx0XHRcdGlmICghJChjdHgucGFnZXIpLmhhc0NsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnaW5nLWxvYWRlZCcpKSB7XHJcblx0XHRcdFx0XHRcdFx0JChjdHgucGFnZXIpLnJlbW92ZSgpO1xyXG5cdFx0XHRcdFx0XHRcdGN0eC5pbml0KG1ldGEpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdCQoY3R4LnBhZ2VyKS5vZmYoKS5vbihwZnggKyAnZGF0YXRhYmxlLW9uLWdvdG8tcGFnZScsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdFx0XHQkKGN0eC5wYWdlcikucmVtb3ZlKCk7XHJcblx0XHRcdFx0XHRcdFx0Y3R4LmluaXQobWV0YSk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIHN0YXJ0ID0gTWF0aC5tYXgobWV0YS5wZXJwYWdlICogKG1ldGEucGFnZSAtIDEpLCAwKTtcclxuXHRcdFx0XHRcdFx0dmFyIGVuZCA9IE1hdGgubWluKHN0YXJ0ICsgbWV0YS5wZXJwYWdlLCBtZXRhLnRvdGFsKTtcclxuXHJcblx0XHRcdFx0XHRcdFBsdWdpbi5sb2NhbERhdGFVcGRhdGUoKTtcclxuXHRcdFx0XHRcdFx0ZGF0YXRhYmxlLmRhdGFTZXQgPSAkKGRhdGF0YWJsZS5kYXRhU2V0KS5zbGljZShzdGFydCwgZW5kKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIGluc2VydCBkYXRhIGludG8gdGFibGUgY29udGVudFxyXG5cdFx0XHRcdFx0XHRQbHVnaW4uaW5zZXJ0RGF0YSgpO1xyXG5cdFx0XHRcdFx0fTtcclxuXHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZS53cmFwKS5yZW1vdmVDbGFzcyhwZnggKyAnZGF0YXRhYmxlLWVycm9yJyk7XHJcblx0XHRcdFx0XHQvLyBwYWdpbmF0aW9uIGVuYWJsZWRcclxuXHRcdFx0XHRcdGlmIChvcHRpb25zLnBhZ2luYXRpb24pIHtcclxuXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMuZGF0YS5zZXJ2ZXJQYWdpbmcgJiYgb3B0aW9ucy5kYXRhLnR5cGUgIT09ICdsb2NhbCcpIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBzZXJ2ZXIgcGFnaW5hdGlvblxyXG5cdFx0XHRcdFx0XHRcdHZhciBzZXJ2ZXJNZXRhID0gUGx1Z2luLmdldE9iamVjdCgnbWV0YScsIHJlc3VsdCB8fCBudWxsKTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoc2VydmVyTWV0YSAhPT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0UGx1Z2luLnBhZ2luZ09iamVjdCA9IFBsdWdpbi5wYWdpbmcoc2VydmVyTWV0YSk7XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIG5vIG1ldGEgb2JqZWN0IGZyb20gc2VydmVyIHJlc3BvbnNlLCBmYWxsYmFjayB0byBsb2NhbCBwYWdpbmF0aW9uXHJcblx0XHRcdFx0XHRcdFx0XHRQbHVnaW4ucGFnaW5nT2JqZWN0ID0gUGx1Z2luLnBhZ2luZyhidWlsZE1ldGEoKSwgbG9jYWxQYWdpbmdDYWxsYmFjayk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdC8vIGxvY2FsIHBhZ2luYXRpb24gY2FuIGJlIHVzZWQgYnkgcmVtb3RlIGRhdGEgYWxzb1xyXG5cdFx0XHRcdFx0XHRcdFBsdWdpbi5wYWdpbmdPYmplY3QgPSBQbHVnaW4ucGFnaW5nKGJ1aWxkTWV0YSgpLCBsb2NhbFBhZ2luZ0NhbGxiYWNrKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0Ly8gcGFnaW5hdGlvbiBpcyBkaXNhYmxlZFxyXG5cdFx0XHRcdFx0XHRQbHVnaW4ubG9jYWxEYXRhVXBkYXRlKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQvLyBpbnNlcnQgZGF0YSBpbnRvIHRhYmxlIGNvbnRlbnRcclxuXHRcdFx0XHRcdFBsdWdpbi5pbnNlcnREYXRhKCk7XHJcblx0XHRcdFx0fTtcclxuXHJcblx0XHRcdFx0Ly8gZ2V0IGxvY2FsIGRhdGFzb3VyY2VcclxuXHRcdFx0XHRpZiAob3B0aW9ucy5kYXRhLnR5cGUgPT09ICdsb2NhbCdcclxuXHRcdFx0XHRcdC8vIGZvciByZW1vdGUganNvbiBkYXRhc291cmNlXHJcblx0XHRcdFx0XHQvLyB8fCB0eXBlb2Ygb3B0aW9ucy5kYXRhLnNvdXJjZS5yZWFkID09PSAndW5kZWZpbmVkJyAmJiBkYXRhdGFibGUuZGF0YVNldCAhPT0gbnVsbFxyXG5cdFx0XHRcdFx0Ly8gZm9yIHJlbW90ZSBkYXRhc291cmNlLCBzZXJ2ZXIgc29ydGluZyBpcyBkaXNhYmxlZCBhbmQgZGF0YSBhbHJlYWR5IHJlY2VpdmVkIGZyb20gcmVtb3RlXHJcblx0XHRcdFx0XHR8fCBvcHRpb25zLmRhdGEuc2VydmVyU29ydGluZyA9PT0gZmFsc2UgJiYgYWN0aW9uID09PSAnc29ydCdcclxuXHRcdFx0XHRcdHx8IG9wdGlvbnMuZGF0YS5zZXJ2ZXJGaWx0ZXJpbmcgPT09IGZhbHNlICYmIGFjdGlvbiA9PT0gJ3NlYXJjaCdcclxuXHRcdFx0XHQpIHtcclxuXHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFBsdWdpbi5zZXRBdXRvQ29sdW1ucygpO1xyXG5cdFx0XHRcdFx0XHRhZnRlckdldERhdGEoKTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gZ2V0dGluZyBkYXRhIGZyb20gcmVtb3RlIG9ubHlcclxuXHRcdFx0XHRQbHVnaW4uZ2V0RGF0YSgpLmRvbmUoYWZ0ZXJHZXREYXRhKTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBQcm9jZXNzIGFqYXggZGF0YVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0aW5zZXJ0RGF0YTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0ZGF0YXRhYmxlLmRhdGFTZXQgPSBkYXRhdGFibGUuZGF0YVNldCB8fCBbXTtcclxuXHRcdFx0XHR2YXIgcGFyYW1zID0gUGx1Z2luLmdldERhdGFTb3VyY2VQYXJhbSgpO1xyXG5cclxuXHRcdFx0XHQvLyBnZXQgcm93IGF0dHJpYnV0ZXNcclxuXHRcdFx0XHR2YXIgcGFnaW5hdGlvbiA9IHBhcmFtcy5wYWdpbmF0aW9uO1xyXG5cdFx0XHRcdHZhciBzdGFydCA9IChNYXRoLm1heChwYWdpbmF0aW9uLnBhZ2UsIDEpIC0gMSkgKiBwYWdpbmF0aW9uLnBlcnBhZ2U7XHJcblx0XHRcdFx0dmFyIGVuZCA9IE1hdGgubWluKHBhZ2luYXRpb24ucGFnZSwgcGFnaW5hdGlvbi5wYWdlcykgKiBwYWdpbmF0aW9uLnBlcnBhZ2U7XHJcblx0XHRcdFx0dmFyIHJvd1Byb3BzID0ge307XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBvcHRpb25zLmRhdGEuYXR0ci5yb3dQcm9wcyAhPT0gJ3VuZGVmaW5lZCcgJiYgb3B0aW9ucy5kYXRhLmF0dHIucm93UHJvcHMubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRyb3dQcm9wcyA9IG9wdGlvbnMuZGF0YS5hdHRyLnJvd1Byb3BzLnNsaWNlKHN0YXJ0LCBlbmQpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0dmFyIHRhYmxlQm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3Rib2R5Jyk7XHJcblx0XHRcdFx0dGFibGVCb2R5LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcclxuXHRcdFx0XHR2YXIgY29sTGVuZ3RoID0gb3B0aW9ucy5jb2x1bW5zLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0JC5lYWNoKGRhdGF0YWJsZS5kYXRhU2V0LCBmdW5jdGlvbihyb3dJbmRleCwgcm93KSB7XHJcblx0XHRcdFx0XHR2YXIgdHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xyXG5cdFx0XHRcdFx0dHIuc2V0QXR0cmlidXRlKCdkYXRhLXJvdycsIHJvd0luZGV4KTtcclxuXHRcdFx0XHRcdC8vIGtlZXAgZGF0YSBvYmplY3QgdG8gcm93XHJcblx0XHRcdFx0XHQkKHRyKS5kYXRhKCdvYmonLCByb3cpO1xyXG5cclxuXHRcdFx0XHRcdGlmICh0eXBlb2Ygcm93UHJvcHNbcm93SW5kZXhdICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHQkLmVhY2gocm93UHJvcHNbcm93SW5kZXhdLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0XHR0ci5zZXRBdHRyaWJ1dGUodGhpcy5uYW1lLCB0aGlzLnZhbHVlKTtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0dmFyIGNlbGxJbmRleCA9IDA7XHJcblx0XHRcdFx0XHR2YXIgdGRzID0gW107XHJcblx0XHRcdFx0XHRmb3IgKHZhciBhID0gMDsgYSA8IGNvbExlbmd0aDsgYSArPSAxKSB7XHJcblx0XHRcdFx0XHRcdHZhciBjb2x1bW4gPSBvcHRpb25zLmNvbHVtbnNbYV07XHJcblx0XHRcdFx0XHRcdHZhciBjbGFzc2VzID0gW107XHJcblx0XHRcdFx0XHRcdC8vIGFkZCBzb3J0ZWQgY2xhc3MgdG8gY2VsbHNcclxuXHRcdFx0XHRcdFx0aWYgKFBsdWdpbi5nZXRPYmplY3QoJ3NvcnQuZmllbGQnLCBwYXJhbXMpID09PSBjb2x1bW4uZmllbGQpIHtcclxuXHRcdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2gocGZ4ICsgJ2RhdGF0YWJsZS1jZWxsLXNvcnRlZCcpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBhcHBseSB0ZXh0IGFsaWduXHJcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY29sdW1uLnRleHRBbGlnbiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0XHR2YXIgYWxpZ24gPSB0eXBlb2YgZGF0YXRhYmxlLnRleHRBbGlnbltjb2x1bW4udGV4dEFsaWduXSAhPT0gJ3VuZGVmaW5lZCcgPyBkYXRhdGFibGUudGV4dEFsaWduW2NvbHVtbi50ZXh0QWxpZ25dIDogJyc7XHJcblx0XHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFsaWduKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gdmFyIGNsYXNzQXR0ciA9ICcnO1xyXG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbi5jbGFzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goY29sdW1uLmNsYXNzKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0dmFyIHRkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcclxuXHRcdFx0XHRcdFx0dXRpbC5hZGRDbGFzcyh0ZCwgY2xhc3Nlcy5qb2luKCcgJykpO1xyXG5cdFx0XHRcdFx0XHR0ZC5zZXRBdHRyaWJ1dGUoJ2RhdGEtZmllbGQnLCBjb2x1bW4uZmllbGQpO1xyXG5cdFx0XHRcdFx0XHQvLyBzZXQgZGlzYWJsZSBhdXRvSGlkZSBvciBmb3JjZSBlbmFibGVcclxuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW4uYXV0b0hpZGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKGNvbHVtbi5hdXRvSGlkZSAhPT0gdHJ1ZSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dGQuc2V0QXR0cmlidXRlKCdkYXRhLWF1dG9oaWRlLWRpc2FibGVkJywgY29sdW1uLmF1dG9IaWRlKTtcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0dGQuc2V0QXR0cmlidXRlKCdkYXRhLWF1dG9oaWRlLWVuYWJsZWQnLCBjb2x1bW4uYXV0b0hpZGUpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR0ZC5pbm5lckhUTUwgPSBQbHVnaW4uZ2V0T2JqZWN0KGNvbHVtbi5maWVsZCwgcm93KTtcclxuXHRcdFx0XHRcdFx0dGQuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgUGx1Z2luLmdldE9iamVjdChjb2x1bW4uZmllbGQsIHJvdykpO1xyXG5cdFx0XHRcdFx0XHR0ci5hcHBlbmRDaGlsZCh0ZCk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0dGFibGVCb2R5LmFwcGVuZENoaWxkKHRyKTtcclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0Ly8gZGlzcGxheSBubyByZWNvcmRzIG1lc3NhZ2VcclxuXHRcdFx0XHRpZiAoZGF0YXRhYmxlLmRhdGFTZXQubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdFx0XHR2YXIgZXJyb3JTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG5cdFx0XHRcdFx0dXRpbC5hZGRDbGFzcyhlcnJvclNwYW4sIHBmeCArICdkYXRhdGFibGUtZXJyb3InKTtcclxuXHRcdFx0XHRcdGVycm9yU3Bhbi5pbm5lckhUTUwgPSBQbHVnaW4uZ2V0T3B0aW9uKCd0cmFuc2xhdGUucmVjb3Jkcy5ub1JlY29yZHMnKTtcclxuXHRcdFx0XHRcdHRhYmxlQm9keS5hcHBlbmRDaGlsZChlcnJvclNwYW4pO1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUud3JhcCkuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1lcnJvciAnICsgcGZ4ICsgJ2RhdGF0YWJsZS1sb2FkZWQnKTtcclxuXHRcdFx0XHRcdFBsdWdpbi5zcGlubmVyQ2FsbGJhY2soZmFsc2UpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gcmVwbGFjZSBleGlzdGluZyB0YWJsZSBib2R5XHJcblx0XHRcdFx0JChkYXRhdGFibGUudGFibGVCb2R5KS5yZXBsYWNlV2l0aCh0YWJsZUJvZHkpO1xyXG5cdFx0XHRcdGRhdGF0YWJsZS50YWJsZUJvZHkgPSB0YWJsZUJvZHk7XHJcblxyXG5cdFx0XHRcdC8vIGxheW91dCB1cGRhdGVcclxuXHRcdFx0XHRQbHVnaW4uc2V0dXBET00oZGF0YXRhYmxlLnRhYmxlKTtcclxuXHRcdFx0XHRQbHVnaW4uc2V0dXBDZWxsRmllbGQoW2RhdGF0YWJsZS50YWJsZUJvZHldKTtcclxuXHRcdFx0XHRQbHVnaW4uc2V0dXBUZW1wbGF0ZUNlbGwoZGF0YXRhYmxlLnRhYmxlQm9keSk7XHJcblx0XHRcdFx0UGx1Z2luLmxheW91dFVwZGF0ZSgpO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0dXBkYXRlVGFibGVDb21wb25lbnRzOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRkYXRhdGFibGUudGFibGVIZWFkID0gJChkYXRhdGFibGUudGFibGUpLmNoaWxkcmVuKCd0aGVhZCcpLmdldCgwKTtcclxuXHRcdFx0XHRkYXRhdGFibGUudGFibGVCb2R5ID0gJChkYXRhdGFibGUudGFibGUpLmNoaWxkcmVuKCd0Ym9keScpLmdldCgwKTtcclxuXHRcdFx0XHRkYXRhdGFibGUudGFibGVGb290ID0gJChkYXRhdGFibGUudGFibGUpLmNoaWxkcmVuKCd0Zm9vdCcpLmdldCgwKTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBDYWxsIGFqYXggZm9yIHJhdyBKU09OIGRhdGFcclxuXHRcdFx0ICovXHJcblx0XHRcdGdldERhdGE6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdC8vIFBsdWdpbi5zcGlubmVyQ2FsbGJhY2sodHJ1ZSk7XHJcblxyXG5cdFx0XHRcdHZhciBhamF4UGFyYW1zID0ge1xyXG5cdFx0XHRcdFx0ZGF0YVR5cGU6ICdqc29uJyxcclxuXHRcdFx0XHRcdG1ldGhvZDogJ1BPU1QnLFxyXG5cdFx0XHRcdFx0ZGF0YToge30sXHJcblx0XHRcdFx0XHR0aW1lb3V0OiBQbHVnaW4uZ2V0T3B0aW9uKCdkYXRhLnNvdXJjZS5yZWFkLnRpbWVvdXQnKSB8fCAzMDAwMCxcclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHRpZiAob3B0aW9ucy5kYXRhLnR5cGUgPT09ICdsb2NhbCcpIHtcclxuXHRcdFx0XHRcdGFqYXhQYXJhbXMudXJsID0gb3B0aW9ucy5kYXRhLnNvdXJjZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmIChvcHRpb25zLmRhdGEudHlwZSA9PT0gJ3JlbW90ZScpIHtcclxuXHRcdFx0XHRcdHZhciBkYXRhID0gUGx1Z2luLmdldERhdGFTb3VyY2VQYXJhbSgpO1xyXG5cdFx0XHRcdFx0Ly8gcmVtb3ZlIGlmIHNlcnZlciBwYXJhbXMgaXMgbm90IGVuYWJsZWRcclxuXHRcdFx0XHRcdGlmICghUGx1Z2luLmdldE9wdGlvbignZGF0YS5zZXJ2ZXJQYWdpbmcnKSkge1xyXG5cdFx0XHRcdFx0XHRkZWxldGUgZGF0YVsncGFnaW5hdGlvbiddO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKCFQbHVnaW4uZ2V0T3B0aW9uKCdkYXRhLnNlcnZlclNvcnRpbmcnKSkge1xyXG5cdFx0XHRcdFx0XHRkZWxldGUgZGF0YVsnc29ydCddO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0YWpheFBhcmFtcy5kYXRhID0gJC5leHRlbmQoe30sIGFqYXhQYXJhbXMuZGF0YSwgUGx1Z2luLmdldE9wdGlvbignZGF0YS5zb3VyY2UucmVhZC5wYXJhbXMnKSwgZGF0YSk7XHJcblx0XHRcdFx0XHRhamF4UGFyYW1zID0gJC5leHRlbmQoe30sIGFqYXhQYXJhbXMsIFBsdWdpbi5nZXRPcHRpb24oJ2RhdGEuc291cmNlLnJlYWQnKSk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBhamF4UGFyYW1zLnVybCAhPT0gJ3N0cmluZycpIGFqYXhQYXJhbXMudXJsID0gUGx1Z2luLmdldE9wdGlvbignZGF0YS5zb3VyY2UucmVhZCcpO1xyXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBhamF4UGFyYW1zLnVybCAhPT0gJ3N0cmluZycpIGFqYXhQYXJhbXMudXJsID0gUGx1Z2luLmdldE9wdGlvbignZGF0YS5zb3VyY2UnKTtcclxuXHRcdFx0XHRcdC8vIGFqYXhQYXJhbXMuZGF0YSA9ICQuZXh0ZW5kKGFqYXhQYXJhbXMuZGF0YSwgZGF0YS5wYWdpbmF0aW9uKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiAkLmFqYXgoYWpheFBhcmFtcykuZG9uZShmdW5jdGlvbihyZXNwb25zZSwgdGV4dFN0YXR1cywganFYSFIpIHtcclxuXHRcdFx0XHRcdGRhdGF0YWJsZS5sYXN0UmVzcG9uc2UgPSByZXNwb25zZTtcclxuXHRcdFx0XHRcdC8vIGV4dGVuZGlibGUgZGF0YSBtYXAgY2FsbGJhY2sgZm9yIGN1c3RvbSBkYXRhc291cmNlXHJcblx0XHRcdFx0XHRkYXRhdGFibGUuZGF0YVNldCA9IGRhdGF0YWJsZS5vcmlnaW5hbERhdGFTZXQgPSBQbHVnaW4uZGF0YU1hcENhbGxiYWNrKHJlc3BvbnNlKTtcclxuXHRcdFx0XHRcdFBsdWdpbi5zZXRBdXRvQ29sdW1ucygpO1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUpLnRyaWdnZXIocGZ4ICsgJ2RhdGF0YWJsZS1vbi1hamF4LWRvbmUnLCBbZGF0YXRhYmxlLmRhdGFTZXRdKTtcclxuXHRcdFx0XHR9KS5mYWlsKGZ1bmN0aW9uKGpxWEhSLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikge1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUpLnRyaWdnZXIocGZ4ICsgJ2RhdGF0YWJsZS1vbi1hamF4LWZhaWwnLCBbanFYSFJdKTtcclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlQm9keSkuaHRtbCgkKCc8c3Bhbi8+JykuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1lcnJvcicpLmh0bWwoUGx1Z2luLmdldE9wdGlvbigndHJhbnNsYXRlLnJlY29yZHMubm9SZWNvcmRzJykpKTtcclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlLndyYXApLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtZXJyb3IgJyArIHBmeCArICdkYXRhdGFibGUtbG9hZGVkJyk7XHJcblx0XHRcdFx0XHRQbHVnaW4uc3Bpbm5lckNhbGxiYWNrKGZhbHNlKTtcclxuXHRcdFx0XHR9KS5hbHdheXMoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogUGFnaW5hdGlvbiBvYmplY3RcclxuXHRcdFx0ICogQHBhcmFtIG1ldGEgaWYgbnVsbCwgbG9jYWwgcGFnaW5hdGlvbiwgb3RoZXJ3aXNlIHJlbW90ZVxyXG5cdFx0XHQgKiAgICAgcGFnaW5hdGlvblxyXG5cdFx0XHQgKiBAcGFyYW0gY2FsbGJhY2sgZm9yIHVwZGF0ZSBkYXRhIHdoZW4gbmF2aWdhdGluZyBwYWdlXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRwYWdpbmc6IGZ1bmN0aW9uKG1ldGEsIGNhbGxiYWNrKSB7XHJcblx0XHRcdFx0dmFyIHBnID0ge1xyXG5cdFx0XHRcdFx0bWV0YTogbnVsbCxcclxuXHRcdFx0XHRcdHBhZ2VyOiBudWxsLFxyXG5cdFx0XHRcdFx0cGFnaW5hdGVFdmVudDogbnVsbCxcclxuXHRcdFx0XHRcdHBhZ2VyTGF5b3V0OiB7cGFnaW5hdGlvbjogbnVsbCwgaW5mbzogbnVsbH0sXHJcblx0XHRcdFx0XHRjYWxsYmFjazogbnVsbCxcclxuXHRcdFx0XHRcdGluaXQ6IGZ1bmN0aW9uKG1ldGEpIHtcclxuXHRcdFx0XHRcdFx0cGcubWV0YSA9IG1ldGE7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBwYXJzZSBwYWdpbmF0aW9uIG1ldGEgdG8gaW50ZWdlclxyXG5cdFx0XHRcdFx0XHRwZy5tZXRhLnBhZ2UgPSBwYXJzZUludChwZy5tZXRhLnBhZ2UpO1xyXG5cdFx0XHRcdFx0XHRwZy5tZXRhLnBhZ2VzID0gcGFyc2VJbnQocGcubWV0YS5wYWdlcyk7XHJcblx0XHRcdFx0XHRcdHBnLm1ldGEucGVycGFnZSA9IHBhcnNlSW50KHBnLm1ldGEucGVycGFnZSk7XHJcblx0XHRcdFx0XHRcdHBnLm1ldGEudG90YWwgPSBwYXJzZUludChwZy5tZXRhLnRvdGFsKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIGFsd2F5cyByZWNvdW50IHRvdGFsIHBhZ2VzXHJcblx0XHRcdFx0XHRcdHBnLm1ldGEucGFnZXMgPSBNYXRoLm1heChNYXRoLmNlaWwocGcubWV0YS50b3RhbCAvIHBnLm1ldGEucGVycGFnZSksIDEpO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gY3VycmVudCBwYWdlIG11c3QgYmUgbm90IG92ZXIgdGhhbiB0b3RhbCBwYWdlc1xyXG5cdFx0XHRcdFx0XHRpZiAocGcubWV0YS5wYWdlID4gcGcubWV0YS5wYWdlcykgcGcubWV0YS5wYWdlID0gcGcubWV0YS5wYWdlcztcclxuXHJcblx0XHRcdFx0XHRcdC8vIHNldCB1bmlxdWUgZXZlbnQgbmFtZSBiZXR3ZWVuIHRhYmxlc1xyXG5cdFx0XHRcdFx0XHRwZy5wYWdpbmF0ZUV2ZW50ID0gUGx1Z2luLmdldFRhYmxlUHJlZml4KCdwYWdpbmcnKTtcclxuXHJcblx0XHRcdFx0XHRcdHBnLnBhZ2VyID0gJChkYXRhdGFibGUudGFibGUpLnNpYmxpbmdzKCcuJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXInKTtcclxuXHRcdFx0XHRcdFx0aWYgKCQocGcucGFnZXIpLmhhc0NsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnaW5nLWxvYWRlZCcpKSByZXR1cm47XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBpZiBjbGFzcyAuJytwZngrJ2RhdGF0YWJsZS1wYWdpbmctbG9hZGVkIG5vdCBleGlzdCwgcmVjcmVhdGUgcGFnaW5hdGlvblxyXG5cdFx0XHRcdFx0XHQkKHBnLnBhZ2VyKS5yZW1vdmUoKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIGlmIG5vIHBhZ2VzIGF2YWlsYWJsZVxyXG5cdFx0XHRcdFx0XHRpZiAocGcubWV0YS5wYWdlcyA9PT0gMCkgcmV0dXJuO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gdXBkYXRlIGRhdGFzb3VyY2UgcGFyYW1zXHJcblx0XHRcdFx0XHRcdFBsdWdpbi5zZXREYXRhU291cmNlUGFyYW0oJ3BhZ2luYXRpb24nLCB7XHJcblx0XHRcdFx0XHRcdFx0cGFnZTogcGcubWV0YS5wYWdlLFxyXG5cdFx0XHRcdFx0XHRcdHBhZ2VzOiBwZy5tZXRhLnBhZ2VzLFxyXG5cdFx0XHRcdFx0XHRcdHBlcnBhZ2U6IHBnLm1ldGEucGVycGFnZSxcclxuXHRcdFx0XHRcdFx0XHR0b3RhbDogcGcubWV0YS50b3RhbCxcclxuXHRcdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBkZWZhdWx0IGNhbGxiYWNrIGZ1bmN0aW9uLCBjb250YWlucyByZW1vdGUgcGFnaW5hdGlvbiBoYW5kbGVyXHJcblx0XHRcdFx0XHRcdHBnLmNhbGxiYWNrID0gcGcuc2VydmVyQ2FsbGJhY2s7XHJcblx0XHRcdFx0XHRcdC8vIGN1c3RvbSBjYWxsYmFjayBmdW5jdGlvblxyXG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBwZy5jYWxsYmFjayA9IGNhbGxiYWNrO1xyXG5cclxuXHRcdFx0XHRcdFx0cGcuYWRkUGFnaW5hdGVFdmVudCgpO1xyXG5cdFx0XHRcdFx0XHRwZy5wb3B1bGF0ZSgpO1xyXG5cclxuXHRcdFx0XHRcdFx0cGcubWV0YS5wYWdlID0gTWF0aC5tYXgocGcubWV0YS5wYWdlIHx8IDEsIHBnLm1ldGEucGFnZSk7XHJcblxyXG5cdFx0XHRcdFx0XHQkKGRhdGF0YWJsZSkudHJpZ2dlcihwZy5wYWdpbmF0ZUV2ZW50LCBwZy5tZXRhKTtcclxuXHJcblx0XHRcdFx0XHRcdHBnLnBhZ2luZ0JyZWFrcG9pbnQuY2FsbCgpO1xyXG5cdFx0XHRcdFx0XHQkKHdpbmRvdykucmVzaXplKHBnLnBhZ2luZ0JyZWFrcG9pbnQpO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdHNlcnZlckNhbGxiYWNrOiBmdW5jdGlvbihjdHgsIG1ldGEpIHtcclxuXHRcdFx0XHRcdFx0UGx1Z2luLmRhdGFSZW5kZXIoKTtcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRwb3B1bGF0ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdGRhdGF0YWJsZS5kYXRhU2V0ID0gZGF0YXRhYmxlLmRhdGFTZXQgfHwgW107XHJcblx0XHRcdFx0XHRcdC8vIG5vIHJlY29yZHMgYXZhaWxhYmxlXHJcblx0XHRcdFx0XHRcdGlmIChkYXRhdGFibGUuZGF0YVNldC5sZW5ndGggPT09IDApIHJldHVybjtcclxuXHJcblx0XHRcdFx0XHRcdHZhciBpY29ucyA9IFBsdWdpbi5nZXRPcHRpb24oJ2xheW91dC5pY29ucy5wYWdpbmF0aW9uJyk7XHJcblx0XHRcdFx0XHRcdHZhciB0aXRsZSA9IFBsdWdpbi5nZXRPcHRpb24oJ3RyYW5zbGF0ZS50b29sYmFyLnBhZ2luYXRpb24uaXRlbXMuZGVmYXVsdCcpO1xyXG5cdFx0XHRcdFx0XHQvLyBwYWdlciByb290IGVsZW1lbnRcclxuXHRcdFx0XHRcdFx0cGcucGFnZXIgPSAkKCc8ZGl2Lz4nKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXBhZ2VyICcgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2luZy1sb2FkZWQnKTtcclxuXHRcdFx0XHRcdFx0Ly8gbnVtYmVyaW5nIGxpbmtzXHJcblx0XHRcdFx0XHRcdHZhciBwYWdlck51bWJlciA9ICQoJzx1bC8+JykuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1uYXYgbXktMiBtYi1zbS0wJyk7XHJcblx0XHRcdFx0XHRcdHBnLnBhZ2VyTGF5b3V0WydwYWdpbmF0aW9uJ10gPSBwYWdlck51bWJlcjtcclxuXHJcblx0XHRcdFx0XHRcdC8vIHBhZ2VyIGZpcnN0L3ByZXZpb3VzIGJ1dHRvblxyXG5cdFx0XHRcdFx0XHQkKCc8bGkvPicpLlxyXG5cdFx0XHRcdFx0XHRcdGFwcGVuZCgkKCc8YS8+JykuXHJcblx0XHRcdFx0XHRcdFx0XHRhdHRyKCd0aXRsZScsIHRpdGxlLmZpcnN0KS5cclxuXHRcdFx0XHRcdFx0XHRcdGFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluayAnICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLWZpcnN0JykuXHJcblx0XHRcdFx0XHRcdFx0XHRhcHBlbmQoJCgnPGkvPicpLmFkZENsYXNzKGljb25zLmZpcnN0KSkuXHJcblx0XHRcdFx0XHRcdFx0XHRvbignY2xpY2snLCBwZy5nb3RvTW9yZVBhZ2UpLlxyXG5cdFx0XHRcdFx0XHRcdFx0YXR0cignZGF0YS1wYWdlJywgMSkpLlxyXG5cdFx0XHRcdFx0XHRcdGFwcGVuZFRvKHBhZ2VyTnVtYmVyKTtcclxuXHRcdFx0XHRcdFx0JCgnPGxpLz4nKS5cclxuXHRcdFx0XHRcdFx0XHRhcHBlbmQoJCgnPGEvPicpLlxyXG5cdFx0XHRcdFx0XHRcdFx0YXR0cigndGl0bGUnLCB0aXRsZS5wcmV2KS5cclxuXHRcdFx0XHRcdFx0XHRcdGFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluayAnICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLXByZXYnKS5cclxuXHRcdFx0XHRcdFx0XHRcdGFwcGVuZCgkKCc8aS8+JykuYWRkQ2xhc3MoaWNvbnMucHJldikpLlxyXG5cdFx0XHRcdFx0XHRcdFx0b24oJ2NsaWNrJywgcGcuZ290b01vcmVQYWdlKSkuXHJcblx0XHRcdFx0XHRcdFx0YXBwZW5kVG8ocGFnZXJOdW1iZXIpO1xyXG5cclxuXHRcdFx0XHRcdFx0JCgnPGxpLz4nKS5hcHBlbmQoJCgnPGlucHV0Lz4nKS5hdHRyKCd0eXBlJywgJ3RleHQnKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWlucHV0IGZvcm0tY29udHJvbCcpLmF0dHIoJ3RpdGxlJywgdGl0bGUuaW5wdXQpLm9uKCdrZXl1cCcsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdC8vIG9uIGtleXVwIHVwZGF0ZSBbZGF0YS1wYWdlXVxyXG5cdFx0XHRcdFx0XHRcdCQodGhpcykuYXR0cignZGF0YS1wYWdlJywgTWF0aC5hYnMoJCh0aGlzKS52YWwoKSkpO1xyXG5cdFx0XHRcdFx0XHR9KS5vbigna2V5cHJlc3MnLCBmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gb24ga2V5cHJlc3NlZCBlbnRlciBidXR0b25cclxuXHRcdFx0XHRcdFx0XHRpZiAoZS53aGljaCA9PT0gMTMpIHBnLmdvdG9Nb3JlUGFnZShlKTtcclxuXHRcdFx0XHRcdFx0fSkpLmFwcGVuZFRvKHBhZ2VyTnVtYmVyKTtcclxuXHJcblx0XHRcdFx0XHRcdHZhciBwYWdlc051bWJlciA9IFBsdWdpbi5nZXRPcHRpb24oJ3Rvb2xiYXIuaXRlbXMucGFnaW5hdGlvbi5wYWdlcy5kZXNrdG9wLnBhZ2VzTnVtYmVyJyk7XHJcblx0XHRcdFx0XHRcdHZhciBlbmQgPSBNYXRoLmNlaWwocGcubWV0YS5wYWdlIC8gcGFnZXNOdW1iZXIpICogcGFnZXNOdW1iZXI7XHJcblx0XHRcdFx0XHRcdHZhciBzdGFydCA9IGVuZCAtIHBhZ2VzTnVtYmVyO1xyXG5cdFx0XHRcdFx0XHRpZiAoZW5kID4gcGcubWV0YS5wYWdlcykge1xyXG5cdFx0XHRcdFx0XHRcdGVuZCA9IHBnLm1ldGEucGFnZXM7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIGtlZXAgcGFnaW5hdGlvbiAxIGlmIHRoZXJlIGlzIG5vIHJlY29yZHNcclxuXHRcdFx0XHRcdFx0aWYgKHN0YXJ0IDwgMCkge1xyXG5cdFx0XHRcdFx0XHRcdHN0YXJ0ID0gMDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Zm9yICh2YXIgeCA9IHN0YXJ0OyB4IDwgKGVuZCB8fCAxKTsgeCsrKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIHBhZ2VOdW1iZXIgPSB4ICsgMTtcclxuXHRcdFx0XHRcdFx0XHQkKCc8bGkvPicpLlxyXG5cdFx0XHRcdFx0XHRcdFx0YXBwZW5kKCQoJzxhLz4nKS5cclxuXHRcdFx0XHRcdFx0XHRcdFx0YWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rICcgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWxpbmstbnVtYmVyJykuXHJcblx0XHRcdFx0XHRcdFx0XHRcdHRleHQocGFnZU51bWJlcikuXHJcblx0XHRcdFx0XHRcdFx0XHRcdGF0dHIoJ2RhdGEtcGFnZScsIHBhZ2VOdW1iZXIpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRhdHRyKCd0aXRsZScsIHBhZ2VOdW1iZXIpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRvbignY2xpY2snLCBwZy5nb3RvUGFnZSkpLlxyXG5cdFx0XHRcdFx0XHRcdFx0YXBwZW5kVG8ocGFnZXJOdW1iZXIpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBwYWdlciBuZXh0L2xhc3QgYnV0dG9uXHJcblx0XHRcdFx0XHRcdCQoJzxsaS8+JykuXHJcblx0XHRcdFx0XHRcdFx0YXBwZW5kKCQoJzxhLz4nKS5cclxuXHRcdFx0XHRcdFx0XHRcdGF0dHIoJ3RpdGxlJywgdGl0bGUubmV4dCkuXHJcblx0XHRcdFx0XHRcdFx0XHRhZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWxpbmsgJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1uZXh0JykuXHJcblx0XHRcdFx0XHRcdFx0XHRhcHBlbmQoJCgnPGkvPicpLmFkZENsYXNzKGljb25zLm5leHQpKS5cclxuXHRcdFx0XHRcdFx0XHRcdG9uKCdjbGljaycsIHBnLmdvdG9Nb3JlUGFnZSkpLlxyXG5cdFx0XHRcdFx0XHRcdGFwcGVuZFRvKHBhZ2VyTnVtYmVyKTtcclxuXHRcdFx0XHRcdFx0JCgnPGxpLz4nKS5cclxuXHRcdFx0XHRcdFx0XHRhcHBlbmQoJCgnPGEvPicpLlxyXG5cdFx0XHRcdFx0XHRcdFx0YXR0cigndGl0bGUnLCB0aXRsZS5sYXN0KS5cclxuXHRcdFx0XHRcdFx0XHRcdGFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluayAnICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLWxhc3QnKS5cclxuXHRcdFx0XHRcdFx0XHRcdGFwcGVuZCgkKCc8aS8+JykuYWRkQ2xhc3MoaWNvbnMubGFzdCkpLlxyXG5cdFx0XHRcdFx0XHRcdFx0b24oJ2NsaWNrJywgcGcuZ290b01vcmVQYWdlKS5cclxuXHRcdFx0XHRcdFx0XHRcdGF0dHIoJ2RhdGEtcGFnZScsIHBnLm1ldGEucGFnZXMpKS5cclxuXHRcdFx0XHRcdFx0XHRhcHBlbmRUbyhwYWdlck51bWJlcik7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBwYWdlIGluZm9cclxuXHRcdFx0XHRcdFx0aWYgKFBsdWdpbi5nZXRPcHRpb24oJ3Rvb2xiYXIuaXRlbXMuaW5mbycpKSB7XHJcblx0XHRcdFx0XHRcdFx0cGcucGFnZXJMYXlvdXRbJ2luZm8nXSA9ICQoJzxkaXYvPicpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnZXItaW5mbyBteS0yIG1iLXNtLTAnKS5hcHBlbmQoJCgnPHNwYW4vPicpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnZXItZGV0YWlsJykpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQkLmVhY2goUGx1Z2luLmdldE9wdGlvbigndG9vbGJhci5sYXlvdXQnKSwgZnVuY3Rpb24oaSwgbGF5b3V0KSB7XHJcblx0XHRcdFx0XHRcdFx0JChwZy5wYWdlckxheW91dFtsYXlvdXRdKS5hcHBlbmRUbyhwZy5wYWdlcik7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gcGFnZSBzaXplIHNlbGVjdFxyXG5cdFx0XHRcdFx0XHR2YXIgcGFnZVNpemVTZWxlY3QgPSAkKCc8c2VsZWN0Lz4nKS5cclxuXHRcdFx0XHRcdFx0XHRhZGRDbGFzcygnc2VsZWN0cGlja2VyICcgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLXNpemUnKS5cclxuXHRcdFx0XHRcdFx0XHRhdHRyKCd0aXRsZScsIFBsdWdpbi5nZXRPcHRpb24oJ3RyYW5zbGF0ZS50b29sYmFyLnBhZ2luYXRpb24uaXRlbXMuZGVmYXVsdC5zZWxlY3QnKSkuXHJcblx0XHRcdFx0XHRcdFx0YXR0cignZGF0YS13aWR0aCcsICc2MHB4JykuXHJcblx0XHRcdFx0XHRcdFx0YXR0cignZGF0YS1jb250YWluZXInLCAnYm9keScpLlxyXG5cdFx0XHRcdFx0XHRcdHZhbChwZy5tZXRhLnBlcnBhZ2UpLlxyXG5cdFx0XHRcdFx0XHRcdG9uKCdjaGFuZ2UnLCBwZy51cGRhdGVQZXJwYWdlKS5cclxuXHRcdFx0XHRcdFx0XHRwcmVwZW5kVG8ocGcucGFnZXJMYXlvdXRbJ2luZm8nXSk7XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgcGFnZVNpemVzID0gUGx1Z2luLmdldE9wdGlvbigndG9vbGJhci5pdGVtcy5wYWdpbmF0aW9uLnBhZ2VTaXplU2VsZWN0Jyk7XHJcblx0XHRcdFx0XHRcdC8vIGRlZmF1bHQgdmFsdWUgaGVyZSwgdG8gZml4IG92ZXJyaWRlIG9wdGlvbiBieSB1c2VyXHJcblx0XHRcdFx0XHRcdGlmIChwYWdlU2l6ZXMubGVuZ3RoID09IDApIHBhZ2VTaXplcyA9IFs1LCAxMCwgMjAsIDMwLCA1MCwgMTAwXTtcclxuXHRcdFx0XHRcdFx0JC5lYWNoKHBhZ2VTaXplcywgZnVuY3Rpb24oaSwgc2l6ZSkge1xyXG5cdFx0XHRcdFx0XHRcdHZhciBkaXNwbGF5ID0gc2l6ZTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoc2l6ZSA9PT0gLTEpIGRpc3BsYXkgPSBQbHVnaW4uZ2V0T3B0aW9uKCd0cmFuc2xhdGUudG9vbGJhci5wYWdpbmF0aW9uLml0ZW1zLmRlZmF1bHQuYWxsJyk7XHJcblx0XHRcdFx0XHRcdFx0JCgnPG9wdGlvbi8+JykuYXR0cigndmFsdWUnLCBzaXplKS5odG1sKGRpc3BsYXkpLmFwcGVuZFRvKHBhZ2VTaXplU2VsZWN0KTtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBpbml0IHNlbGVjdHBpY2tlciB0byBkcm9wZG93blxyXG5cdFx0XHRcdFx0XHQkKGRhdGF0YWJsZSkucmVhZHkoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0JCgnLnNlbGVjdHBpY2tlcicpLlxyXG5cdFx0XHRcdFx0XHRcdFx0c2VsZWN0cGlja2VyKCkuXHJcblx0XHRcdFx0XHRcdFx0XHRvbignaGlkZS5icy5zZWxlY3QnLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gZml4IGRyb3B1cCBhcnJvdyBpY29uIG9uIGhpZGVcclxuXHRcdFx0XHRcdFx0XHRcdFx0JCh0aGlzKS5jbG9zZXN0KCcuYm9vdHN0cmFwLXNlbGVjdCcpLnJlbW92ZUNsYXNzKCdkcm9wdXAnKTtcclxuXHRcdFx0XHRcdFx0XHRcdH0pLlxyXG5cdFx0XHRcdFx0XHRcdFx0c2libGluZ3MoJy5kcm9wZG93bi10b2dnbGUnKS5cclxuXHRcdFx0XHRcdFx0XHRcdGF0dHIoJ3RpdGxlJywgUGx1Z2luLmdldE9wdGlvbigndHJhbnNsYXRlLnRvb2xiYXIucGFnaW5hdGlvbi5pdGVtcy5kZWZhdWx0LnNlbGVjdCcpKTtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRwZy5wYXN0ZSgpO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdHBhc3RlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0Ly8gaW5zZXJ0IHBhZ2luYXRpb24gYmFzZWQgb24gcGxhY2VtZW50IHBvc2l0aW9uLCB0b3B8Ym90dG9tXHJcblx0XHRcdFx0XHRcdCQuZWFjaCgkLnVuaXF1ZShQbHVnaW4uZ2V0T3B0aW9uKCd0b29sYmFyLnBsYWNlbWVudCcpKSxcclxuXHRcdFx0XHRcdFx0XHRmdW5jdGlvbihpLCBwb3NpdGlvbikge1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHBvc2l0aW9uID09PSAnYm90dG9tJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQkKHBnLnBhZ2VyKS5jbG9uZSh0cnVlKS5pbnNlcnRBZnRlcihkYXRhdGFibGUudGFibGUpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHBvc2l0aW9uID09PSAndG9wJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBwYWdlciB0b3AgbmVlZCBzb21lIGV4dHJhIHNwYWNlXHJcblx0XHRcdFx0XHRcdFx0XHRcdCQocGcucGFnZXIpLmNsb25lKHRydWUpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnZXItdG9wJykuaW5zZXJ0QmVmb3JlKGRhdGF0YWJsZS50YWJsZSk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0Z290b01vcmVQYWdlOiBmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdFx0Ly8gJCh0aGlzKSBpcyBhIGxpbmsgb2YgLicrcGZ4KydkYXRhdGFibGUtcGFnZXItbGlua1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCQodGhpcykuYXR0cignZGlzYWJsZWQnKSA9PT0gJ2Rpc2FibGVkJykgcmV0dXJuIGZhbHNlO1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIHBhZ2UgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtcGFnZScpO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gZXZlbnQgZnJvbSB0ZXh0IGlucHV0XHJcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgcGFnZSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0XHRwYWdlID0gJChlLnRhcmdldCkuYXR0cignZGF0YS1wYWdlJyk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdHBnLm9wZW5QYWdlKHBhcnNlSW50KHBhZ2UpKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdGdvdG9QYWdlOiBmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdFx0Ly8gcHJldmVudCBmcm9tIGNsaWNrIHNhbWUgcGFnZSBudW1iZXJcclxuXHRcdFx0XHRcdFx0aWYgKCQodGhpcykuaGFzQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLWFjdGl2ZScpKSByZXR1cm47XHJcblxyXG5cdFx0XHRcdFx0XHRwZy5vcGVuUGFnZShwYXJzZUludCgkKHRoaXMpLmRhdGEoJ3BhZ2UnKSkpO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdG9wZW5QYWdlOiBmdW5jdGlvbihwYWdlKSB7XHJcblx0XHRcdFx0XHRcdC8vIGN1cnJlbnRQYWdlIGlzIDEtYmFzZWQgaW5kZXhcclxuXHRcdFx0XHRcdFx0cGcubWV0YS5wYWdlID0gcGFyc2VJbnQocGFnZSk7XHJcblxyXG5cdFx0XHRcdFx0XHQkKGRhdGF0YWJsZSkudHJpZ2dlcihwZy5wYWdpbmF0ZUV2ZW50LCBwZy5tZXRhKTtcclxuXHRcdFx0XHRcdFx0cGcuY2FsbGJhY2socGcsIHBnLm1ldGEpO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gdXBkYXRlIHBhZ2UgY2FsbGJhY2sgZnVuY3Rpb25cclxuXHRcdFx0XHRcdFx0JChwZy5wYWdlcikudHJpZ2dlcihwZnggKyAnZGF0YXRhYmxlLW9uLWdvdG8tcGFnZScsIHBnLm1ldGEpO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdHVwZGF0ZVBlcnBhZ2U6IGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdFx0XHQvLyBpZiAoUGx1Z2luLmdldE9wdGlvbignbGF5b3V0LmhlaWdodCcpID09PSBudWxsKSB7XHJcblx0XHRcdFx0XHRcdC8vIGZpeCB3aGl0ZSBzcGFjZSwgd2hlbiBwZXJwYWdlIGlzIHNldCBmcm9tIG1hbnkgcmVjb3JkcyB0byBsZXNzIHJlY29yZHNcclxuXHRcdFx0XHRcdFx0Ly8gJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe3Njcm9sbFRvcDogJChkYXRhdGFibGUpLnBvc2l0aW9uKCkudG9wfSk7XHJcblx0XHRcdFx0XHRcdC8vIH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIGhpZGUgZHJvcGRvd24gYWZ0ZXIgc2VsZWN0XHJcblx0XHRcdFx0XHRcdCQodGhpcykuc2VsZWN0cGlja2VyKCd0b2dnbGUnKTtcclxuXHJcblx0XHRcdFx0XHRcdHBnLnBhZ2VyID0gJChkYXRhdGFibGUudGFibGUpLnNpYmxpbmdzKCcuJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXInKS5yZW1vdmVDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXBhZ2luZy1sb2FkZWQnKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIG9uIGNoYW5nZSBzZWxlY3QgcGFnZSBzaXplXHJcblx0XHRcdFx0XHRcdGlmIChlLm9yaWdpbmFsRXZlbnQpIHtcclxuXHRcdFx0XHRcdFx0XHRwZy5tZXRhLnBlcnBhZ2UgPSBwYXJzZUludCgkKHRoaXMpLnZhbCgpKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0JChwZy5wYWdlcikuZmluZCgnc2VsZWN0LicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLXNpemUnKS52YWwocGcubWV0YS5wZXJwYWdlKS5hdHRyKCdkYXRhLXNlbGVjdGVkJywgcGcubWV0YS5wZXJwYWdlKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIHVwZGF0ZSBkYXRhc291cmNlIHBhcmFtc1xyXG5cdFx0XHRcdFx0XHRQbHVnaW4uc2V0RGF0YVNvdXJjZVBhcmFtKCdwYWdpbmF0aW9uJywge1xyXG5cdFx0XHRcdFx0XHRcdHBhZ2U6IHBnLm1ldGEucGFnZSxcclxuXHRcdFx0XHRcdFx0XHRwYWdlczogcGcubWV0YS5wYWdlcyxcclxuXHRcdFx0XHRcdFx0XHRwZXJwYWdlOiBwZy5tZXRhLnBlcnBhZ2UsXHJcblx0XHRcdFx0XHRcdFx0dG90YWw6IHBnLm1ldGEudG90YWwsXHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gdXBkYXRlIHBhZ2UgY2FsbGJhY2sgZnVuY3Rpb25cclxuXHRcdFx0XHRcdFx0JChwZy5wYWdlcikudHJpZ2dlcihwZnggKyAnZGF0YXRhYmxlLW9uLXVwZGF0ZS1wZXJwYWdlJywgcGcubWV0YSk7XHJcblx0XHRcdFx0XHRcdCQoZGF0YXRhYmxlKS50cmlnZ2VyKHBnLnBhZ2luYXRlRXZlbnQsIHBnLm1ldGEpO1xyXG5cdFx0XHRcdFx0XHRwZy5jYWxsYmFjayhwZywgcGcubWV0YSk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyB1cGRhdGUgcGFnaW5hdGlvbiBpbmZvXHJcblx0XHRcdFx0XHRcdHBnLnVwZGF0ZUluZm8uY2FsbCgpO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdGFkZFBhZ2luYXRlRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdFx0Ly8gcGFnaW5hdGlvbiBldmVudFxyXG5cdFx0XHRcdFx0XHQkKGRhdGF0YWJsZSkub2ZmKHBnLnBhZ2luYXRlRXZlbnQpLm9uKHBnLnBhZ2luYXRlRXZlbnQsIGZ1bmN0aW9uKGUsIG1ldGEpIHtcclxuXHRcdFx0XHRcdFx0XHRQbHVnaW4uc3Bpbm5lckNhbGxiYWNrKHRydWUpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRwZy5wYWdlciA9ICQoZGF0YXRhYmxlLnRhYmxlKS5zaWJsaW5ncygnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyJyk7XHJcblx0XHRcdFx0XHRcdFx0dmFyIHBhZ2VyTnVtYmVyID0gJChwZy5wYWdlcikuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLW5hdicpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBzZXQgc3luYyBhY3RpdmUgcGFnZSBjbGFzc1xyXG5cdFx0XHRcdFx0XHRcdCQocGFnZXJOdW1iZXIpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLWFjdGl2ZScpLnJlbW92ZUNsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1hY3RpdmUnKTtcclxuXHRcdFx0XHRcdFx0XHQkKHBhZ2VyTnVtYmVyKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1udW1iZXJbZGF0YS1wYWdlPVwiJyArIG1ldGEucGFnZSArICdcIl0nKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWxpbmstYWN0aXZlJyk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIHNldCBuZXh0IGFuZCBwcmV2aW91cyBsaW5rIHBhZ2UgbnVtYmVyXHJcblx0XHRcdFx0XHRcdFx0JChwYWdlck51bWJlcikuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWxpbmstcHJldicpLmF0dHIoJ2RhdGEtcGFnZScsIE1hdGgubWF4KG1ldGEucGFnZSAtIDEsIDEpKTtcclxuXHRcdFx0XHRcdFx0XHQkKHBhZ2VyTnVtYmVyKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1uZXh0JykuYXR0cignZGF0YS1wYWdlJywgTWF0aC5taW4obWV0YS5wYWdlICsgMSwgbWV0YS5wYWdlcykpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBjdXJyZW50IHBhZ2UgaW5wdXQgdmFsdWUgc3luY1xyXG5cdFx0XHRcdFx0XHRcdCQocGcucGFnZXIpLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQkKHRoaXMpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1pbnB1dFt0eXBlPVwidGV4dFwiXScpLnByb3AoJ3ZhbHVlJywgbWV0YS5wYWdlKTtcclxuXHRcdFx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gaWYgb25seSAxIHBhZ2UsIHNob3VsZCBoaWRlIHBhZ2U/XHJcblx0XHRcdFx0XHRcdFx0Ly8gJChwZy5wYWdlcikuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLW5hdicpLnNob3coKTtcclxuXHRcdFx0XHRcdFx0XHQvLyBpZiAobWV0YS5wYWdlcyA8PSAxKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gXHQvLyBoaWRlIHBhZ2VyIGlmIGhhcyAxIHBhZ2VcclxuXHRcdFx0XHRcdFx0XHQvLyBcdCQocGcucGFnZXIpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1uYXYnKS5oaWRlKCk7XHJcblx0XHRcdFx0XHRcdFx0Ly8gfVxyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyB1cGRhdGUgZGF0YXNvdXJjZSBwYXJhbXNcclxuXHRcdFx0XHRcdFx0XHRQbHVnaW4uc2V0RGF0YVNvdXJjZVBhcmFtKCdwYWdpbmF0aW9uJywge1xyXG5cdFx0XHRcdFx0XHRcdFx0cGFnZTogcGcubWV0YS5wYWdlLFxyXG5cdFx0XHRcdFx0XHRcdFx0cGFnZXM6IHBnLm1ldGEucGFnZXMsXHJcblx0XHRcdFx0XHRcdFx0XHRwZXJwYWdlOiBwZy5tZXRhLnBlcnBhZ2UsXHJcblx0XHRcdFx0XHRcdFx0XHR0b3RhbDogcGcubWV0YS50b3RhbCxcclxuXHRcdFx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0XHRcdFx0JChwZy5wYWdlcikuZmluZCgnc2VsZWN0LicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLXNpemUnKS52YWwobWV0YS5wZXJwYWdlKS5hdHRyKCdkYXRhLXNlbGVjdGVkJywgbWV0YS5wZXJwYWdlKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gY2xlYXIgYWN0aXZlIHJvd3NcclxuXHRcdFx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZSkuZmluZCgnLicgKyBwZnggKyAnY2hlY2tib3ggPiBbdHlwZT1cImNoZWNrYm94XCJdJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuXHRcdFx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZSkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdy1hY3RpdmUnKS5yZW1vdmVDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXJvdy1hY3RpdmUnKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0cGcudXBkYXRlSW5mby5jYWxsKCk7XHJcblx0XHRcdFx0XHRcdFx0cGcucGFnaW5nQnJlYWtwb2ludC5jYWxsKCk7XHJcblx0XHRcdFx0XHRcdFx0Ly8gUGx1Z2luLnJlc2V0U2Nyb2xsKCk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdHVwZGF0ZUluZm86IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHR2YXIgc3RhcnQgPSBNYXRoLm1heChwZy5tZXRhLnBlcnBhZ2UgKiAocGcubWV0YS5wYWdlIC0gMSkgKyAxLCAxKTtcclxuXHRcdFx0XHRcdFx0dmFyIGVuZCA9IE1hdGgubWluKHN0YXJ0ICsgcGcubWV0YS5wZXJwYWdlIC0gMSwgcGcubWV0YS50b3RhbCk7XHJcblx0XHRcdFx0XHRcdC8vIHBhZ2UgaW5mbyB1cGRhdGVcclxuXHRcdFx0XHRcdFx0JChwZy5wYWdlcikuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWluZm8nKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXItZGV0YWlsJykuaHRtbChQbHVnaW4uZGF0YVBsYWNlaG9sZGVyKFxyXG5cdFx0XHRcdFx0XHRcdFBsdWdpbi5nZXRPcHRpb24oJ3RyYW5zbGF0ZS50b29sYmFyLnBhZ2luYXRpb24uaXRlbXMuaW5mbycpLCB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBzZXQgc3RhcnQgcGFnZSAwIGlmIHRoZSBpcyBubyByZWNvcmRzLiBlZy4gU2hvd2luZyAwIC0gMCBvZiAwXHJcblx0XHRcdFx0XHRcdFx0XHRzdGFydDogcGcubWV0YS50b3RhbCA9PT0gMCA/IDAgOiBzdGFydCxcclxuXHRcdFx0XHRcdFx0XHRcdGVuZDogcGcubWV0YS5wZXJwYWdlID09PSAtMSA/IHBnLm1ldGEudG90YWwgOiBlbmQsXHJcblx0XHRcdFx0XHRcdFx0XHRwYWdlU2l6ZTogcGcubWV0YS5wZXJwYWdlID09PSAtMSB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0cGcubWV0YS5wZXJwYWdlID49IHBnLm1ldGEudG90YWxcclxuXHRcdFx0XHRcdFx0XHRcdFx0PyBwZy5tZXRhLnRvdGFsXHJcblx0XHRcdFx0XHRcdFx0XHRcdDogcGcubWV0YS5wZXJwYWdlLFxyXG5cdFx0XHRcdFx0XHRcdFx0dG90YWw6IHBnLm1ldGEudG90YWwsXHJcblx0XHRcdFx0XHRcdFx0fSkpO1xyXG5cdFx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0XHQvKipcclxuXHRcdFx0XHRcdCAqIFVwZGF0ZSBwYWdpbmF0aW9uIGxheW91dCBicmVha3BvaW50XHJcblx0XHRcdFx0XHQgKi9cclxuXHRcdFx0XHRcdHBhZ2luZ0JyZWFrcG9pbnQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHQvLyBrZWVwIHBhZ2UgbGlua3MgcmVmZXJlbmNlXHJcblx0XHRcdFx0XHRcdHZhciBwYWdlck51bWJlciA9ICQoZGF0YXRhYmxlLnRhYmxlKS5zaWJsaW5ncygnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyJykuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLW5hdicpO1xyXG5cdFx0XHRcdFx0XHRpZiAoJChwYWdlck51bWJlcikubGVuZ3RoID09PSAwKSByZXR1cm47XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgY3VycmVudFBhZ2UgPSBQbHVnaW4uZ2V0Q3VycmVudFBhZ2UoKTtcclxuXHRcdFx0XHRcdFx0dmFyIHBhZ2VySW5wdXQgPSAkKHBhZ2VyTnVtYmVyKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXItaW5wdXQnKS5jbG9zZXN0KCdsaScpO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gcmVzZXRcclxuXHRcdFx0XHRcdFx0JChwYWdlck51bWJlcikuZmluZCgnbGknKS5zaG93KCk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBwYWdpbmF0aW9uIHVwZGF0ZVxyXG5cdFx0XHRcdFx0XHQkLmVhY2goUGx1Z2luLmdldE9wdGlvbigndG9vbGJhci5pdGVtcy5wYWdpbmF0aW9uLnBhZ2VzJyksXHJcblx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24obW9kZSwgb3B0aW9uKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAodXRpbC5pc0luUmVzcG9uc2l2ZVJhbmdlKG1vZGUpKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHN3aXRjaCAobW9kZSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgJ2Rlc2t0b3AnOlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgJ3RhYmxldCc6XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR2YXIgZW5kID0gTWF0aC5jZWlsKGN1cnJlbnRQYWdlIC8gb3B0aW9uLnBhZ2VzTnVtYmVyKSAqIG9wdGlvbi5wYWdlc051bWJlcjtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHZhciBzdGFydCA9IGVuZCAtIG9wdGlvbi5wYWdlc051bWJlcjtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCQocGFnZXJJbnB1dCkuaGlkZSgpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cGcubWV0YSA9IFBsdWdpbi5nZXREYXRhU291cmNlUGFyYW0oJ3BhZ2luYXRpb24nKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBnLnBhZ2luYXRpb25VcGRhdGUoKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjYXNlICdtb2JpbGUnOlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0JChwYWdlcklucHV0KS5zaG93KCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQkKHBhZ2VyTnVtYmVyKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1tb3JlLXByZXYnKS5jbG9zZXN0KCdsaScpLmhpZGUoKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCQocGFnZXJOdW1iZXIpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLW1vcmUtbmV4dCcpLmNsb3Nlc3QoJ2xpJykuaGlkZSgpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0JChwYWdlck51bWJlcikuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWxpbmstbnVtYmVyJykuY2xvc2VzdCgnbGknKS5oaWRlKCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0XHQvKipcclxuXHRcdFx0XHRcdCAqIFVwZGF0ZSBwYWdpbmF0aW9uIG51bWJlciBhbmQgYnV0dG9uIGRpc3BsYXlcclxuXHRcdFx0XHRcdCAqL1xyXG5cdFx0XHRcdFx0cGFnaW5hdGlvblVwZGF0ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdHZhciBwYWdlciA9ICQoZGF0YXRhYmxlLnRhYmxlKS5zaWJsaW5ncygnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyJykuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLW5hdicpLFxyXG5cdFx0XHRcdFx0XHRcdHBhZ2VyTW9yZVByZXYgPSAkKHBhZ2VyKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1tb3JlLXByZXYnKSxcclxuXHRcdFx0XHRcdFx0XHRwYWdlck1vcmVOZXh0ID0gJChwYWdlcikuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWxpbmstbW9yZS1uZXh0JyksXHJcblx0XHRcdFx0XHRcdFx0cGFnZXJGaXJzdCA9ICQocGFnZXIpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLWZpcnN0JyksXHJcblx0XHRcdFx0XHRcdFx0cGFnZXJQcmV2ID0gJChwYWdlcikuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWxpbmstcHJldicpLFxyXG5cdFx0XHRcdFx0XHRcdHBhZ2VyTmV4dCA9ICQocGFnZXIpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLW5leHQnKSxcclxuXHRcdFx0XHRcdFx0XHRwYWdlckxhc3QgPSAkKHBhZ2VyKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1sYXN0Jyk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBnZXQgdmlzaWJsZSBwYWdlXHJcblx0XHRcdFx0XHRcdHZhciBwYWdlck51bWJlciA9ICQocGFnZXIpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLW51bWJlcicpO1xyXG5cdFx0XHRcdFx0XHQvLyBnZXQgcGFnZSBiZWZvcmUgb2YgZmlyc3QgdmlzaWJsZVxyXG5cdFx0XHRcdFx0XHR2YXIgbW9yZVByZXZQYWdlID0gTWF0aC5tYXgoJChwYWdlck51bWJlcikuZmlyc3QoKS5kYXRhKCdwYWdlJykgLSAxLCAxKTtcclxuXHRcdFx0XHRcdFx0JChwYWdlck1vcmVQcmV2KS5lYWNoKGZ1bmN0aW9uKGksIHByZXYpIHtcclxuXHRcdFx0XHRcdFx0XHQkKHByZXYpLmF0dHIoJ2RhdGEtcGFnZScsIG1vcmVQcmV2UGFnZSk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHQvLyBzaG93L2hpZGUgPGxpPlxyXG5cdFx0XHRcdFx0XHRpZiAobW9yZVByZXZQYWdlID09PSAxKSB7XHJcblx0XHRcdFx0XHRcdFx0JChwYWdlck1vcmVQcmV2KS5wYXJlbnQoKS5oaWRlKCk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0JChwYWdlck1vcmVQcmV2KS5wYXJlbnQoKS5zaG93KCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIGdldCBwYWdlIGFmdGVyIG9mIGxhc3QgdmlzaWJsZVxyXG5cdFx0XHRcdFx0XHR2YXIgbW9yZU5leHRQYWdlID0gTWF0aC5taW4oJChwYWdlck51bWJlcikubGFzdCgpLmRhdGEoJ3BhZ2UnKSArIDEsXHJcblx0XHRcdFx0XHRcdFx0cGcubWV0YS5wYWdlcyk7XHJcblx0XHRcdFx0XHRcdCQocGFnZXJNb3JlTmV4dCkuZWFjaChmdW5jdGlvbihpLCBwcmV2KSB7XHJcblx0XHRcdFx0XHRcdFx0JChwYWdlck1vcmVOZXh0KS5hdHRyKCdkYXRhLXBhZ2UnLCBtb3JlTmV4dFBhZ2UpLnNob3coKTtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBzaG93L2hpZGUgPGxpPlxyXG5cdFx0XHRcdFx0XHRpZiAobW9yZU5leHRQYWdlID09PSBwZy5tZXRhLnBhZ2VzXHJcblx0XHRcdFx0XHRcdFx0Ly8gbWlzc2luZyBkb3QgZml4IHdoZW4gbGFzdCBoaWRkZW4gcGFnZSBpcyBvbmUgbGVmdFxyXG5cdFx0XHRcdFx0XHRcdCYmIG1vcmVOZXh0UGFnZSA9PT0gJChwYWdlck51bWJlcikubGFzdCgpLmRhdGEoJ3BhZ2UnKSkge1xyXG5cdFx0XHRcdFx0XHRcdCQocGFnZXJNb3JlTmV4dCkucGFyZW50KCkuaGlkZSgpO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdCQocGFnZXJNb3JlTmV4dCkucGFyZW50KCkuc2hvdygpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBiZWdpbi9lbmQgb2YgcGFnZXNcclxuXHRcdFx0XHRcdFx0aWYgKHBnLm1ldGEucGFnZSA9PT0gMSkge1xyXG5cdFx0XHRcdFx0XHRcdCQocGFnZXJGaXJzdCkuYXR0cignZGlzYWJsZWQnLCB0cnVlKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWxpbmstZGlzYWJsZWQnKTtcclxuXHRcdFx0XHRcdFx0XHQkKHBhZ2VyUHJldikuYXR0cignZGlzYWJsZWQnLCB0cnVlKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWxpbmstZGlzYWJsZWQnKTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHQkKHBhZ2VyRmlyc3QpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJykucmVtb3ZlQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLWRpc2FibGVkJyk7XHJcblx0XHRcdFx0XHRcdFx0JChwYWdlclByZXYpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJykucmVtb3ZlQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLWRpc2FibGVkJyk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aWYgKHBnLm1ldGEucGFnZSA9PT0gcGcubWV0YS5wYWdlcykge1xyXG5cdFx0XHRcdFx0XHRcdCQocGFnZXJOZXh0KS5hdHRyKCdkaXNhYmxlZCcsIHRydWUpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1kaXNhYmxlZCcpO1xyXG5cdFx0XHRcdFx0XHRcdCQocGFnZXJMYXN0KS5hdHRyKCdkaXNhYmxlZCcsIHRydWUpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1kaXNhYmxlZCcpO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdCQocGFnZXJOZXh0KS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpLnJlbW92ZUNsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1kaXNhYmxlZCcpO1xyXG5cdFx0XHRcdFx0XHRcdCQocGFnZXJMYXN0KS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpLnJlbW92ZUNsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1kaXNhYmxlZCcpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBkaXNwbGF5IG1vcmUgYnV0dG9uc1xyXG5cdFx0XHRcdFx0XHR2YXIgbmF2ID0gUGx1Z2luLmdldE9wdGlvbigndG9vbGJhci5pdGVtcy5wYWdpbmF0aW9uLm5hdmlnYXRpb24nKTtcclxuXHRcdFx0XHRcdFx0aWYgKCFuYXYuZmlyc3QpICQocGFnZXJGaXJzdCkucmVtb3ZlKCk7XHJcblx0XHRcdFx0XHRcdGlmICghbmF2LnByZXYpICQocGFnZXJQcmV2KS5yZW1vdmUoKTtcclxuXHRcdFx0XHRcdFx0aWYgKCFuYXYubmV4dCkgJChwYWdlck5leHQpLnJlbW92ZSgpO1xyXG5cdFx0XHRcdFx0XHRpZiAoIW5hdi5sYXN0KSAkKHBhZ2VyTGFzdCkucmVtb3ZlKCk7XHJcblx0XHRcdFx0XHRcdGlmICghbmF2Lm1vcmUpIHtcclxuXHRcdFx0XHRcdFx0XHQkKHBhZ2VyTW9yZVByZXYpLnJlbW92ZSgpO1xyXG5cdFx0XHRcdFx0XHRcdCQocGFnZXJNb3JlTmV4dCkucmVtb3ZlKCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHRwZy5pbml0KG1ldGEpO1xyXG5cdFx0XHRcdHJldHVybiBwZztcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBIaWRlL3Nob3cgdGFibGUgY2VsbCBkZWZpbmVkIGJ5XHJcblx0XHRcdCAqIG9wdGlvbnNbY29sdW1uc11baV1bcmVzcG9uc2l2ZV1bdmlzaWJsZS9oaWRkZW5dXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRjb2x1bW5IaWRlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgc2NyZWVuID0gdXRpbC5nZXRWaWV3UG9ydCgpLndpZHRoO1xyXG5cdFx0XHRcdC8vIGZvcmVhY2ggY29sdW1ucyBzZXR0aW5nXHJcblx0XHRcdFx0JC5lYWNoKG9wdGlvbnMuY29sdW1ucywgZnVuY3Rpb24oaSwgY29sdW1uKSB7XHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbi5yZXNwb25zaXZlICE9PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgY29sdW1uLnZpc2libGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdHZhciBmaWVsZCA9IGNvbHVtbi5maWVsZDtcclxuXHRcdFx0XHRcdFx0dmFyIHRkcyA9ICQuZ3JlcCgkKGRhdGF0YWJsZS50YWJsZSkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWNlbGwnKSwgZnVuY3Rpb24obiwgaSkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBmaWVsZCA9PT0gJChuKS5kYXRhKCdmaWVsZCcpO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0XHRcdC8vIGhpZGUgYnkgZm9yY2VcclxuXHRcdFx0XHRcdFx0XHRpZiAoUGx1Z2luLmdldE9iamVjdCgndmlzaWJsZScsIGNvbHVtbikgPT09IGZhbHNlKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQkKHRkcykuaGlkZSgpO1xyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBzaG93L2hpZGUgYnkgcmVzcG9uc2l2ZSBicmVha3BvaW50XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAodXRpbC5nZXRCcmVha3BvaW50KFBsdWdpbi5nZXRPYmplY3QoJ3Jlc3BvbnNpdmUuaGlkZGVuJywgY29sdW1uKSkgPj0gc2NyZWVuKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdCQodGRzKS5oaWRlKCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQkKHRkcykuc2hvdygpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHV0aWwuZ2V0QnJlYWtwb2ludChQbHVnaW4uZ2V0T2JqZWN0KCdyZXNwb25zaXZlLnZpc2libGUnLCBjb2x1bW4pKSA8PSBzY3JlZW4pIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0JCh0ZHMpLnNob3coKTtcclxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdCQodGRzKS5oaWRlKCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBTZXR1cCBzdWIgZGF0YXRhYmxlXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRzZXR1cFN1YkRhdGF0YWJsZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIHN1YlRhYmxlQ2FsbGJhY2sgPSBQbHVnaW4uZ2V0T3B0aW9uKCdkZXRhaWwuY29udGVudCcpO1xyXG5cdFx0XHRcdGlmICh0eXBlb2Ygc3ViVGFibGVDYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuO1xyXG5cclxuXHRcdFx0XHQvLyBzdWJ0YWJsZSBhbHJlYWR5IGV4aXN0XHJcblx0XHRcdFx0aWYgKCQoZGF0YXRhYmxlLnRhYmxlKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtc3VidGFibGUnKS5sZW5ndGggPiAwKSByZXR1cm47XHJcblxyXG5cdFx0XHRcdCQoZGF0YXRhYmxlLndyYXApLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtc3VidGFibGUnKTtcclxuXHJcblx0XHRcdFx0b3B0aW9ucy5jb2x1bW5zWzBdWydzdWJ0YWJsZSddID0gdHJ1ZTtcclxuXHJcblx0XHRcdFx0Ly8gdG9nZ2xlIG9uIG9wZW4gc3ViIHRhYmxlXHJcblx0XHRcdFx0dmFyIHRvZ2dsZVN1YlRhYmxlID0gZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdFx0Ly8gZ2V0IHBhcmVudCByb3cgb2YgdGhpcyBzdWJ0YWJsZVxyXG5cdFx0XHRcdFx0dmFyIHBhcmVudFJvdyA9ICQodGhpcykuY2xvc2VzdCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpO1xyXG5cclxuXHRcdFx0XHRcdC8vIGdldCBzdWJ0YWJsZSByb3cgZm9yIHN1YiB0YWJsZVxyXG5cdFx0XHRcdFx0dmFyIHN1YlRhYmxlUm93ID0gJChwYXJlbnRSb3cpLm5leHQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3ctc3VidGFibGUnKTtcclxuXHRcdFx0XHRcdGlmICgkKHN1YlRhYmxlUm93KS5sZW5ndGggPT09IDApIHtcclxuXHRcdFx0XHRcdFx0Ly8gcHJlcGFyZSBET00gZm9yIHN1YiB0YWJsZSwgZWFjaCA8dHI+IGFzIHBhcmVudCBhbmQgYWRkIDx0cj4gYXMgY2hpbGQgdGFibGVcclxuXHRcdFx0XHRcdFx0c3ViVGFibGVSb3cgPSAkKCc8dHIvPicpLlxyXG5cdFx0XHRcdFx0XHRcdGFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcm93LXN1YnRhYmxlICcgKyBwZnggKyAnZGF0YXRhYmxlLXJvdy1sb2FkaW5nJykuXHJcblx0XHRcdFx0XHRcdFx0aGlkZSgpLlxyXG5cdFx0XHRcdFx0XHRcdGFwcGVuZCgkKCc8dGQvPicpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtc3VidGFibGUnKS5hdHRyKCdjb2xzcGFuJywgUGx1Z2luLmdldFRvdGFsQ29sdW1ucygpKSk7XHJcblx0XHRcdFx0XHRcdCQocGFyZW50Um93KS5hZnRlcihzdWJUYWJsZVJvdyk7XHJcblx0XHRcdFx0XHRcdC8vIGFkZCBjbGFzcyB0byBldmVuIHJvd1xyXG5cdFx0XHRcdFx0XHRpZiAoJChwYXJlbnRSb3cpLmhhc0NsYXNzKHBmeCArICdkYXRhdGFibGUtcm93LWV2ZW4nKSkge1xyXG5cdFx0XHRcdFx0XHRcdCQoc3ViVGFibGVSb3cpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcm93LXN1YnRhYmxlLWV2ZW4nKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdCQoc3ViVGFibGVSb3cpLnRvZ2dsZSgpO1xyXG5cclxuXHRcdFx0XHRcdHZhciBzdWJUYWJsZSA9ICQoc3ViVGFibGVSb3cpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1zdWJ0YWJsZScpO1xyXG5cclxuXHRcdFx0XHRcdC8vIGdldCBpZCBmcm9tIGZpcnN0IGNvbHVtbiBvZiBwYXJlbnQgcm93XHJcblx0XHRcdFx0XHR2YXIgcHJpbWFyeUtleSA9ICQodGhpcykuY2xvc2VzdCgnW2RhdGEtZmllbGRdOmZpcnN0LWNoaWxkJykuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXRvZ2dsZS1zdWJ0YWJsZScpLmRhdGEoJ3ZhbHVlJyk7XHJcblxyXG5cdFx0XHRcdFx0dmFyIGljb24gPSAkKHRoaXMpLmZpbmQoJ2knKS5yZW1vdmVBdHRyKCdjbGFzcycpO1xyXG5cclxuXHRcdFx0XHRcdC8vIHByZXZlbnQgZHVwbGljYXRlIGRhdGF0YWJsZSBpbml0XHJcblx0XHRcdFx0XHRpZiAoJChwYXJlbnRSb3cpLmhhc0NsYXNzKHBmeCArICdkYXRhdGFibGUtcm93LXN1YnRhYmxlLWV4cGFuZGVkJykpIHtcclxuXHRcdFx0XHRcdFx0JChpY29uKS5hZGRDbGFzcyhQbHVnaW4uZ2V0T3B0aW9uKCdsYXlvdXQuaWNvbnMucm93RGV0YWlsLmNvbGxhcHNlJykpO1xyXG5cdFx0XHRcdFx0XHQvLyByZW1vdmUgZXhwYW5kIGNsYXNzIGZyb20gcGFyZW50IHJvd1xyXG5cdFx0XHRcdFx0XHQkKHBhcmVudFJvdykucmVtb3ZlQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1yb3ctc3VidGFibGUtZXhwYW5kZWQnKTtcclxuXHRcdFx0XHRcdFx0Ly8gdHJpZ2dlciBldmVudCBvbiBjb2xsYXBzZVxyXG5cdFx0XHRcdFx0XHQkKGRhdGF0YWJsZSkudHJpZ2dlcihwZnggKyAnZGF0YXRhYmxlLW9uLWNvbGxhcHNlLXN1YnRhYmxlJywgW3BhcmVudFJvd10pO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0Ly8gZXhwYW5kIGFuZCBydW4gY2FsbGJhY2sgZnVuY3Rpb25cclxuXHRcdFx0XHRcdFx0JChpY29uKS5hZGRDbGFzcyhQbHVnaW4uZ2V0T3B0aW9uKCdsYXlvdXQuaWNvbnMucm93RGV0YWlsLmV4cGFuZCcpKTtcclxuXHRcdFx0XHRcdFx0Ly8gYWRkIGV4cGFuZCBjbGFzcyB0byBwYXJlbnQgcm93XHJcblx0XHRcdFx0XHRcdCQocGFyZW50Um93KS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXJvdy1zdWJ0YWJsZS1leHBhbmRlZCcpO1xyXG5cdFx0XHRcdFx0XHQvLyB0cmlnZ2VyIGV2ZW50IG9uIGV4cGFuZFxyXG5cdFx0XHRcdFx0XHQkKGRhdGF0YWJsZSkudHJpZ2dlcihwZnggKyAnZGF0YXRhYmxlLW9uLWV4cGFuZC1zdWJ0YWJsZScsIFtwYXJlbnRSb3ddKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBwcmV2ZW50IGR1cGxpY2F0ZSBkYXRhdGFibGUgaW5pdFxyXG5cdFx0XHRcdFx0aWYgKCQoc3ViVGFibGUpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZScpLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0XHRcdFx0XHQvLyBnZXQgZGF0YSBieSBwcmltYXJ5IGlkXHJcblx0XHRcdFx0XHRcdCQubWFwKGRhdGF0YWJsZS5kYXRhU2V0LCBmdW5jdGlvbihuLCBpKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gcHJpbWFyeSBpZCBtdXN0IGJlIGF0IHRoZSBmaXJzdCBjb2x1bW4sIG90aGVyd2lzZSBlLmRhdGEgd2lsbCBiZSB1bmRlZmluZWRcclxuXHRcdFx0XHRcdFx0XHRpZiAocHJpbWFyeUtleSA9PT0gbltvcHRpb25zLmNvbHVtbnNbMF0uZmllbGRdKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRlLmRhdGEgPSBuO1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBkZXByZWNhdGVkIGluIHY1LjAuNlxyXG5cdFx0XHRcdFx0XHRlLmRldGFpbENlbGwgPSBzdWJUYWJsZTtcclxuXHJcblx0XHRcdFx0XHRcdGUucGFyZW50Um93ID0gcGFyZW50Um93O1xyXG5cdFx0XHRcdFx0XHRlLnN1YlRhYmxlID0gc3ViVGFibGU7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBydW4gY2FsbGJhY2sgd2l0aCBldmVudFxyXG5cdFx0XHRcdFx0XHRzdWJUYWJsZUNhbGxiYWNrKGUpO1xyXG5cclxuXHRcdFx0XHRcdFx0JChzdWJUYWJsZSkuY2hpbGRyZW4oJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZScpLm9uKHBmeCArICdkYXRhdGFibGUtb24taW5pdCcsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdFx0XHQkKHN1YlRhYmxlUm93KS5yZW1vdmVDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXJvdy1sb2FkaW5nJyk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHRpZiAoUGx1Z2luLmdldE9wdGlvbignZGF0YS50eXBlJykgPT09ICdsb2NhbCcpIHtcclxuXHRcdFx0XHRcdFx0XHQkKHN1YlRhYmxlUm93KS5yZW1vdmVDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXJvdy1sb2FkaW5nJyk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHR2YXIgY29sdW1ucyA9IG9wdGlvbnMuY29sdW1ucztcclxuXHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUJvZHkpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKS5lYWNoKGZ1bmN0aW9uKHRyaSwgdHIpIHtcclxuXHRcdFx0XHRcdCQodHIpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsJykuZWFjaChmdW5jdGlvbih0ZGksIHRkKSB7XHJcblx0XHRcdFx0XHRcdC8vIGdldCBjb2x1bW4gc2V0dGluZ3MgYnkgZmllbGRcclxuXHRcdFx0XHRcdFx0dmFyIGNvbHVtbiA9ICQuZ3JlcChjb2x1bW5zLCBmdW5jdGlvbihuLCBpKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuICQodGQpLmRhdGEoJ2ZpZWxkJykgPT09IG4uZmllbGQ7XHJcblx0XHRcdFx0XHRcdH0pWzBdO1xyXG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0XHR2YXIgdmFsdWUgPSAkKHRkKS50ZXh0KCk7XHJcblx0XHRcdFx0XHRcdFx0Ly8gZW5hYmxlIGNvbHVtbiBzdWJ0YWJsZSB0b2dnbGVcclxuXHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbi5zdWJ0YWJsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29sdW1uLnN1YnRhYmxlKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBjaGVjayBpZiBzdWJ0YWJsZSB0b2dnbGUgZXhpc3RcclxuXHRcdFx0XHRcdFx0XHRcdGlmICgkKHRkKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtdG9nZ2xlLXN1YnRhYmxlJykubGVuZ3RoID4gMCkgcmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gYXBwZW5kIHN1YnRhYmxlIHRvZ2dsZVxyXG5cdFx0XHRcdFx0XHRcdFx0JCh0ZCkuXHJcblx0XHRcdFx0XHRcdFx0XHRcdGh0bWwoJCgnPGEvPicpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtdG9nZ2xlLXN1YnRhYmxlJykuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YXR0cignaHJlZicsICcjJykuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YXR0cignZGF0YS12YWx1ZScsIHZhbHVlKS5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRhdHRyKCd0aXRsZScsIFBsdWdpbi5nZXRPcHRpb24oJ2RldGFpbC50aXRsZScpKS5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRvbignY2xpY2snLCB0b2dnbGVTdWJUYWJsZSkuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YXBwZW5kKCQoJzxpLz4nKS5jc3MoJ3dpZHRoJywgJCh0ZCkuZGF0YSgnd2lkdGgnKSkuYWRkQ2xhc3MoUGx1Z2luLmdldE9wdGlvbignbGF5b3V0Lmljb25zLnJvd0RldGFpbC5jb2xsYXBzZScpKSkpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdC8vICQoZGF0YXRhYmxlLnRhYmxlSGVhZCkuZmluZCgnLicrcGZ4KyctZGF0YXRhYmxlLXJvdycpLmZpcnN0KClcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBEYXRhc291cmNlIG1hcHBpbmcgY2FsbGJhY2tcclxuXHRcdFx0ICovXHJcblx0XHRcdGRhdGFNYXBDYWxsYmFjazogZnVuY3Rpb24ocmF3KSB7XHJcblx0XHRcdFx0Ly8gc3RhdGljIGRhdGFzZXQgYXJyYXlcclxuXHRcdFx0XHR2YXIgZGF0YVNldCA9IHJhdztcclxuXHRcdFx0XHQvLyBkYXRhc2V0IG1hcHBpbmcgY2FsbGJhY2tcclxuXHRcdFx0XHRpZiAodHlwZW9mIFBsdWdpbi5nZXRPcHRpb24oJ2RhdGEuc291cmNlLnJlYWQubWFwJykgPT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0XHRcdHJldHVybiBQbHVnaW4uZ2V0T3B0aW9uKCdkYXRhLnNvdXJjZS5yZWFkLm1hcCcpKHJhdyk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdC8vIGRlZmF1bHQgZGF0YSBtYXBwaW5nIGZhbGxiYWNrXHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIHJhdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHJhdy5kYXRhICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHRkYXRhU2V0ID0gcmF3LmRhdGE7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBkYXRhU2V0O1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0aXNTcGlubmluZzogZmFsc2UsXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBCbG9ja1VJIHNwaW5uZXIgY2FsbGJhY2tcclxuXHRcdFx0ICogQHBhcmFtIGJsb2NrXHJcblx0XHRcdCAqIEBwYXJhbSB0YXJnZXRcclxuXHRcdFx0ICovXHJcblx0XHRcdHNwaW5uZXJDYWxsYmFjazogZnVuY3Rpb24oYmxvY2ssIHRhcmdldCkge1xyXG5cdFx0XHRcdGlmICh0eXBlb2YgdGFyZ2V0ID09PSAndW5kZWZpbmVkJykgdGFyZ2V0ID0gZGF0YXRhYmxlO1xyXG5cdFx0XHRcdC8vIGdldCBzcGlubmVyIG9wdGlvbnNcclxuXHRcdFx0XHR2YXIgc3Bpbm5lck9wdGlvbnMgPSBQbHVnaW4uZ2V0T3B0aW9uKCdsYXlvdXQuc3Bpbm5lcicpO1xyXG5cdFx0XHRcdC8vIHNwaW5uZXIgaXMgZGlzYWJsZWRcclxuXHRcdFx0XHRpZiAodHlwZW9mIHNwaW5uZXJPcHRpb25zID09PSAndW5kZWZpbmVkJyB8fCAhc3Bpbm5lck9wdGlvbnMpIHtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKGJsb2NrKSB7XHJcblx0XHRcdFx0XHRpZiAoIVBsdWdpbi5pc1NwaW5uaW5nKSB7XHJcblx0XHRcdFx0XHRcdGlmICh0eXBlb2Ygc3Bpbm5lck9wdGlvbnMubWVzc2FnZSAhPT0gJ3VuZGVmaW5lZCcgJiYgc3Bpbm5lck9wdGlvbnMubWVzc2FnZSA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdFx0XHRcdC8vIHVzZSBkZWZhdWx0IHNwaW5uZXIgbWVzc2FnZSBmcm9tIHRyYW5zbGF0aW9uXHJcblx0XHRcdFx0XHRcdFx0c3Bpbm5lck9wdGlvbnMubWVzc2FnZSA9IFBsdWdpbi5nZXRPcHRpb24oJ3RyYW5zbGF0ZS5yZWNvcmRzLnByb2Nlc3NpbmcnKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRQbHVnaW4uaXNTcGlubmluZyA9IHRydWU7XHJcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgYXBwICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHRcdGFwcC5ibG9jayh0YXJnZXQsIHNwaW5uZXJPcHRpb25zKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRQbHVnaW4uaXNTcGlubmluZyA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBhcHAgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdGFwcC51bmJsb2NrKHRhcmdldCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIERlZmF1bHQgc29ydCBjYWxsYmFjayBmdW5jdGlvblxyXG5cdFx0XHQgKiBAcGFyYW0gZGF0YVxyXG5cdFx0XHQgKiBAcGFyYW0gc29ydFxyXG5cdFx0XHQgKiBAcGFyYW0gY29sdW1uXHJcblx0XHRcdCAqIEByZXR1cm5zIHsqfEFycmF5LjxUPnx7c29ydCwgZmllbGR9fHthc2MsIGRlc2N9fVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0c29ydENhbGxiYWNrOiBmdW5jdGlvbihkYXRhLCBzb3J0LCBjb2x1bW4pIHtcclxuXHRcdFx0XHR2YXIgdHlwZSA9IGNvbHVtblsndHlwZSddIHx8ICdzdHJpbmcnO1xyXG5cdFx0XHRcdHZhciBmb3JtYXQgPSBjb2x1bW5bJ2Zvcm1hdCddIHx8ICcnO1xyXG5cdFx0XHRcdHZhciBmaWVsZCA9IGNvbHVtblsnZmllbGQnXTtcclxuXHJcblx0XHRcdFx0cmV0dXJuICQoZGF0YSkuc29ydChmdW5jdGlvbihhLCBiKSB7XHJcblx0XHRcdFx0XHR2YXIgYUZpZWxkID0gYVtmaWVsZF07XHJcblx0XHRcdFx0XHR2YXIgYkZpZWxkID0gYltmaWVsZF07XHJcblxyXG5cdFx0XHRcdFx0c3dpdGNoICh0eXBlKSB7XHJcblx0XHRcdFx0XHRcdGNhc2UgJ2RhdGUnOlxyXG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgbW9tZW50ID09PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdNb21lbnQuanMgaXMgcmVxdWlyZWQuJyk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdHZhciBkaWZmID0gbW9tZW50KGFGaWVsZCwgZm9ybWF0KS5kaWZmKG1vbWVudChiRmllbGQsIGZvcm1hdCkpO1xyXG5cdFx0XHRcdFx0XHRcdGlmIChzb3J0ID09PSAnYXNjJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPiAwID8gMSA6IGRpZmYgPCAwID8gLTEgOiAwO1xyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA8IDAgPyAxIDogZGlmZiA+IDAgPyAtMSA6IDA7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdFx0Y2FzZSAnbnVtYmVyJzpcclxuXHRcdFx0XHRcdFx0XHRpZiAoaXNOYU4ocGFyc2VGbG9hdChhRmllbGQpKSAmJiBhRmllbGQgIT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0YUZpZWxkID0gTnVtYmVyKGFGaWVsZC5yZXBsYWNlKC9bXjAtOVxcLi1dKy9nLCAnJykpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRpZiAoaXNOYU4ocGFyc2VGbG9hdChiRmllbGQpKSAmJiBiRmllbGQgIT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0YkZpZWxkID0gTnVtYmVyKGJGaWVsZC5yZXBsYWNlKC9bXjAtOVxcLi1dKy9nLCAnJykpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRhRmllbGQgPSBwYXJzZUZsb2F0KGFGaWVsZCk7XHJcblx0XHRcdFx0XHRcdFx0YkZpZWxkID0gcGFyc2VGbG9hdChiRmllbGQpO1xyXG5cdFx0XHRcdFx0XHRcdGlmIChzb3J0ID09PSAnYXNjJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGFGaWVsZCA+IGJGaWVsZCA/IDEgOiBhRmllbGQgPCBiRmllbGQgPyAtMSA6IDA7XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBhRmllbGQgPCBiRmllbGQgPyAxIDogYUZpZWxkID4gYkZpZWxkID8gLTEgOiAwO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRcdGNhc2UgJ2h0bWwnOlxyXG5cdFx0XHRcdFx0XHRcdHJldHVybiAkKGRhdGEpLnNvcnQoZnVuY3Rpb24oYSwgYikge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZ2V0IHRoZSB0ZXh0IG9ubHkgZnJvbSBodG1sXHJcblx0XHRcdFx0XHRcdFx0XHRhRmllbGQgPSAkKGFbZmllbGRdKS50ZXh0KCk7XHJcblx0XHRcdFx0XHRcdFx0XHRiRmllbGQgPSAkKGJbZmllbGRdKS50ZXh0KCk7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBzb3J0XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoc29ydCA9PT0gJ2FzYycpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGFGaWVsZCA+IGJGaWVsZCA/IDEgOiBhRmllbGQgPCBiRmllbGQgPyAtMSA6IDA7XHJcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gYUZpZWxkIDwgYkZpZWxkID8gMSA6IGFGaWVsZCA+IGJGaWVsZCA/IC0xIDogMDtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRcdGNhc2UgJ3N0cmluZyc6XHJcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHRcdFx0aWYgKHNvcnQgPT09ICdhc2MnKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gYUZpZWxkID4gYkZpZWxkID8gMSA6IGFGaWVsZCA8IGJGaWVsZCA/IC0xIDogMDtcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGFGaWVsZCA8IGJGaWVsZCA/IDEgOiBhRmllbGQgPiBiRmllbGQgPyAtMSA6IDA7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEN1c3RvbSBkZWJ1ZyBsb2dcclxuXHRcdFx0ICogQHBhcmFtIHRleHRcclxuXHRcdFx0ICogQHBhcmFtIG9ialxyXG5cdFx0XHQgKi9cclxuXHRcdFx0bG9nOiBmdW5jdGlvbih0ZXh0LCBvYmopIHtcclxuXHRcdFx0XHRpZiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIG9iaiA9ICcnO1xyXG5cdFx0XHRcdGlmIChkYXRhdGFibGUuZGVidWcpIHtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKHRleHQsIG9iaik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEF1dG8gaGlkZSBjb2x1bW5kcyBvdmVyZmxvdyBpbiByb3dcclxuXHRcdFx0ICovXHJcblx0XHRcdGF1dG9IaWRlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgaGlkZGVuRXhpc3QgPSBmYWxzZTtcclxuXHRcdFx0XHQvLyBmb3JjZSBoaWRlIGVuYWJsZWRcclxuXHRcdFx0XHR2YXIgaGlkRGVmYXVsdCA9ICQoZGF0YXRhYmxlLnRhYmxlKS5maW5kKCdbZGF0YS1hdXRvaGlkZS1lbmFibGVkXScpO1xyXG5cdFx0XHRcdGlmIChoaWREZWZhdWx0Lmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0aGlkZGVuRXhpc3QgPSB0cnVlO1xyXG5cdFx0XHRcdFx0aGlkRGVmYXVsdC5oaWRlKCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR2YXIgdG9nZ2xlSGlkZGVuQ29sdW1ucyA9IGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcblx0XHRcdFx0XHR2YXIgcm93ID0gJCh0aGlzKS5jbG9zZXN0KCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93Jyk7XHJcblx0XHRcdFx0XHR2YXIgZGV0YWlsUm93ID0gJChyb3cpLm5leHQoKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoISQoZGV0YWlsUm93KS5oYXNDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXJvdy1kZXRhaWwnKSkge1xyXG5cdFx0XHRcdFx0XHQkKHRoaXMpLmZpbmQoJ2knKS5yZW1vdmVDbGFzcyhQbHVnaW4uZ2V0T3B0aW9uKCdsYXlvdXQuaWNvbnMucm93RGV0YWlsLmNvbGxhcHNlJykpLmFkZENsYXNzKFBsdWdpbi5nZXRPcHRpb24oJ2xheW91dC5pY29ucy5yb3dEZXRhaWwuZXhwYW5kJykpO1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIGhpZGRlbkNlbGxzID0gJChyb3cpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsOmhpZGRlbicpO1xyXG5cdFx0XHRcdFx0XHR2YXIgY2xvbmVkQ2VsbHMgPSBoaWRkZW5DZWxscy5jbG9uZSgpLnNob3coKTtcclxuXHJcblx0XHRcdFx0XHRcdGRldGFpbFJvdyA9ICQoJzx0ci8+JykuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1yb3ctZGV0YWlsJykuaW5zZXJ0QWZ0ZXIocm93KTtcclxuXHRcdFx0XHRcdFx0dmFyIGRldGFpbFJvd1RkID0gJCgnPHRkLz4nKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLWRldGFpbCcpLmF0dHIoJ2NvbHNwYW4nLCBQbHVnaW4uZ2V0VG90YWxDb2x1bW5zKCkpLmFwcGVuZFRvKGRldGFpbFJvdyk7XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgZGV0YWlsU3ViVGFibGUgPSAkKCc8dGFibGUvPicpO1xyXG5cdFx0XHRcdFx0XHQkKGNsb25lZENlbGxzKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdHZhciBmaWVsZCA9ICQodGhpcykuZGF0YSgnZmllbGQnKTtcclxuXHRcdFx0XHRcdFx0XHR2YXIgY29sdW1uID0gJC5ncmVwKG9wdGlvbnMuY29sdW1ucywgZnVuY3Rpb24obiwgaSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZpZWxkID09PSBuLmZpZWxkO1xyXG5cdFx0XHRcdFx0XHRcdH0pWzBdO1xyXG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY29sdW1uID09PSAndW5kZWZpbmVkJyB8fCBjb2x1bW4udmlzaWJsZSAhPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRcdFx0XHRcdCQoZGV0YWlsU3ViVGFibGUpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGFwcGVuZCgkKCc8dHIgY2xhc3M9XCInICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3dcIj48L3RyPicpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcHBlbmQoJCgnPHRkIGNsYXNzPVwiJyArIHBmeCArICdkYXRhdGFibGUtY2VsbFwiPjwvdGQ+JykuYXBwZW5kKCQoJzxzcGFuLz4nKS5hcHBlbmQoY29sdW1uLnRpdGxlKSkpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcHBlbmQodGhpcykpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdCQoZGV0YWlsUm93VGQpLmFwcGVuZChkZXRhaWxTdWJUYWJsZSk7XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0JCh0aGlzKS5maW5kKCdpJykucmVtb3ZlQ2xhc3MoUGx1Z2luLmdldE9wdGlvbignbGF5b3V0Lmljb25zLnJvd0RldGFpbC5leHBhbmQnKSkuYWRkQ2xhc3MoUGx1Z2luLmdldE9wdGlvbignbGF5b3V0Lmljb25zLnJvd0RldGFpbC5jb2xsYXBzZScpKTtcclxuXHRcdFx0XHRcdFx0JChkZXRhaWxSb3cpLnJlbW92ZSgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGUpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsJykuc2hvdygpO1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGVCb2R5KS5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHR2YXIgcmVjdXJzaXZlID0gMDtcclxuXHRcdFx0XHRcdFx0d2hpbGUgKCQodGhpcylbMF0ub2Zmc2V0V2lkdGggPCAkKHRoaXMpWzBdLnNjcm9sbFdpZHRoICYmIHJlY3Vyc2l2ZSA8IG9wdGlvbnMuY29sdW1ucy5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZSkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpLmVhY2goZnVuY3Rpb24oaSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIGNlbGwgPSAkKHRoaXMpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsOm5vdCg6aGlkZGVuKTpub3QoW2RhdGEtYXV0b2hpZGUtZGlzYWJsZWRdKScpLmxhc3QoKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGNlbGwubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0JChjZWxsKS5oaWRlKCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aGlkZGVuRXhpc3QgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdFx0cmVjdXJzaXZlKys7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRcdGlmIChoaWRkZW5FeGlzdCkge1xyXG5cdFx0XHRcdFx0XHQvLyB0b2dnbGUgc2hvdyBoaWRkZW4gY29sdW1uc1xyXG5cdFx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUJvZHkpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdC8vIGlmIG5vIHRvZ2dsZSB5ZXRcclxuXHRcdFx0XHRcdFx0XHRpZigkKHRoaXMpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS10b2dnbGUtZGV0YWlsJykubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBhZGQgdG9nZ2xlXHJcblx0XHRcdFx0XHRcdFx0XHQkKHRoaXMpLnByZXBlbmQoJCgnPHRkLz4nKS5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRhZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLWNlbGwgJyArIHBmeCArICdkYXRhdGFibGUtdG9nZ2xlLWRldGFpbCcpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGFwcGVuZCgkKCc8YS8+JykuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXRvZ2dsZS1kZXRhaWwnKS5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGF0dHIoJ2hyZWYnLCAnJykuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvbignY2xpY2snLCB0b2dnbGVIaWRkZW5Db2x1bW5zKS5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFwcGVuZCgnPGkgY2xhc3M9XCInICsgUGx1Z2luLmdldE9wdGlvbignbGF5b3V0Lmljb25zLnJvd0RldGFpbC5jb2xsYXBzZScpICsgJ1wiPjwvaT4nKSkpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gY2hlY2sgaWYgc3VidGFibGUgdG9nZ2xlIGV4aXN0XHJcblx0XHRcdFx0XHRcdFx0aWYgKCQoZGF0YXRhYmxlLnRhYmxlSGVhZCkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXRvZ2dsZS1kZXRhaWwnKS5sZW5ndGggPT09IDApIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIGFkZCBlbXB0eSBjb2x1bW4gdG8gdGhlIGhlYWRlciBhbmQgZm9vdGVyXHJcblx0XHRcdFx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUhlYWQpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRmaW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93JykuXHJcblx0XHRcdFx0XHRcdFx0XHRcdGZpcnN0KCkuXHJcblx0XHRcdFx0XHRcdFx0XHRcdHByZXBlbmQoJzx0aCBjbGFzcz1cIicgKyBwZnggKyAnZGF0YXRhYmxlLWNlbGwgJyArIHBmeCArICdkYXRhdGFibGUtdG9nZ2xlLWRldGFpbFwiPjxzcGFuPjwvc3Bhbj48L3RoPicpO1xyXG5cdFx0XHRcdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGVGb290KS5cclxuXHRcdFx0XHRcdFx0XHRcdFx0ZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRmaXJzdCgpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRwcmVwZW5kKCc8dGggY2xhc3M9XCInICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsICcgKyBwZnggKyAnZGF0YXRhYmxlLXRvZ2dsZS1kZXRhaWxcIj48c3Bhbj48L3NwYW4+PC90aD4nKTtcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGVIZWFkKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtdG9nZ2xlLWRldGFpbCcpLmZpbmQoJ3NwYW4nKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRQbHVnaW4uYWRqdXN0Q2VsbHNXaWR0aC5jYWxsKCk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogVG8gZW5hYmxlIGF1dG8gY29sdW1ucyBmZWF0dXJlcyBmb3IgcmVtb3RlIGRhdGEgc291cmNlXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRzZXRBdXRvQ29sdW1uczogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKFBsdWdpbi5nZXRPcHRpb24oJ2RhdGEuYXV0b0NvbHVtbnMnKSkge1xyXG5cdFx0XHRcdFx0JC5lYWNoKGRhdGF0YWJsZS5kYXRhU2V0WzBdLCBmdW5jdGlvbihrLCB2KSB7XHJcblx0XHRcdFx0XHRcdHZhciBmb3VuZCA9ICQuZ3JlcChvcHRpb25zLmNvbHVtbnMsIGZ1bmN0aW9uKG4sIGkpIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gayA9PT0gbi5maWVsZDtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdGlmIChmb3VuZC5sZW5ndGggPT09IDApIHtcclxuXHRcdFx0XHRcdFx0XHRvcHRpb25zLmNvbHVtbnMucHVzaCh7ZmllbGQ6IGssIHRpdGxlOiBrfSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGVIZWFkKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93JykucmVtb3ZlKCk7XHJcblx0XHRcdFx0XHRQbHVnaW4uc2V0SGVhZFRpdGxlKCk7XHJcblx0XHRcdFx0XHRpZiAoUGx1Z2luLmdldE9wdGlvbignbGF5b3V0LmZvb3RlcicpKSB7XHJcblx0XHRcdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlRm9vdCkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpLnJlbW92ZSgpO1xyXG5cdFx0XHRcdFx0XHRQbHVnaW4uc2V0SGVhZFRpdGxlKGRhdGF0YWJsZS50YWJsZUZvb3QpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKioqKioqKioqKioqKioqKioqKlxyXG5cdFx0XHQgKiogSEVMUEVSU1xyXG5cdFx0XHQgKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogQ2hlY2sgaWYgdGFibGUgaXMgYSBsb2NrZWQgY29sdW1zIHRhYmxlXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRpc0xvY2tlZDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIGlzTG9ja2VkID0gUGx1Z2luLmxvY2tFbmFibGVkQ29sdW1ucygpO1xyXG5cdFx0XHRcdHJldHVybiBpc0xvY2tlZC5sZWZ0Lmxlbmd0aCA+IDAgfHwgaXNMb2NrZWQucmlnaHQubGVuZ3RoID4gMDtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdGlzU3VidGFibGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiB1dGlsLmhhc0NsYXNzKGRhdGF0YWJsZS53cmFwWzBdLCBwZnggKyAnZGF0YXRhYmxlLXN1YnRhYmxlJykgfHwgZmFsc2U7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogR2V0IHRvdGFsIGV4dHJhIHNwYWNlIG9mIGFuIGVsZW1lbnQgZm9yIHdpZHRoIGNhbGN1bGF0aW9uLFxyXG5cdFx0XHQgKiBpbmNsdWRpbmcgcGFkZGluZywgbWFyZ2luLCBib3JkZXJcclxuXHRcdFx0ICogQHBhcmFtIGVsZW1lbnRcclxuXHRcdFx0ICogQHJldHVybnMge251bWJlcn1cclxuXHRcdFx0ICovXHJcblx0XHRcdGdldEV4dHJhU3BhY2U6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuXHRcdFx0XHR2YXIgcGFkZGluZyA9IHBhcnNlSW50KCQoZWxlbWVudCkuY3NzKCdwYWRkaW5nUmlnaHQnKSkgK1xyXG5cdFx0XHRcdFx0cGFyc2VJbnQoJChlbGVtZW50KS5jc3MoJ3BhZGRpbmdMZWZ0JykpO1xyXG5cdFx0XHRcdHZhciBtYXJnaW4gPSBwYXJzZUludCgkKGVsZW1lbnQpLmNzcygnbWFyZ2luUmlnaHQnKSkgK1xyXG5cdFx0XHRcdFx0cGFyc2VJbnQoJChlbGVtZW50KS5jc3MoJ21hcmdpbkxlZnQnKSk7XHJcblx0XHRcdFx0dmFyIGJvcmRlciA9IE1hdGguY2VpbChcclxuXHRcdFx0XHRcdCQoZWxlbWVudCkuY3NzKCdib3JkZXItcmlnaHQtd2lkdGgnKS5yZXBsYWNlKCdweCcsICcnKSk7XHJcblx0XHRcdFx0cmV0dXJuIHBhZGRpbmcgKyBtYXJnaW4gKyBib3JkZXI7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogSW5zZXJ0IGRhdGEgb2YgYXJyYXkgaW50byB7eyB9fSB0ZW1wbGF0ZSBwbGFjZWhvbGRlclxyXG5cdFx0XHQgKiBAcGFyYW0gdGVtcGxhdGVcclxuXHRcdFx0ICogQHBhcmFtIGRhdGFcclxuXHRcdFx0ICogQHJldHVybnMgeyp9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRkYXRhUGxhY2Vob2xkZXI6IGZ1bmN0aW9uKHRlbXBsYXRlLCBkYXRhKSB7XHJcblx0XHRcdFx0dmFyIHJlc3VsdCA9IHRlbXBsYXRlO1xyXG5cdFx0XHRcdCQuZWFjaChkYXRhLCBmdW5jdGlvbihrZXksIHZhbCkge1xyXG5cdFx0XHRcdFx0cmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UoJ3t7JyArIGtleSArICd9fScsIHZhbCk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBHZXQgdGFibGUgdW5pcXVlIElEXHJcblx0XHRcdCAqIE5vdGU6IHRhYmxlIHVuaXF1ZSBjaGFuZ2UgZWFjaCB0aW1lIHJlZnJlc2hlZFxyXG5cdFx0XHQgKiBAcGFyYW0gc3VmZml4XHJcblx0XHRcdCAqIEByZXR1cm5zIHsqfVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0Z2V0VGFibGVJZDogZnVuY3Rpb24oc3VmZml4KSB7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBzdWZmaXggPT09ICd1bmRlZmluZWQnKSBzdWZmaXggPSAnJztcclxuXHRcdFx0XHR2YXIgaWQgPSAkKGRhdGF0YWJsZSkuYXR0cignaWQnKTtcclxuXHRcdFx0XHRpZiAodHlwZW9mIGlkID09PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0aWQgPSAkKGRhdGF0YWJsZSkuYXR0cignY2xhc3MnKS5zcGxpdCgnICcpWzBdO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gaWQgKyBzdWZmaXg7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogR2V0IHRhYmxlIHByZWZpeCB3aXRoIGRlcHRoIG51bWJlclxyXG5cdFx0XHQgKi9cclxuXHRcdFx0Z2V0VGFibGVQcmVmaXg6IGZ1bmN0aW9uKHN1ZmZpeCkge1xyXG5cdFx0XHRcdGlmICh0eXBlb2Ygc3VmZml4ICE9PSAndW5kZWZpbmVkJykgc3VmZml4ID0gJy0nICsgc3VmZml4O1xyXG5cdFx0XHRcdHJldHVybiBQbHVnaW4uZ2V0VGFibGVJZCgpICsgJy0nICsgUGx1Z2luLmdldERlcHRoKCkgKyBzdWZmaXg7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogR2V0IGN1cnJlbnQgdGFibGUgZGVwdGggb2Ygc3ViIHRhYmxlXHJcblx0XHRcdCAqIEByZXR1cm5zIHtudW1iZXJ9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRnZXREZXB0aDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIGRlcHRoID0gMDtcclxuXHRcdFx0XHR2YXIgdGFibGUgPSBkYXRhdGFibGUudGFibGU7XHJcblx0XHRcdFx0ZG8ge1xyXG5cdFx0XHRcdFx0dGFibGUgPSAkKHRhYmxlKS5wYXJlbnRzKCcuJyArIHBmeCArICdkYXRhdGFibGUtdGFibGUnKTtcclxuXHRcdFx0XHRcdGRlcHRoKys7XHJcblx0XHRcdFx0fSB3aGlsZSAoJCh0YWJsZSkubGVuZ3RoID4gMCk7XHJcblx0XHRcdFx0cmV0dXJuIGRlcHRoO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEtlZXAgc3RhdGUgaXRlbVxyXG5cdFx0XHQgKiBAcGFyYW0ga2V5XHJcblx0XHRcdCAqIEBwYXJhbSB2YWx1ZVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0c3RhdGVLZWVwOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XHJcblx0XHRcdFx0a2V5ID0gUGx1Z2luLmdldFRhYmxlUHJlZml4KGtleSk7XHJcblx0XHRcdFx0aWYgKFBsdWdpbi5nZXRPcHRpb24oJ2RhdGEuc2F2ZVN0YXRlJykgPT09IGZhbHNlKSByZXR1cm47XHJcblx0XHRcdFx0aWYgKGxvY2FsU3RvcmFnZSkge1xyXG5cdFx0XHRcdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBHZXQgc3RhdGUgaXRlbVxyXG5cdFx0XHQgKiBAcGFyYW0ga2V5XHJcblx0XHRcdCAqIEBwYXJhbSBkZWZWYWx1ZVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0c3RhdGVHZXQ6IGZ1bmN0aW9uKGtleSwgZGVmVmFsdWUpIHtcclxuXHRcdFx0XHRrZXkgPSBQbHVnaW4uZ2V0VGFibGVQcmVmaXgoa2V5KTtcclxuXHRcdFx0XHRpZiAoUGx1Z2luLmdldE9wdGlvbignZGF0YS5zYXZlU3RhdGUnKSA9PT0gZmFsc2UpIHJldHVybjtcclxuXHRcdFx0XHR2YXIgdmFsdWUgPSBudWxsO1xyXG5cdFx0XHRcdGlmIChsb2NhbFN0b3JhZ2UpIHtcclxuXHRcdFx0XHRcdHZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgIT09IG51bGwpIHtcclxuXHRcdFx0XHRcdHJldHVybiBKU09OLnBhcnNlKHZhbHVlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogVXBkYXRlIGRhdGEgaW4gc3RhdGUgd2l0aG91dCBjbGVhciBleGlzdGluZ1xyXG5cdFx0XHQgKiBAcGFyYW0ga2V5XHJcblx0XHRcdCAqIEBwYXJhbSB2YWx1ZVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0c3RhdGVVcGRhdGU6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcclxuXHRcdFx0XHR2YXIgb3JpID0gUGx1Z2luLnN0YXRlR2V0KGtleSk7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBvcmkgPT09ICd1bmRlZmluZWQnIHx8IG9yaSA9PT0gbnVsbCkgb3JpID0ge307XHJcblx0XHRcdFx0UGx1Z2luLnN0YXRlS2VlcChrZXksICQuZXh0ZW5kKHt9LCBvcmksIHZhbHVlKSk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogUmVtb3ZlIHN0YXRlIGl0ZW1cclxuXHRcdFx0ICogQHBhcmFtIGtleVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0c3RhdGVSZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xyXG5cdFx0XHRcdGtleSA9IFBsdWdpbi5nZXRUYWJsZVByZWZpeChrZXkpO1xyXG5cdFx0XHRcdGlmIChsb2NhbFN0b3JhZ2UpIHtcclxuXHRcdFx0XHRcdGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEdldCB0b3RhbCBjb2x1bW5zLlxyXG5cdFx0XHQgKi9cclxuXHRcdFx0Z2V0VG90YWxDb2x1bW5zOiBmdW5jdGlvbih0YWJsZVBhcnQpIHtcclxuXHRcdFx0XHRpZiAodHlwZW9mIHRhYmxlUGFydCA9PT0gJ3VuZGVmaW5lZCcpIHRhYmxlUGFydCA9IGRhdGF0YWJsZS50YWJsZUJvZHk7XHJcblx0XHRcdFx0cmV0dXJuICQodGFibGVQYXJ0KS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93JykuZmlyc3QoKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtY2VsbCcpLmxlbmd0aDtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBHZXQgdGFibGUgcm93LiBVc2VmdWwgdG8gZ2V0IHJvdyB3aGVuIGN1cnJlbnQgdGFibGUgaXMgaW4gbG9ja1xyXG5cdFx0XHQgKiBtb2RlLiBDYW4gYmUgdXNlZCBmb3IgYm90aCBsb2NrIGFuZCBub3JtYWwgdGFibGUgbW9kZS4gQnlcclxuXHRcdFx0ICogZGVmYXVsdCwgcmV0dXJuaW5nIHJlc3VsdCB3aWxsIGJlIGluIGEgbGlzdCBvZiA8dGQ+LlxyXG5cdFx0XHQgKiBAcGFyYW0gdGFibGVQYXJ0XHJcblx0XHRcdCAqIEBwYXJhbSByb3cgMS1iYXNlZCBpbmRleFxyXG5cdFx0XHQgKiBAcGFyYW0gdGRPbmx5IE9wdGlvbmFsLiBEZWZhdWx0IHRydWVcclxuXHRcdFx0ICogQHJldHVybnMgeyp9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRnZXRPbmVSb3c6IGZ1bmN0aW9uKHRhYmxlUGFydCwgcm93LCB0ZE9ubHkpIHtcclxuXHRcdFx0XHRpZiAodHlwZW9mIHRkT25seSA9PT0gJ3VuZGVmaW5lZCcpIHRkT25seSA9IHRydWU7XHJcblx0XHRcdFx0Ly8gZ2V0IGxpc3Qgb2YgPHRyPlxyXG5cdFx0XHRcdHZhciByZXN1bHQgPSAkKHRhYmxlUGFydCkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdzpub3QoLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdy1kZXRhaWwpOm50aC1jaGlsZCgnICsgcm93ICsgJyknKTtcclxuXHRcdFx0XHRpZiAodGRPbmx5KSB7XHJcblx0XHRcdFx0XHQvLyBnZXQgbGlzdCBvZiA8dGQ+IG9yIDx0aD5cclxuXHRcdFx0XHRcdHJlc3VsdCA9IHJlc3VsdC5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtY2VsbCcpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFNvcnQgdGFibGUgcm93IGF0IEhUTUwgbGV2ZWwgYnkgY29sdW1uIGluZGV4LlxyXG5cdFx0XHQgKiB0b2RvOyBOb3QgaW4gdXNlLlxyXG5cdFx0XHQgKiBAcGFyYW0gaGVhZGVyIEhlYWRlciBzb3J0IGNsaWNrZWRcclxuXHRcdFx0ICogQHBhcmFtIHNvcnQgYXNjfGRlc2MuIE9wdGlvbmFsLiBEZWZhdWx0IGFzY1xyXG5cdFx0XHQgKiBAcGFyYW0gaW50IEJvb2xlYW4uIE9wdGlvbmFsLiBDb21wYXJpc29uIHZhbHVlIHBhcnNlIHRvIGludGVnZXIuXHJcblx0XHRcdCAqICAgICBEZWZhdWx0IGZhbHNlXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRzb3J0Q29sdW1uOiBmdW5jdGlvbihoZWFkZXIsIHNvcnQsIGludCkge1xyXG5cdFx0XHRcdGlmICh0eXBlb2Ygc29ydCA9PT0gJ3VuZGVmaW5lZCcpIHNvcnQgPSAnYXNjJzsgLy8gZGVzY1xyXG5cdFx0XHRcdGlmICh0eXBlb2YgaW50ID09PSAndW5kZWZpbmVkJykgaW50ID0gZmFsc2U7XHJcblxyXG5cdFx0XHRcdHZhciBjb2x1bW4gPSAkKGhlYWRlcikuaW5kZXgoKTtcclxuXHRcdFx0XHR2YXIgcm93cyA9ICQoZGF0YXRhYmxlLnRhYmxlQm9keSkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpO1xyXG5cdFx0XHRcdHZhciBoSW5kZXggPSAkKGhlYWRlcikuY2xvc2VzdCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWxvY2snKS5pbmRleCgpO1xyXG5cdFx0XHRcdGlmIChoSW5kZXggIT09IC0xKSB7XHJcblx0XHRcdFx0XHRyb3dzID0gJChkYXRhdGFibGUudGFibGVCb2R5KS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtbG9jazpudGgtY2hpbGQoJyArIChoSW5kZXggKyAxKSArICcpJykuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0dmFyIGNvbnRhaW5lciA9ICQocm93cykucGFyZW50KCk7XHJcblx0XHRcdFx0JChyb3dzKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcclxuXHRcdFx0XHRcdHZhciB0ZGEgPSAkKGEpLmZpbmQoJ3RkOm50aC1jaGlsZCgnICsgY29sdW1uICsgJyknKS50ZXh0KCk7XHJcblx0XHRcdFx0XHR2YXIgdGRiID0gJChiKS5maW5kKCd0ZDpudGgtY2hpbGQoJyArIGNvbHVtbiArICcpJykudGV4dCgpO1xyXG5cclxuXHRcdFx0XHRcdGlmIChpbnQpIHtcclxuXHRcdFx0XHRcdFx0Ly8gdXNlZnVsIGZvciBpbnRlZ2VyIHR5cGUgc29ydGluZ1xyXG5cdFx0XHRcdFx0XHR0ZGEgPSBwYXJzZUludCh0ZGEpO1xyXG5cdFx0XHRcdFx0XHR0ZGIgPSBwYXJzZUludCh0ZGIpO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGlmIChzb3J0ID09PSAnYXNjJykge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGRhID4gdGRiID8gMSA6IHRkYSA8IHRkYiA/IC0xIDogMDtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiB0ZGEgPCB0ZGIgPyAxIDogdGRhID4gdGRiID8gLTEgOiAwO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pLmFwcGVuZFRvKGNvbnRhaW5lcik7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogUGVyZm9ybSBzb3J0IHJlbW90ZSBhbmQgbG9jYWxcclxuXHRcdFx0ICovXHJcblx0XHRcdHNvcnRpbmc6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBzb3J0T2JqID0ge1xyXG5cdFx0XHRcdFx0aW5pdDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdGlmIChvcHRpb25zLnNvcnRhYmxlKSB7XHJcblx0XHRcdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGVIZWFkKS5cclxuXHRcdFx0XHRcdFx0XHRcdGZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsOm5vdCguJyArIHBmeCArICdkYXRhdGFibGUtY2VsbC1jaGVjayknKS5cclxuXHRcdFx0XHRcdFx0XHRcdGFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtY2VsbC1zb3J0JykuXHJcblx0XHRcdFx0XHRcdFx0XHRvZmYoJ2NsaWNrJykuXHJcblx0XHRcdFx0XHRcdFx0XHRvbignY2xpY2snLCBzb3J0T2JqLnNvcnRDbGljayk7XHJcblx0XHRcdFx0XHRcdFx0Ly8gZmlyc3QgaW5pdFxyXG5cdFx0XHRcdFx0XHRcdHNvcnRPYmouc2V0SWNvbigpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0c2V0SWNvbjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdHZhciBtZXRhID0gUGx1Z2luLmdldERhdGFTb3VyY2VQYXJhbSgnc29ydCcpO1xyXG5cdFx0XHRcdFx0XHRpZiAoJC5pc0VtcHR5T2JqZWN0KG1ldGEpKSByZXR1cm47XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgY29sdW1uID0gUGx1Z2luLmdldENvbHVtbkJ5RmllbGQobWV0YS5maWVsZCk7XHJcblx0XHRcdFx0XHRcdC8vIHNvcnQgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29sdW1uXHJcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY29sdW1uID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbi5zb3J0YWJsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29sdW1uLnNvcnRhYmxlID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbi5zZWxlY3RvciAhPT0gJ3VuZGVmaW5lZCcgJiYgY29sdW1uLnNlbGVjdG9yID09PSB0cnVlKSByZXR1cm47XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBzb3J0IGljb24gYmVzaWRlIGNvbHVtbiBoZWFkZXJcclxuXHRcdFx0XHRcdFx0dmFyIHRkID0gJChkYXRhdGFibGUudGFibGVIZWFkKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtY2VsbFtkYXRhLWZpZWxkPVwiJyArIG1ldGEuZmllbGQgKyAnXCJdJykuYXR0cignZGF0YS1zb3J0JywgbWV0YS5zb3J0KTtcclxuXHRcdFx0XHRcdFx0dmFyIHNvcnRpbmcgPSAkKHRkKS5maW5kKCdzcGFuJyk7XHJcblx0XHRcdFx0XHRcdHZhciBpY29uID0gJChzb3J0aW5nKS5maW5kKCdpJyk7XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgaWNvbnMgPSBQbHVnaW4uZ2V0T3B0aW9uKCdsYXlvdXQuaWNvbnMuc29ydCcpO1xyXG5cdFx0XHRcdFx0XHQvLyB1cGRhdGUgc29ydCBpY29uOyBkZXNjICYgYXNjXHJcblx0XHRcdFx0XHRcdGlmICgkKGljb24pLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0XHRcdFx0XHQkKGljb24pLnJlbW92ZUF0dHIoJ2NsYXNzJykuYWRkQ2xhc3MoaWNvbnNbbWV0YS5zb3J0XSk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0JChzb3J0aW5nKS5hcHBlbmQoJCgnPGkvPicpLmFkZENsYXNzKGljb25zW21ldGEuc29ydF0pKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gc2V0IHNvcnRlZCBjbGFzcyB0byBoZWFkZXIgb24gaW5pdFxyXG5cdFx0XHRcdFx0XHQkKHRkKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLWNlbGwtc29ydGVkJyk7XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0c29ydENsaWNrOiBmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0XHRcdHZhciBtZXRhID0gUGx1Z2luLmdldERhdGFTb3VyY2VQYXJhbSgnc29ydCcpO1xyXG5cdFx0XHRcdFx0XHR2YXIgZmllbGQgPSAkKHRoaXMpLmRhdGEoJ2ZpZWxkJyk7XHJcblx0XHRcdFx0XHRcdHZhciBjb2x1bW4gPSBQbHVnaW4uZ2V0Q29sdW1uQnlGaWVsZChmaWVsZCk7XHJcblx0XHRcdFx0XHRcdC8vIHNvcnQgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29sdW1uXHJcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY29sdW1uID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbi5zb3J0YWJsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29sdW1uLnNvcnRhYmxlID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbi5zZWxlY3RvciAhPT0gJ3VuZGVmaW5lZCcgJiYgY29sdW1uLnNlbGVjdG9yID09PSB0cnVlKSByZXR1cm47XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBzZXQgc29ydGVkIGNsYXNzIHRvIGhlYWRlclxyXG5cdFx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUhlYWQpLmZpbmQoJ3RoJykucmVtb3ZlQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1jZWxsLXNvcnRlZCcpO1xyXG5cdFx0XHRcdFx0XHR1dGlsLmFkZENsYXNzKHRoaXMsIHBmeCArICdkYXRhdGFibGUtY2VsbC1zb3J0ZWQnKTtcclxuXHJcblx0XHRcdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlSGVhZCkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWNlbGwgPiBzcGFuID4gaScpLnJlbW92ZSgpO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMuc29ydGFibGUpIHtcclxuXHRcdFx0XHRcdFx0XHRQbHVnaW4uc3Bpbm5lckNhbGxiYWNrKHRydWUpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHR2YXIgc29ydCA9ICdkZXNjJztcclxuXHRcdFx0XHRcdFx0XHRpZiAoUGx1Z2luLmdldE9iamVjdCgnZmllbGQnLCBtZXRhKSA9PT0gZmllbGQpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHNvcnQgPSBQbHVnaW4uZ2V0T2JqZWN0KCdzb3J0JywgbWV0YSk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyB0b2dnbGUgc29ydFxyXG5cdFx0XHRcdFx0XHRcdHNvcnQgPSB0eXBlb2Ygc29ydCA9PT0gJ3VuZGVmaW5lZCcgfHwgc29ydCA9PT0gJ2Rlc2MnXHJcblx0XHRcdFx0XHRcdFx0XHQ/ICdhc2MnXHJcblx0XHRcdFx0XHRcdFx0XHQ6ICdkZXNjJztcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gdXBkYXRlIGZpZWxkIGFuZCBzb3J0IHBhcmFtc1xyXG5cdFx0XHRcdFx0XHRcdG1ldGEgPSB7ZmllbGQ6IGZpZWxkLCBzb3J0OiBzb3J0fTtcclxuXHRcdFx0XHRcdFx0XHRQbHVnaW4uc2V0RGF0YVNvdXJjZVBhcmFtKCdzb3J0JywgbWV0YSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHNvcnRPYmouc2V0SWNvbigpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0UGx1Z2luLmRhdGFSZW5kZXIoJ3NvcnQnKTtcclxuXHRcdFx0XHRcdFx0XHRcdCQoZGF0YXRhYmxlKS50cmlnZ2VyKHBmeCArICdkYXRhdGFibGUtb24tc29ydCcsIG1ldGEpO1xyXG5cdFx0XHRcdFx0XHRcdH0sIDMwMCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHRzb3J0T2JqLmluaXQoKTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBVcGRhdGUgSlNPTiBkYXRhIGxpc3QgbGlua2VkIHdpdGggc29ydCwgZmlsdGVyIGFuZCBwYWdpbmF0aW9uLlxyXG5cdFx0XHQgKiBDYWxsIHRoaXMgbWV0aG9kLCBiZWZvcmUgdXNpbmcgZGF0YVNldCB2YXJpYWJsZS5cclxuXHRcdFx0ICogQHJldHVybnMgeyp8bnVsbH1cclxuXHRcdFx0ICovXHJcblx0XHRcdGxvY2FsRGF0YVVwZGF0ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIHBhcmFtcyA9IFBsdWdpbi5nZXREYXRhU291cmNlUGFyYW0oKTtcclxuXHRcdFx0XHRpZiAodHlwZW9mIGRhdGF0YWJsZS5vcmlnaW5hbERhdGFTZXQgPT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRkYXRhdGFibGUub3JpZ2luYWxEYXRhU2V0ID0gZGF0YXRhYmxlLmRhdGFTZXQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR2YXIgZmllbGQgPSBQbHVnaW4uZ2V0T2JqZWN0KCdzb3J0LmZpZWxkJywgcGFyYW1zKTtcclxuXHRcdFx0XHR2YXIgc29ydCA9IFBsdWdpbi5nZXRPYmplY3QoJ3NvcnQuc29ydCcsIHBhcmFtcyk7XHJcblx0XHRcdFx0dmFyIGNvbHVtbiA9IFBsdWdpbi5nZXRDb2x1bW5CeUZpZWxkKGZpZWxkKTtcclxuXHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbiAhPT0gJ3VuZGVmaW5lZCcgJiYgUGx1Z2luLmdldE9wdGlvbignZGF0YS5zZXJ2ZXJTb3J0aW5nJykgIT09IHRydWUpIHtcclxuXHRcdFx0XHRcdGlmICh0eXBlb2YgY29sdW1uLnNvcnRDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG5cdFx0XHRcdFx0XHRkYXRhdGFibGUuZGF0YVNldCA9IGNvbHVtbi5zb3J0Q2FsbGJhY2soZGF0YXRhYmxlLm9yaWdpbmFsRGF0YVNldCwgc29ydCwgY29sdW1uKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGRhdGF0YWJsZS5kYXRhU2V0ID0gUGx1Z2luLnNvcnRDYWxsYmFjayhkYXRhdGFibGUub3JpZ2luYWxEYXRhU2V0LCBzb3J0LCBjb2x1bW4pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRkYXRhdGFibGUuZGF0YVNldCA9IGRhdGF0YWJsZS5vcmlnaW5hbERhdGFTZXQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBpZiBzZXJ2ZXIgZmlsdGVyIGVuYWJsZSwgZG9uJ3QgcGFzcyBsb2NhbCBmaWx0ZXJcclxuXHRcdFx0XHRpZiAodHlwZW9mIHBhcmFtcy5xdWVyeSA9PT0gJ29iamVjdCcgJiYgIVBsdWdpbi5nZXRPcHRpb24oJ2RhdGEuc2VydmVyRmlsdGVyaW5nJykpIHtcclxuXHRcdFx0XHRcdHBhcmFtcy5xdWVyeSA9IHBhcmFtcy5xdWVyeSB8fCB7fTtcclxuXHJcblx0XHRcdFx0XHR2YXIgbmVzdGVkU2VhcmNoID0gZnVuY3Rpb24ob2JqKSB7XHJcblx0XHRcdFx0XHRcdGZvciAodmFyIGZpZWxkIGluIG9iaikge1xyXG5cdFx0XHRcdFx0XHRcdGlmICghb2JqLmhhc093blByb3BlcnR5KGZpZWxkKSkgY29udGludWU7XHJcblx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBvYmpbZmllbGRdID09PSAnc3RyaW5nJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKG9ialtmaWVsZF0udG9Mb3dlckNhc2UoKSA9PSBzZWFyY2ggfHwgb2JqW2ZpZWxkXS50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc2VhcmNoKSAhPT0gLTEpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlb2Ygb2JqW2ZpZWxkXSA9PT0gJ251bWJlcicpIHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmIChvYmpbZmllbGRdID09PSBzZWFyY2gpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlb2Ygb2JqW2ZpZWxkXSA9PT0gJ29iamVjdCcpIHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmIChuZXN0ZWRTZWFyY2gob2JqW2ZpZWxkXSkpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdFx0dmFyIHNlYXJjaCA9ICQoUGx1Z2luLmdldE9wdGlvbignc2VhcmNoLmlucHV0JykpLnZhbCgpO1xyXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBzZWFyY2ggIT09ICd1bmRlZmluZWQnICYmIHNlYXJjaCAhPT0gJycpIHtcclxuXHRcdFx0XHRcdFx0c2VhcmNoID0gc2VhcmNoLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdFx0XHRcdGRhdGF0YWJsZS5kYXRhU2V0ID0gJC5ncmVwKGRhdGF0YWJsZS5kYXRhU2V0LCBuZXN0ZWRTZWFyY2gpO1xyXG5cdFx0XHRcdFx0XHQvLyByZW1vdmUgZ2VuZXJhbFNlYXJjaCBhcyB3ZSBkb24ndCBuZWVkIHRoaXMgZm9yIG5leHQgY29sdW1ucyBmaWx0ZXJcclxuXHRcdFx0XHRcdFx0ZGVsZXRlIHBhcmFtcy5xdWVyeVtQbHVnaW4uZ2V0R2VuZXJhbFNlYXJjaEtleSgpXTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyByZW1vdmUgZW1wdHkgZWxlbWVudCBmcm9tIGFycmF5XHJcblx0XHRcdFx0XHQkLmVhY2gocGFyYW1zLnF1ZXJ5LCBmdW5jdGlvbihrLCB2KSB7XHJcblx0XHRcdFx0XHRcdGlmICh2ID09PSAnJykge1xyXG5cdFx0XHRcdFx0XHRcdGRlbGV0ZSBwYXJhbXMucXVlcnlba107XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRcdC8vIGZpbHRlciBhcnJheSBieSBxdWVyeVxyXG5cdFx0XHRcdFx0ZGF0YXRhYmxlLmRhdGFTZXQgPSBQbHVnaW4uZmlsdGVyQXJyYXkoZGF0YXRhYmxlLmRhdGFTZXQsIHBhcmFtcy5xdWVyeSk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gcmVzZXQgYXJyYXkgaW5kZXhcclxuXHRcdFx0XHRcdGRhdGF0YWJsZS5kYXRhU2V0ID0gZGF0YXRhYmxlLmRhdGFTZXQuZmlsdGVyKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIGRhdGF0YWJsZS5kYXRhU2V0O1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFV0aWxpdHkgaGVscGVyIHRvIGZpbHRlciBhcnJheSBieSBvYmplY3QgcGFpciBvZiB7a2V5OnZhbHVlfVxyXG5cdFx0XHQgKiBAcGFyYW0gbGlzdFxyXG5cdFx0XHQgKiBAcGFyYW0gYXJnc1xyXG5cdFx0XHQgKiBAcGFyYW0gb3BlcmF0b3JcclxuXHRcdFx0ICogQHJldHVybnMgeyp9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRmaWx0ZXJBcnJheTogZnVuY3Rpb24obGlzdCwgYXJncywgb3BlcmF0b3IpIHtcclxuXHRcdFx0XHRpZiAodHlwZW9mIGxpc3QgIT09ICdvYmplY3QnKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gW107XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAodHlwZW9mIG9wZXJhdG9yID09PSAndW5kZWZpbmVkJykgb3BlcmF0b3IgPSAnQU5EJztcclxuXHJcblx0XHRcdFx0aWYgKHR5cGVvZiBhcmdzICE9PSAnb2JqZWN0Jykge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGxpc3Q7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRvcGVyYXRvciA9IG9wZXJhdG9yLnRvVXBwZXJDYXNlKCk7XHJcblxyXG5cdFx0XHRcdGlmICgkLmluQXJyYXkob3BlcmF0b3IsIFsnQU5EJywgJ09SJywgJ05PVCddKSA9PT0gLTEpIHtcclxuXHRcdFx0XHRcdHJldHVybiBbXTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHZhciBjb3VudCA9IE9iamVjdC5rZXlzKGFyZ3MpLmxlbmd0aDtcclxuXHRcdFx0XHR2YXIgZmlsdGVyZWQgPSBbXTtcclxuXHJcblx0XHRcdFx0JC5lYWNoKGxpc3QsIGZ1bmN0aW9uKGtleSwgb2JqKSB7XHJcblx0XHRcdFx0XHR2YXIgdG9fbWF0Y2ggPSBvYmo7XHJcblxyXG5cdFx0XHRcdFx0dmFyIG1hdGNoZWQgPSAwO1xyXG5cdFx0XHRcdFx0JC5lYWNoKGFyZ3MsIGZ1bmN0aW9uKG1fa2V5LCBtX3ZhbHVlKSB7XHJcblx0XHRcdFx0XHRcdG1fdmFsdWUgPSBtX3ZhbHVlIGluc3RhbmNlb2YgQXJyYXkgPyBtX3ZhbHVlIDogW21fdmFsdWVdO1xyXG5cdFx0XHRcdFx0XHR2YXIgbWF0Y2hfcHJvcGVydHkgPSBQbHVnaW4uZ2V0T2JqZWN0KG1fa2V5LCB0b19tYXRjaCk7XHJcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgbWF0Y2hfcHJvcGVydHkgIT09ICd1bmRlZmluZWQnICYmIG1hdGNoX3Byb3BlcnR5KSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIGxocyA9IG1hdGNoX3Byb3BlcnR5LnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0XHRcdFx0XHRtX3ZhbHVlLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmIChpdGVtLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSA9PSBsaHMgfHwgbGhzLmluZGV4T2YoaXRlbS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkpICE9PSAtMSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRtYXRjaGVkKys7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRcdGlmICgoJ0FORCcgPT0gb3BlcmF0b3IgJiYgbWF0Y2hlZCA9PSBjb3VudCkgfHxcclxuXHRcdFx0XHRcdFx0KCdPUicgPT0gb3BlcmF0b3IgJiYgbWF0Y2hlZCA+IDApIHx8XHJcblx0XHRcdFx0XHRcdCgnTk9UJyA9PSBvcGVyYXRvciAmJiAwID09IG1hdGNoZWQpKSB7XHJcblx0XHRcdFx0XHRcdGZpbHRlcmVkW2tleV0gPSBvYmo7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdGxpc3QgPSBmaWx0ZXJlZDtcclxuXHJcblx0XHRcdFx0cmV0dXJuIGxpc3Q7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogUmVzZXQgbG9jayBjb2x1bW4gc2Nyb2xsIHRvIDAgd2hlbiByZXNpemVcclxuXHRcdFx0ICovXHJcblx0XHRcdHJlc2V0U2Nyb2xsOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAodHlwZW9mIG9wdGlvbnMuZGV0YWlsID09PSAndW5kZWZpbmVkJyAmJiBQbHVnaW4uZ2V0RGVwdGgoKSA9PT0gMSkge1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGUpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKS5jc3MoJ2xlZnQnLCAwKTtcclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtbG9jaycpLmNzcygndG9wJywgMCk7XHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUJvZHkpLnNjcm9sbFRvcCgwKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogR2V0IGNvbHVtbiBvcHRpb25zIGJ5IGZpZWxkXHJcblx0XHRcdCAqIEBwYXJhbSBmaWVsZFxyXG5cdFx0XHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuXHRcdFx0ICovXHJcblx0XHRcdGdldENvbHVtbkJ5RmllbGQ6IGZ1bmN0aW9uKGZpZWxkKSB7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBmaWVsZCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcclxuXHRcdFx0XHR2YXIgcmVzdWx0O1xyXG5cdFx0XHRcdCQuZWFjaChvcHRpb25zLmNvbHVtbnMsIGZ1bmN0aW9uKGksIGNvbHVtbikge1xyXG5cdFx0XHRcdFx0aWYgKGZpZWxkID09PSBjb2x1bW4uZmllbGQpIHtcclxuXHRcdFx0XHRcdFx0cmVzdWx0ID0gY29sdW1uO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBHZXQgZGVmYXVsdCBzb3J0IGNvbHVtblxyXG5cdFx0XHQgKi9cclxuXHRcdFx0Z2V0RGVmYXVsdFNvcnRDb2x1bW46IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciByZXN1bHQ7XHJcblx0XHRcdFx0JC5lYWNoKG9wdGlvbnMuY29sdW1ucywgZnVuY3Rpb24oaSwgY29sdW1uKSB7XHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbi5zb3J0YWJsZSAhPT0gJ3VuZGVmaW5lZCdcclxuXHRcdFx0XHRcdFx0JiYgJC5pbkFycmF5KGNvbHVtbi5zb3J0YWJsZSwgWydhc2MnLCAnZGVzYyddKSAhPT0gLTEpIHtcclxuXHRcdFx0XHRcdFx0cmVzdWx0ID0ge3NvcnQ6IGNvbHVtbi5zb3J0YWJsZSwgZmllbGQ6IGNvbHVtbi5maWVsZH07XHJcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEhlbHBlciB0byBnZXQgZWxlbWVudCBkaW1lbnNpb25zLCB3aGVuIHRoZSBlbGVtZW50IGlzIGhpZGRlblxyXG5cdFx0XHQgKiBAcGFyYW0gZWxlbWVudFxyXG5cdFx0XHQgKiBAcGFyYW0gaW5jbHVkZU1hcmdpblxyXG5cdFx0XHQgKiBAcmV0dXJucyB7e3dpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBpbm5lcldpZHRoOiBudW1iZXIsXHJcblx0XHRcdCAqICAgICBpbm5lckhlaWdodDogbnVtYmVyLCBvdXRlcldpZHRoOiBudW1iZXIsIG91dGVySGVpZ2h0OlxyXG5cdFx0XHQgKiAgICAgbnVtYmVyfX1cclxuXHRcdFx0ICovXHJcblx0XHRcdGdldEhpZGRlbkRpbWVuc2lvbnM6IGZ1bmN0aW9uKGVsZW1lbnQsIGluY2x1ZGVNYXJnaW4pIHtcclxuXHRcdFx0XHR2YXIgcHJvcHMgPSB7XHJcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG5cdFx0XHRcdFx0XHR2aXNpYmlsaXR5OiAnaGlkZGVuJyxcclxuXHRcdFx0XHRcdFx0ZGlzcGxheTogJ2Jsb2NrJyxcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRkaW0gPSB7XHJcblx0XHRcdFx0XHRcdHdpZHRoOiAwLFxyXG5cdFx0XHRcdFx0XHRoZWlnaHQ6IDAsXHJcblx0XHRcdFx0XHRcdGlubmVyV2lkdGg6IDAsXHJcblx0XHRcdFx0XHRcdGlubmVySGVpZ2h0OiAwLFxyXG5cdFx0XHRcdFx0XHRvdXRlcldpZHRoOiAwLFxyXG5cdFx0XHRcdFx0XHRvdXRlckhlaWdodDogMCxcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRoaWRkZW5QYXJlbnRzID0gJChlbGVtZW50KS5wYXJlbnRzKCkuYWRkQmFjaygpLm5vdCgnOnZpc2libGUnKTtcclxuXHRcdFx0XHRpbmNsdWRlTWFyZ2luID0gKHR5cGVvZiBpbmNsdWRlTWFyZ2luID09PSAnYm9vbGVhbicpXHJcblx0XHRcdFx0XHQ/IGluY2x1ZGVNYXJnaW5cclxuXHRcdFx0XHRcdDogZmFsc2U7XHJcblxyXG5cdFx0XHRcdHZhciBvbGRQcm9wcyA9IFtdO1xyXG5cdFx0XHRcdGhpZGRlblBhcmVudHMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdHZhciBvbGQgPSB7fTtcclxuXHJcblx0XHRcdFx0XHRmb3IgKHZhciBuYW1lIGluIHByb3BzKSB7XHJcblx0XHRcdFx0XHRcdG9sZFtuYW1lXSA9IHRoaXMuc3R5bGVbbmFtZV07XHJcblx0XHRcdFx0XHRcdHRoaXMuc3R5bGVbbmFtZV0gPSBwcm9wc1tuYW1lXTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRvbGRQcm9wcy5wdXNoKG9sZCk7XHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdGRpbS53aWR0aCA9ICQoZWxlbWVudCkud2lkdGgoKTtcclxuXHRcdFx0XHRkaW0ub3V0ZXJXaWR0aCA9ICQoZWxlbWVudCkub3V0ZXJXaWR0aChpbmNsdWRlTWFyZ2luKTtcclxuXHRcdFx0XHRkaW0uaW5uZXJXaWR0aCA9ICQoZWxlbWVudCkuaW5uZXJXaWR0aCgpO1xyXG5cdFx0XHRcdGRpbS5oZWlnaHQgPSAkKGVsZW1lbnQpLmhlaWdodCgpO1xyXG5cdFx0XHRcdGRpbS5pbm5lckhlaWdodCA9ICQoZWxlbWVudCkuaW5uZXJIZWlnaHQoKTtcclxuXHRcdFx0XHRkaW0ub3V0ZXJIZWlnaHQgPSAkKGVsZW1lbnQpLm91dGVySGVpZ2h0KGluY2x1ZGVNYXJnaW4pO1xyXG5cclxuXHRcdFx0XHRoaWRkZW5QYXJlbnRzLmVhY2goZnVuY3Rpb24oaSkge1xyXG5cdFx0XHRcdFx0dmFyIG9sZCA9IG9sZFByb3BzW2ldO1xyXG5cdFx0XHRcdFx0Zm9yICh2YXIgbmFtZSBpbiBwcm9wcykge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnN0eWxlW25hbWVdID0gb2xkW25hbWVdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gZGltO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Z2V0R2VuZXJhbFNlYXJjaEtleTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIHNlYXJjaElucHV0ID0gJChQbHVnaW4uZ2V0T3B0aW9uKCdzZWFyY2guaW5wdXQnKSk7XHJcblx0XHRcdFx0cmV0dXJuIFBsdWdpbi5nZXRPcHRpb24oJ3NlYXJjaC5rZXknKSB8fCAkKHNlYXJjaElucHV0KS5wcm9wKCduYW1lJyk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogR2V0IHZhbHVlIGJ5IGRvdCBub3RhdGlvbiBwYXRoIHN0cmluZyBhbmQgdG8gcHJldmVudCB1bmRlZmluZWRcclxuXHRcdFx0ICogZXJyb3JzXHJcblx0XHRcdCAqIEBwYXJhbSBwYXRoIFN0cmluZyBEb3Qgbm90YXRpb24gcGF0aCBpbiBzdHJpbmdcclxuXHRcdFx0ICogQHBhcmFtIG9iamVjdCBPYmplY3QgdG8gaXRlcmF0ZVxyXG5cdFx0XHQgKiBAcmV0dXJucyB7Kn1cclxuXHRcdFx0ICovXHJcblx0XHRcdGdldE9iamVjdDogZnVuY3Rpb24ocGF0aCwgb2JqZWN0KSB7XHJcblx0XHRcdFx0cmV0dXJuIHBhdGguc3BsaXQoJy4nKS5yZWR1Y2UoZnVuY3Rpb24ob2JqLCBpKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmpbaV0gIT09ICd1bmRlZmluZWQnID8gb2JqW2ldIDogbnVsbDtcclxuXHRcdFx0XHR9LCBvYmplY3QpO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEV4dGVuZCBvYmplY3RcclxuXHRcdFx0ICogQHBhcmFtIG9ialxyXG5cdFx0XHQgKiBAcGFyYW0gcGF0aFxyXG5cdFx0XHQgKiBAcGFyYW0gdmFsdWVcclxuXHRcdFx0ICogQHJldHVybnMgeyp9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRleHRlbmRPYmo6IGZ1bmN0aW9uKG9iaiwgcGF0aCwgdmFsdWUpIHtcclxuXHRcdFx0XHR2YXIgbGV2ZWxzID0gcGF0aC5zcGxpdCgnLicpLFxyXG5cdFx0XHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0XHRcdGZ1bmN0aW9uIGNyZWF0ZUxldmVsKGNoaWxkKSB7XHJcblx0XHRcdFx0XHR2YXIgbmFtZSA9IGxldmVsc1tpKytdO1xyXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBjaGlsZFtuYW1lXSAhPT0gJ3VuZGVmaW5lZCcgJiYgY2hpbGRbbmFtZV0gIT09IG51bGwpIHtcclxuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjaGlsZFtuYW1lXSAhPT0gJ29iamVjdCcgJiZcclxuXHRcdFx0XHRcdFx0XHR0eXBlb2YgY2hpbGRbbmFtZV0gIT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0XHRcdFx0XHRjaGlsZFtuYW1lXSA9IHt9O1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRjaGlsZFtuYW1lXSA9IHt9O1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKGkgPT09IGxldmVscy5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdFx0Y2hpbGRbbmFtZV0gPSB2YWx1ZTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGNyZWF0ZUxldmVsKGNoaWxkW25hbWVdKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGNyZWF0ZUxldmVsKG9iaik7XHJcblx0XHRcdFx0cmV0dXJuIG9iajtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHJvd0V2ZW5PZGQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdC8vIHJvdyBldmVuIGNsYXNzXHJcblx0XHRcdFx0JChkYXRhdGFibGUudGFibGVCb2R5KS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93JykucmVtb3ZlQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1yb3ctZXZlbicpO1xyXG5cdFx0XHRcdGlmICgkKGRhdGF0YWJsZS53cmFwKS5oYXNDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXN1YnRhYmxlJykpIHtcclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlQm9keSkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdzpub3QoLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdy1kZXRhaWwpOmV2ZW4nKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXJvdy1ldmVuJyk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlQm9keSkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdzpudGgtY2hpbGQoZXZlbiknKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXJvdy1ldmVuJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqKioqKioqKioqKioqKioqKioqXHJcblx0XHRcdCAqKiBQVUJMSUMgQVBJIE1FVEhPRFNcclxuXHRcdFx0ICoqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuXHRcdFx0Ly8gZGVsYXkgdGltZXJcclxuXHRcdFx0dGltZXI6IDAsXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogUmVkcmF3IGRhdGF0YWJsZSBieSByZWNhbGN1bGF0aW5nIGl0cyBET00gZWxlbWVudHMsIGV0Yy5cclxuXHRcdFx0ICogQHJldHVybnMge2pRdWVyeX1cclxuXHRcdFx0ICovXHJcblx0XHRcdHJlZHJhdzogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0UGx1Z2luLmFkanVzdENlbGxzV2lkdGguY2FsbCgpO1xyXG5cdFx0XHRcdGlmIChQbHVnaW4uaXNMb2NrZWQoKSkge1xyXG5cdFx0XHRcdFx0Ly8gZml4IGhpZGluZyBjZWxsIHdpZHRoIGlzc3VlXHJcblx0XHRcdFx0XHRQbHVnaW4uc2Nyb2xsYmFyKCk7XHJcblx0XHRcdFx0XHRQbHVnaW4ucmVzZXRTY3JvbGwoKTtcclxuXHRcdFx0XHRcdFBsdWdpbi5hZGp1c3RDZWxsc0hlaWdodC5jYWxsKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFBsdWdpbi5hZGp1c3RMb2NrQ29udGFpbmVyLmNhbGwoKTtcclxuXHRcdFx0XHRQbHVnaW4uaW5pdEhlaWdodC5jYWxsKCk7XHJcblx0XHRcdFx0cmV0dXJuIGRhdGF0YWJsZTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBTaG9ydGNvZGUgdG8gcmVsb2FkXHJcblx0XHRcdCAqIEByZXR1cm5zIHtqUXVlcnl9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRsb2FkOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRQbHVnaW4ucmVsb2FkKCk7XHJcblx0XHRcdFx0cmV0dXJuIGRhdGF0YWJsZTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBEYXRhc291cmNlIHJlbG9hZFxyXG5cdFx0XHQgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0cmVsb2FkOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgZGVsYXkgPSAoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oY2FsbGJhY2ssIG1zKSB7XHJcblx0XHRcdFx0XHRcdGNsZWFyVGltZW91dChQbHVnaW4udGltZXIpO1xyXG5cdFx0XHRcdFx0XHRQbHVnaW4udGltZXIgPSBzZXRUaW1lb3V0KGNhbGxiYWNrLCBtcyk7XHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdH0pKCk7XHJcblx0XHRcdFx0ZGVsYXkoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHQvLyBsb2NhbCBvbmx5LiByZW1vdGUgcGFnaW5hdGlvbiB3aWxsIHNraXAgdGhpcyBibG9ja1xyXG5cdFx0XHRcdFx0aWYgKCFvcHRpb25zLmRhdGEuc2VydmVyRmlsdGVyaW5nKSB7XHJcblx0XHRcdFx0XHRcdFBsdWdpbi5sb2NhbERhdGFVcGRhdGUoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFBsdWdpbi5kYXRhUmVuZGVyKCk7XHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZSkudHJpZ2dlcihwZnggKyAnZGF0YXRhYmxlLW9uLXJlbG9hZGVkJyk7XHJcblx0XHRcdFx0fSwgUGx1Z2luLmdldE9wdGlvbignc2VhcmNoLmRlbGF5JykpO1xyXG5cdFx0XHRcdHJldHVybiBkYXRhdGFibGU7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogR2V0IHJlY29yZCBieSByZWNvcmQgSURcclxuXHRcdFx0ICogQHBhcmFtIGlkXHJcblx0XHRcdCAqIEByZXR1cm5zIHtqUXVlcnl9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRnZXRSZWNvcmQ6IGZ1bmN0aW9uKGlkKSB7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBkYXRhdGFibGUudGFibGVCb2R5ID09PSAndW5kZWZpbmVkJykgZGF0YXRhYmxlLnRhYmxlQm9keSA9ICQoZGF0YXRhYmxlLnRhYmxlKS5jaGlsZHJlbigndGJvZHknKTtcclxuXHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUJvZHkpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsOmZpcnN0LWNoaWxkJykuZWFjaChmdW5jdGlvbihpLCBjZWxsKSB7XHJcblx0XHRcdFx0XHRpZiAoaWQgPT0gJChjZWxsKS50ZXh0KCkpIHtcclxuXHRcdFx0XHRcdFx0dmFyIHJvd051bWJlciA9ICQoY2VsbCkuY2xvc2VzdCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpLmluZGV4KCkgKyAxO1xyXG5cdFx0XHRcdFx0XHRkYXRhdGFibGUuQVBJLnJlY29yZCA9IGRhdGF0YWJsZS5BUEkudmFsdWUgPSBQbHVnaW4uZ2V0T25lUm93KGRhdGF0YWJsZS50YWJsZUJvZHksIHJvd051bWJlcik7XHJcblx0XHRcdFx0XHRcdHJldHVybiBkYXRhdGFibGU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0cmV0dXJuIGRhdGF0YWJsZTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBAZGVwcmVjYXRlZCBpbiB2NS4wLjZcclxuXHRcdFx0ICogR2V0IGNvbHVtbiBvZiBjdXJyZW50IHJlY29yZCBJRFxyXG5cdFx0XHQgKiBAcGFyYW0gY29sdW1uTmFtZVxyXG5cdFx0XHQgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0Z2V0Q29sdW1uOiBmdW5jdGlvbihjb2x1bW5OYW1lKSB7XHJcblx0XHRcdFx0UGx1Z2luLnNldFNlbGVjdGVkUmVjb3JkcygpO1xyXG5cdFx0XHRcdGRhdGF0YWJsZS5BUEkudmFsdWUgPSAkKGRhdGF0YWJsZS5BUEkucmVjb3JkKS5maW5kKCdbZGF0YS1maWVsZD1cIicgKyBjb2x1bW5OYW1lICsgJ1wiXScpO1xyXG5cdFx0XHRcdHJldHVybiBkYXRhdGFibGU7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogRGVzdHJveSBkYXRhdGFibGUgdG8gb3JpZ2luYWwgRE9NIHN0YXRlIGJlZm9yZSBkYXRhdGFibGUgd2FzXHJcblx0XHRcdCAqIGluaXRpYWxpemVkXHJcblx0XHRcdCAqIEByZXR1cm5zIHtqUXVlcnl9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRkZXN0cm95OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHQkKGRhdGF0YWJsZSkucGFyZW50KCkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyJykucmVtb3ZlKCk7XHJcblx0XHRcdFx0dmFyIGluaXRpYWxEYXRhdGFibGUgPSAkKGRhdGF0YWJsZS5pbml0aWFsRGF0YXRhYmxlKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLWRlc3Ryb3llZCcpLnNob3coKTtcclxuXHRcdFx0XHQkKGRhdGF0YWJsZSkucmVwbGFjZVdpdGgoaW5pdGlhbERhdGF0YWJsZSk7XHJcblx0XHRcdFx0ZGF0YXRhYmxlID0gaW5pdGlhbERhdGF0YWJsZTtcclxuXHRcdFx0XHQkKGRhdGF0YWJsZSkudHJpZ2dlcihwZnggKyAnZGF0YXRhYmxlLW9uLWRlc3Ryb3knKTtcclxuXHRcdFx0XHRQbHVnaW4uaXNJbml0ID0gZmFsc2U7XHJcblxyXG5cdFx0XHRcdC8vIGNsZWFuIHVwIHZhcmlhYmxlc1xyXG5cdFx0XHRcdGluaXRpYWxEYXRhdGFibGUgPSBudWxsO1xyXG5cdFx0XHRcdGRhdGF0YWJsZS5kYXRhU2V0ID0gbnVsbDtcclxuXHRcdFx0XHRkYXRhdGFibGUub3JpZ2luYWxEYXRhU2V0ID0gbnVsbDtcclxuXHRcdFx0XHRkYXRhdGFibGUudGFibGVIZWFkID0gbnVsbDtcclxuXHRcdFx0XHRkYXRhdGFibGUudGFibGVCb2R5ID0gbnVsbDtcclxuXHRcdFx0XHRkYXRhdGFibGUudGFibGUgPSBudWxsO1xyXG5cdFx0XHRcdGRhdGF0YWJsZS53cmFwID0gbnVsbDtcclxuXHRcdFx0XHRkYXRhdGFibGUuQVBJID0ge1xyXG5cdFx0XHRcdFx0cmVjb3JkOiBudWxsLFxyXG5cdFx0XHRcdFx0dmFsdWU6IG51bGwsXHJcblx0XHRcdFx0XHRwYXJhbXM6IG51bGwsXHJcblx0XHRcdFx0fTtcclxuXHJcblx0XHRcdFx0UGx1Z2luLmFqYXhQYXJhbXMgPSB7fTtcclxuXHRcdFx0XHRQbHVnaW4ucGFnaW5nT2JqZWN0ID0ge307XHJcblx0XHRcdFx0UGx1Z2luLm5vZGVUciA9IFtdO1xyXG5cdFx0XHRcdFBsdWdpbi5ub2RlVGQgPSBbXTtcclxuXHRcdFx0XHRQbHVnaW4ubm9kZUNvbHMgPSBbXTtcclxuXHRcdFx0XHRQbHVnaW4ucmVjZW50Tm9kZSA9IFtdO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gaW5pdGlhbERhdGF0YWJsZTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBTb3J0IGJ5IGNvbHVtbiBmaWVsZFxyXG5cdFx0XHQgKiBAcGFyYW0gZmllbGRcclxuXHRcdFx0ICogQHBhcmFtIHNvcnRcclxuXHRcdFx0ICovXHJcblx0XHRcdHNvcnQ6IGZ1bmN0aW9uKGZpZWxkLCBzb3J0KSB7XHJcblx0XHRcdFx0Ly8gdG9nZ2xlIHNvcnRcclxuXHRcdFx0XHRzb3J0ID0gdHlwZW9mIHNvcnQgPT09ICd1bmRlZmluZWQnID8gJ2FzYycgOiBzb3J0O1xyXG5cclxuXHRcdFx0XHRQbHVnaW4uc3Bpbm5lckNhbGxiYWNrKHRydWUpO1xyXG5cclxuXHRcdFx0XHQvLyB1cGRhdGUgZmllbGQgYW5kIHNvcnQgcGFyYW1zXHJcblx0XHRcdFx0dmFyIG1ldGEgPSB7ZmllbGQ6IGZpZWxkLCBzb3J0OiBzb3J0fTtcclxuXHRcdFx0XHRQbHVnaW4uc2V0RGF0YVNvdXJjZVBhcmFtKCdzb3J0JywgbWV0YSk7XHJcblxyXG5cdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRQbHVnaW4uZGF0YVJlbmRlcignc29ydCcpO1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUpLnRyaWdnZXIocGZ4ICsgJ2RhdGF0YWJsZS1vbi1zb3J0JywgbWV0YSk7XHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUhlYWQpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsID4gc3BhbiA+IGknKS5yZW1vdmUoKTtcclxuXHRcdFx0XHR9LCAzMDApO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gZGF0YXRhYmxlO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEBkZXByZWNhdGVkIGluIHY1LjAuNlxyXG5cdFx0XHQgKiBHZXQgY3VycmVudCBzZWxlY3RlZCBjb2x1bW4gdmFsdWVcclxuXHRcdFx0ICogQHJldHVybnMge2pRdWVyeX1cclxuXHRcdFx0ICovXHJcblx0XHRcdGdldFZhbHVlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gJChkYXRhdGFibGUuQVBJLnZhbHVlKS50ZXh0KCk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogU2V0IGNoZWNrYm94IGFjdGl2ZVxyXG5cdFx0XHQgKiBAcGFyYW0gY2VsbCBKUXVlcnkgc2VsZWN0b3Igb3IgY2hlY2tib3ggSURcclxuXHRcdFx0ICovXHJcblx0XHRcdHNldEFjdGl2ZTogZnVuY3Rpb24oY2VsbCkge1xyXG5cdFx0XHRcdGlmICh0eXBlb2YgY2VsbCA9PT0gJ3N0cmluZycpIHtcclxuXHRcdFx0XHRcdC8vIHNldCBieSBjaGVja2JveCBpZFxyXG5cdFx0XHRcdFx0Y2VsbCA9ICQoZGF0YXRhYmxlLnRhYmxlQm9keSkuZmluZCgnLicgKyBwZnggKyAnY2hlY2tib3gtc2luZ2xlID4gW3R5cGU9XCJjaGVja2JveFwiXVt2YWx1ZT1cIicgKyBjZWxsICsgJ1wiXScpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0JChjZWxsKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XHJcblxyXG5cdFx0XHRcdHZhciBpZHMgPSBbXTtcclxuXHRcdFx0XHQkKGNlbGwpLmVhY2goZnVuY3Rpb24oaSwgdGQpIHtcclxuXHRcdFx0XHRcdC8vIG5vcm1hbCB0YWJsZVxyXG5cdFx0XHRcdFx0dmFyIHJvdyA9ICQodGQpLmNsb3Nlc3QoJ3RyJykuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1yb3ctYWN0aXZlJyk7XHJcblxyXG5cdFx0XHRcdFx0dmFyIGlkID0gJCh0ZCkuYXR0cigndmFsdWUnKTtcclxuXHRcdFx0XHRcdGlmICh0eXBlb2YgaWQgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdGlkcy5wdXNoKGlkKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0JChkYXRhdGFibGUpLnRyaWdnZXIocGZ4ICsgJ2RhdGF0YWJsZS1vbi1jaGVjaycsIFtpZHNdKTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBTZXQgY2hlY2tib3ggaW5hY3RpdmVcclxuXHRcdFx0ICogQHBhcmFtIGNlbGwgSlF1ZXJ5IHNlbGVjdG9yIG9yIGNoZWNrYm94IElEXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRzZXRJbmFjdGl2ZTogZnVuY3Rpb24oY2VsbCkge1xyXG5cdFx0XHRcdGlmICh0eXBlb2YgY2VsbCA9PT0gJ3N0cmluZycpIHtcclxuXHRcdFx0XHRcdC8vIHNldCBieSBjaGVja2JveCBpZFxyXG5cdFx0XHRcdFx0Y2VsbCA9ICQoZGF0YXRhYmxlLnRhYmxlQm9keSkuZmluZCgnLicgKyBwZnggKyAnY2hlY2tib3gtc2luZ2xlID4gW3R5cGU9XCJjaGVja2JveFwiXVt2YWx1ZT1cIicgKyBjZWxsICsgJ1wiXScpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0JChjZWxsKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG5cclxuXHRcdFx0XHR2YXIgaWRzID0gW107XHJcblx0XHRcdFx0JChjZWxsKS5lYWNoKGZ1bmN0aW9uKGksIHRkKSB7XHJcblx0XHRcdFx0XHQvLyBub3JtYWwgdGFibGVcclxuXHRcdFx0XHRcdHZhciByb3cgPSAkKHRkKS5jbG9zZXN0KCd0cicpLnJlbW92ZUNsYXNzKHBmeCArICdkYXRhdGFibGUtcm93LWFjdGl2ZScpO1xyXG5cclxuXHRcdFx0XHRcdHZhciBpZCA9ICQodGQpLmF0dHIoJ3ZhbHVlJyk7XHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIGlkICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHRpZHMucHVzaChpZCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdCQoZGF0YXRhYmxlKS50cmlnZ2VyKHBmeCArICdkYXRhdGFibGUtb24tdW5jaGVjaycsIFtpZHNdKTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBTZXQgYWxsIGNoZWNrYm94ZXMgYWN0aXZlIG9yIGluYWN0aXZlXHJcblx0XHRcdCAqIEBwYXJhbSBhY3RpdmVcclxuXHRcdFx0ICovXHJcblx0XHRcdHNldEFjdGl2ZUFsbDogZnVuY3Rpb24oYWN0aXZlKSB7XHJcblx0XHRcdFx0dmFyIGNoZWNrYm94ZXMgPSAkKGRhdGF0YWJsZS50YWJsZSkuXHJcblx0XHRcdFx0XHRmaW5kKCc+IHRib2R5LCA+IHRoZWFkJykuXHJcblx0XHRcdFx0XHRmaW5kKCd0cicpLm5vdCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdy1zdWJ0YWJsZScpLlxyXG5cdFx0XHRcdFx0ZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWNlbGwtY2hlY2sgW3R5cGU9XCJjaGVja2JveFwiXScpO1xyXG5cdFx0XHRcdGlmIChhY3RpdmUpIHtcclxuXHRcdFx0XHRcdFBsdWdpbi5zZXRBY3RpdmUoY2hlY2tib3hlcyk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFBsdWdpbi5zZXRJbmFjdGl2ZShjaGVja2JveGVzKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogQGRlcHJlY2F0ZWQgaW4gdjUuMC42XHJcblx0XHRcdCAqIEdldCBzZWxlY3RlZCByb3dzIHdoaWNoIGFyZSBhY3RpdmVcclxuXHRcdFx0ICogQHJldHVybnMge2pRdWVyeX1cclxuXHRcdFx0ICovXHJcblx0XHRcdHNldFNlbGVjdGVkUmVjb3JkczogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0ZGF0YXRhYmxlLkFQSS5yZWNvcmQgPSAkKGRhdGF0YWJsZS50YWJsZUJvZHkpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3ctYWN0aXZlJyk7XHJcblx0XHRcdFx0cmV0dXJuIGRhdGF0YWJsZTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBHZXQgc2VsZWN0ZWQgcmVjb3Jkc1xyXG5cdFx0XHQgKiBAcmV0dXJucyB7bnVsbH1cclxuXHRcdFx0ICovXHJcblx0XHRcdGdldFNlbGVjdGVkUmVjb3JkczogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0Ly8gc3VwcG9ydCBvbGQgbWV0aG9kXHJcblx0XHRcdFx0UGx1Z2luLnNldFNlbGVjdGVkUmVjb3JkcygpO1xyXG5cdFx0XHRcdGRhdGF0YWJsZS5BUEkucmVjb3JkID0gZGF0YXRhYmxlLnJvd3MoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3ctYWN0aXZlJykubm9kZXMoKTtcclxuXHRcdFx0XHRyZXR1cm4gZGF0YXRhYmxlLkFQSS5yZWNvcmQ7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogR2V0IG9wdGlvbnMgYnkgZG90cyBub3RhdGlvbiBwYXRoXHJcblx0XHRcdCAqIEBwYXJhbSBwYXRoIFN0cmluZyBEb3Qgbm90YXRpb24gcGF0aCBpbiBzdHJpbmdcclxuXHRcdFx0ICogQHJldHVybnMgeyp9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRnZXRPcHRpb246IGZ1bmN0aW9uKHBhdGgpIHtcclxuXHRcdFx0XHRyZXR1cm4gUGx1Z2luLmdldE9iamVjdChwYXRoLCBvcHRpb25zKTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBTZXQgZ2xvYmFsIG9wdGlvbnMgbm9kZXMgYnkgZG90cyBub3RhdGlvbiBwYXRoXHJcblx0XHRcdCAqIEBwYXJhbSBwYXRoXHJcblx0XHRcdCAqIEBwYXJhbSBvYmplY3RcclxuXHRcdFx0ICovXHJcblx0XHRcdHNldE9wdGlvbjogZnVuY3Rpb24ocGF0aCwgb2JqZWN0KSB7XHJcblx0XHRcdFx0b3B0aW9ucyA9IFBsdWdpbi5leHRlbmRPYmoob3B0aW9ucywgcGF0aCwgb2JqZWN0KTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBTZWFyY2ggZmlsdGVyIGZvciBsb2NhbCAmIHJlbW90ZVxyXG5cdFx0XHQgKiBAcGFyYW0gdmFsdWVcclxuXHRcdFx0ICogQHBhcmFtIGNvbHVtbnMuIE9wdGlvbmFsIGxpc3Qgb2YgY29sdW1ucyB0byBiZSBmaWx0ZXJlZC5cclxuXHRcdFx0ICovXHJcblx0XHRcdHNlYXJjaDogZnVuY3Rpb24odmFsdWUsIGNvbHVtbnMpIHtcclxuXHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbnMgIT09ICd1bmRlZmluZWQnKSBjb2x1bW5zID0gJC5tYWtlQXJyYXkoY29sdW1ucyk7XHJcblx0XHRcdFx0dmFyIGRlbGF5ID0gKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGNhbGxiYWNrLCBtcykge1xyXG5cdFx0XHRcdFx0XHRjbGVhclRpbWVvdXQoUGx1Z2luLnRpbWVyKTtcclxuXHRcdFx0XHRcdFx0UGx1Z2luLnRpbWVyID0gc2V0VGltZW91dChjYWxsYmFjaywgbXMpO1xyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHR9KSgpO1xyXG5cclxuXHRcdFx0XHRkZWxheShmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdC8vIGdldCBxdWVyeSBwYXJhbWV0ZXJzXHJcblx0XHRcdFx0XHR2YXIgcXVlcnkgPSBQbHVnaW4uZ2V0RGF0YVNvdXJjZVF1ZXJ5KCk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gc2VhcmNoIG5vdCBieSBjb2x1bW5zXHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbnMgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0dmFyIGtleSA9IFBsdWdpbi5nZXRHZW5lcmFsU2VhcmNoS2V5KCk7XHJcblx0XHRcdFx0XHRcdHF1ZXJ5W2tleV0gPSB2YWx1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBzZWFyY2ggYnkgY29sdW1ucywgc3VwcG9ydCBtdWx0aXBsZSBjb2x1bW5zXHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbnMgPT09ICdvYmplY3QnKSB7XHJcblx0XHRcdFx0XHRcdCQuZWFjaChjb2x1bW5zLCBmdW5jdGlvbihrLCBjb2x1bW4pIHtcclxuXHRcdFx0XHRcdFx0XHRxdWVyeVtjb2x1bW5dID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHQvLyByZW1vdmUgZW1wdHkgZWxlbWVudCBmcm9tIGFycmF5c1xyXG5cdFx0XHRcdFx0XHQkLmVhY2gocXVlcnksIGZ1bmN0aW9uKGssIHYpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAodiA9PT0gJycgfHwgJC5pc0VtcHR5T2JqZWN0KHYpKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRkZWxldGUgcXVlcnlba107XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRQbHVnaW4uc2V0RGF0YVNvdXJjZVF1ZXJ5KHF1ZXJ5KTtcclxuXHJcblx0XHRcdFx0XHQvLyByZXNldCBwYWdpbmF0aW9uIHRvIDEgd2hlbiBkb2luZyBzZWVhcmNoaW5nXHJcblx0XHRcdFx0XHRkYXRhdGFibGUuc2V0RGF0YVNvdXJjZVBhcmFtKCdwYWdpbmF0aW9uJywgT2JqZWN0LmFzc2lnbih7fSwgZGF0YXRhYmxlLmdldERhdGFTb3VyY2VQYXJhbSgncGFnaW5hdGlvbicpLCB7cGFnZTogMX0pKTtcclxuXHJcblx0XHRcdFx0XHQvLyBsb2NhbCBmaWx0ZXIgb25seS4gcmVtb3RlIHBhZ2luYXRpb24gd2lsbCBza2lwIHRoaXMgYmxvY2tcclxuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5kYXRhLnNlcnZlckZpbHRlcmluZykge1xyXG5cdFx0XHRcdFx0XHRQbHVnaW4ubG9jYWxEYXRhVXBkYXRlKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRQbHVnaW4uZGF0YVJlbmRlcignc2VhcmNoJyk7XHJcblx0XHRcdFx0fSwgUGx1Z2luLmdldE9wdGlvbignc2VhcmNoLmRlbGF5JykpO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFNldCBkYXRhc291cmNlIHBhcmFtcyBleHRyYWN0XHJcblx0XHRcdCAqIEBwYXJhbSBwYXJhbVxyXG5cdFx0XHQgKiBAcGFyYW0gdmFsdWVcclxuXHRcdFx0ICovXHJcblx0XHRcdHNldERhdGFTb3VyY2VQYXJhbTogZnVuY3Rpb24ocGFyYW0sIHZhbHVlKSB7XHJcblx0XHRcdFx0ZGF0YXRhYmxlLkFQSS5wYXJhbXMgPSAkLmV4dGVuZCh7fSwge1xyXG5cdFx0XHRcdFx0cGFnaW5hdGlvbjoge3BhZ2U6IDEsIHBlcnBhZ2U6IFBsdWdpbi5nZXRPcHRpb24oJ2RhdGEucGFnZVNpemUnKX0sXHJcblx0XHRcdFx0XHRzb3J0OiBQbHVnaW4uZ2V0RGVmYXVsdFNvcnRDb2x1bW4oKSxcclxuXHRcdFx0XHRcdHF1ZXJ5OiB7fSxcclxuXHRcdFx0XHR9LCBkYXRhdGFibGUuQVBJLnBhcmFtcywgUGx1Z2luLnN0YXRlR2V0KFBsdWdpbi5zdGF0ZUlkKSk7XHJcblxyXG5cdFx0XHRcdGRhdGF0YWJsZS5BUEkucGFyYW1zID0gUGx1Z2luLmV4dGVuZE9iaihkYXRhdGFibGUuQVBJLnBhcmFtcywgcGFyYW0sIHZhbHVlKTtcclxuXHJcblx0XHRcdFx0UGx1Z2luLnN0YXRlS2VlcChQbHVnaW4uc3RhdGVJZCwgZGF0YXRhYmxlLkFQSS5wYXJhbXMpO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEdldCBkYXRhc291cmNlIHBhcmFtc1xyXG5cdFx0XHQgKiBAcGFyYW0gcGFyYW1cclxuXHRcdFx0ICovXHJcblx0XHRcdGdldERhdGFTb3VyY2VQYXJhbTogZnVuY3Rpb24ocGFyYW0pIHtcclxuXHRcdFx0XHRkYXRhdGFibGUuQVBJLnBhcmFtcyA9ICQuZXh0ZW5kKHt9LCB7XHJcblx0XHRcdFx0XHRwYWdpbmF0aW9uOiB7cGFnZTogMSwgcGVycGFnZTogUGx1Z2luLmdldE9wdGlvbignZGF0YS5wYWdlU2l6ZScpfSxcclxuXHRcdFx0XHRcdHNvcnQ6IFBsdWdpbi5nZXREZWZhdWx0U29ydENvbHVtbigpLFxyXG5cdFx0XHRcdFx0cXVlcnk6IHt9LFxyXG5cdFx0XHRcdH0sIGRhdGF0YWJsZS5BUEkucGFyYW1zLCBQbHVnaW4uc3RhdGVHZXQoUGx1Z2luLnN0YXRlSWQpKTtcclxuXHJcblx0XHRcdFx0aWYgKHR5cGVvZiBwYXJhbSA9PT0gJ3N0cmluZycpIHtcclxuXHRcdFx0XHRcdHJldHVybiBQbHVnaW4uZ2V0T2JqZWN0KHBhcmFtLCBkYXRhdGFibGUuQVBJLnBhcmFtcyk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gZGF0YXRhYmxlLkFQSS5wYXJhbXM7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogU2hvcnRjb2RlIHRvIGRhdGF0YWJsZS5nZXREYXRhU291cmNlUGFyYW0oJ3F1ZXJ5Jyk7XHJcblx0XHRcdCAqIEByZXR1cm5zIHsqfVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0Z2V0RGF0YVNvdXJjZVF1ZXJ5OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gUGx1Z2luLmdldERhdGFTb3VyY2VQYXJhbSgncXVlcnknKSB8fCB7fTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBTaG9ydGNvZGUgdG8gZGF0YXRhYmxlLnNldERhdGFTb3VyY2VQYXJhbSgncXVlcnknLCBxdWVyeSk7XHJcblx0XHRcdCAqIEBwYXJhbSBxdWVyeVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0c2V0RGF0YVNvdXJjZVF1ZXJ5OiBmdW5jdGlvbihxdWVyeSkge1xyXG5cdFx0XHRcdFBsdWdpbi5zZXREYXRhU291cmNlUGFyYW0oJ3F1ZXJ5JywgcXVlcnkpO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEdldCBjdXJyZW50IHBhZ2UgbnVtYmVyXHJcblx0XHRcdCAqIEByZXR1cm5zIHtudW1iZXJ9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRnZXRDdXJyZW50UGFnZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuICQoZGF0YXRhYmxlLnRhYmxlKS5cclxuXHRcdFx0XHRcdHNpYmxpbmdzKCcuJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXInKS5cclxuXHRcdFx0XHRcdGxhc3QoKS5cclxuXHRcdFx0XHRcdGZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1uYXYnKS5cclxuXHRcdFx0XHRcdGZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWxpbmstYWN0aXZlJykuXHJcblx0XHRcdFx0XHRkYXRhKCdwYWdlJykgfHwgMTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBHZXQgc2VsZWN0ZWQgZHJvcGRvd24gcGFnZSBzaXplXHJcblx0XHRcdCAqIEByZXR1cm5zIHsqfG51bWJlcn1cclxuXHRcdFx0ICovXHJcblx0XHRcdGdldFBhZ2VTaXplOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gJChkYXRhdGFibGUudGFibGUpLnNpYmxpbmdzKCcuJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXInKS5sYXN0KCkuZmluZCgnc2VsZWN0LicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLXNpemUnKS52YWwoKSB8fCAxMDtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBHZXQgdG90YWwgcm93c1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0Z2V0VG90YWxSb3dzOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gZGF0YXRhYmxlLkFQSS5wYXJhbXMucGFnaW5hdGlvbi50b3RhbDtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBHZXQgZnVsbCBkYXRhc2V0IGluIGdyaWRcclxuXHRcdFx0ICogQHJldHVybnMgeyp8bnVsbHxBcnJheX1cclxuXHRcdFx0ICovXHJcblx0XHRcdGdldERhdGFTZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBkYXRhdGFibGUub3JpZ2luYWxEYXRhU2V0O1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0bm9kZVRyOiBbXSxcclxuXHRcdFx0bm9kZVRkOiBbXSxcclxuXHRcdFx0bm9kZUNvbHM6IFtdLFxyXG5cdFx0XHRyZWNlbnROb2RlOiBbXSxcclxuXHJcblx0XHRcdHRhYmxlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAodHlwZW9mIGRhdGF0YWJsZS50YWJsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdHJldHVybiBkYXRhdGFibGUudGFibGU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFNlbGVjdCBhIHNpbmdsZSByb3cgZnJvbSB0aGUgdGFibGVcclxuXHRcdFx0ICogQHBhcmFtIHNlbGVjdG9yXHJcblx0XHRcdCAqIEByZXR1cm5zIHtqUXVlcnl9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRyb3c6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XHJcblx0XHRcdFx0UGx1Z2luLnJvd3Moc2VsZWN0b3IpO1xyXG5cdFx0XHRcdFBsdWdpbi5ub2RlVHIgPSBQbHVnaW4ucmVjZW50Tm9kZSA9ICQoUGx1Z2luLm5vZGVUcikuZmlyc3QoKTtcclxuXHRcdFx0XHRyZXR1cm4gZGF0YXRhYmxlO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFNlbGVjdCBtdWx0aXBsZSByb3dzIGZyb20gdGhlIHRhYmxlXHJcblx0XHRcdCAqIEBwYXJhbSBzZWxlY3RvclxyXG5cdFx0XHQgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0cm93czogZnVuY3Rpb24oc2VsZWN0b3IpIHtcclxuXHRcdFx0XHRpZiAoUGx1Z2luLmlzTG9ja2VkKCkpIHtcclxuXHRcdFx0XHRcdFBsdWdpbi5ub2RlVHIgPSBQbHVnaW4ucmVjZW50Tm9kZSA9ICQoZGF0YXRhYmxlLnRhYmxlQm9keSkuZmluZChzZWxlY3RvcikuZmlsdGVyKCcuJyArIHBmeCArICdkYXRhdGFibGUtbG9jay1zY3JvbGwgPiAuJyArIHBmeCArICdkYXRhdGFibGUtcm93Jyk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFBsdWdpbi5ub2RlVHIgPSBQbHVnaW4ucmVjZW50Tm9kZSA9ICQoZGF0YXRhYmxlLnRhYmxlQm9keSkuZmluZChzZWxlY3RvcikuZmlsdGVyKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93Jyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBkYXRhdGFibGU7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogU2VsZWN0IGEgc2luZ2xlIGNvbHVtbiBmcm9tIHRoZSB0YWJsZVxyXG5cdFx0XHQgKiBAcGFyYW0gaW5kZXggemVyby1iYXNlZCBpbmRleFxyXG5cdFx0XHQgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0Y29sdW1uOiBmdW5jdGlvbihpbmRleCkge1xyXG5cdFx0XHRcdFBsdWdpbi5ub2RlQ29scyA9IFBsdWdpbi5yZWNlbnROb2RlID0gJChkYXRhdGFibGUudGFibGVCb2R5KS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtY2VsbDpudGgtY2hpbGQoJyArIChpbmRleCArIDEpICsgJyknKTtcclxuXHRcdFx0XHRyZXR1cm4gZGF0YXRhYmxlO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFNlbGVjdCBtdWx0aXBsZSBjb2x1bW5zIGZyb20gdGhlIHRhYmxlXHJcblx0XHRcdCAqIEBwYXJhbSBzZWxlY3RvclxyXG5cdFx0XHQgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0Y29sdW1uczogZnVuY3Rpb24oc2VsZWN0b3IpIHtcclxuXHRcdFx0XHR2YXIgY29udGV4dCA9IGRhdGF0YWJsZS50YWJsZTtcclxuXHRcdFx0XHRpZiAoUGx1Z2luLm5vZGVUciA9PT0gUGx1Z2luLnJlY2VudE5vZGUpIHtcclxuXHRcdFx0XHRcdGNvbnRleHQgPSBQbHVnaW4ubm9kZVRyO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR2YXIgY29sdW1ucyA9ICQoY29udGV4dCkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWNlbGxbZGF0YS1maWVsZD1cIicgKyBzZWxlY3RvciArICdcIl0nKTtcclxuXHRcdFx0XHRpZiAoY29sdW1ucy5sZW5ndGggPiAwKSB7XHJcblx0XHRcdFx0XHRQbHVnaW4ubm9kZUNvbHMgPSBQbHVnaW4ucmVjZW50Tm9kZSA9IGNvbHVtbnM7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFBsdWdpbi5ub2RlQ29scyA9IFBsdWdpbi5yZWNlbnROb2RlID0gJChjb250ZXh0KS5maW5kKHNlbGVjdG9yKS5maWx0ZXIoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBkYXRhdGFibGU7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRjZWxsOiBmdW5jdGlvbihzZWxlY3Rvcikge1xyXG5cdFx0XHRcdFBsdWdpbi5jZWxscyhzZWxlY3Rvcik7XHJcblx0XHRcdFx0UGx1Z2luLm5vZGVUZCA9IFBsdWdpbi5yZWNlbnROb2RlID0gJChQbHVnaW4ubm9kZVRkKS5maXJzdCgpO1xyXG5cdFx0XHRcdHJldHVybiBkYXRhdGFibGU7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRjZWxsczogZnVuY3Rpb24oc2VsZWN0b3IpIHtcclxuXHRcdFx0XHR2YXIgY2VsbHMgPSAkKGRhdGF0YWJsZS50YWJsZUJvZHkpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsJyk7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdGNlbGxzID0gJChjZWxscykuZmlsdGVyKHNlbGVjdG9yKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0UGx1Z2luLm5vZGVUZCA9IFBsdWdpbi5yZWNlbnROb2RlID0gY2VsbHM7XHJcblx0XHRcdFx0cmV0dXJuIGRhdGF0YWJsZTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBEZWxldGUgdGhlIHNlbGVjdGVkIHJvdyBmcm9tIHRoZSB0YWJsZVxyXG5cdFx0XHQgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoJChQbHVnaW4ubm9kZVRyLmxlbmd0aCkgJiYgUGx1Z2luLm5vZGVUciA9PT0gUGx1Z2luLnJlY2VudE5vZGUpIHtcclxuXHRcdFx0XHRcdCQoUGx1Z2luLm5vZGVUcikucmVtb3ZlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFBsdWdpbi5sYXlvdXRVcGRhdGUoKTtcclxuXHRcdFx0XHRyZXR1cm4gZGF0YXRhYmxlO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFNob3cgb3IgaGlkZSB0aGUgY29sdW1ucyBvciByb3dzXHJcblx0XHRcdCAqL1xyXG5cdFx0XHR2aXNpYmxlOiBmdW5jdGlvbihib29sKSB7XHJcblx0XHRcdFx0aWYgKCQoUGx1Z2luLnJlY2VudE5vZGUubGVuZ3RoKSkge1xyXG5cdFx0XHRcdFx0dmFyIGxvY2tlZCA9IFBsdWdpbi5sb2NrRW5hYmxlZENvbHVtbnMoKTtcclxuXHRcdFx0XHRcdGlmIChQbHVnaW4ucmVjZW50Tm9kZSA9PT0gUGx1Z2luLm5vZGVDb2xzKSB7XHJcblx0XHRcdFx0XHRcdHZhciBpbmRleCA9IFBsdWdpbi5yZWNlbnROb2RlLmluZGV4KCk7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoUGx1Z2luLmlzTG9ja2VkKCkpIHtcclxuXHRcdFx0XHRcdFx0XHR2YXIgc2Nyb2xsQ29sdW1ucyA9ICQoUGx1Z2luLnJlY2VudE5vZGUpLmNsb3Nlc3QoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1sb2NrLXNjcm9sbCcpLmxlbmd0aDtcclxuXHRcdFx0XHRcdFx0XHRpZiAoc2Nyb2xsQ29sdW1ucykge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gaXMgYXQgY2VudGVyIG9mIHNjcm9sbGFibGUgYXJlYVxyXG5cdFx0XHRcdFx0XHRcdFx0aW5kZXggKz0gbG9ja2VkLmxlZnQubGVuZ3RoICsgMTtcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCQoUGx1Z2luLnJlY2VudE5vZGUpLmNsb3Nlc3QoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1sb2NrLXJpZ2h0JykubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBpcyBhdCB0aGUgcmlnaHQgbG9ja2VkIHRhYmxlXHJcblx0XHRcdFx0XHRcdFx0XHRpbmRleCArPSBsb2NrZWQubGVmdC5sZW5ndGggKyBzY3JvbGxDb2x1bW5zICsgMTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAoYm9vbCkge1xyXG5cdFx0XHRcdFx0XHRpZiAoUGx1Z2luLnJlY2VudE5vZGUgPT09IFBsdWdpbi5ub2RlQ29scykge1xyXG5cdFx0XHRcdFx0XHRcdGRlbGV0ZSBvcHRpb25zLmNvbHVtbnNbaW5kZXhdLnZpc2libGU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0JChQbHVnaW4ucmVjZW50Tm9kZSkuc2hvdygpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0aWYgKFBsdWdpbi5yZWNlbnROb2RlID09PSBQbHVnaW4ubm9kZUNvbHMpIHtcclxuXHRcdFx0XHRcdFx0XHRQbHVnaW4uc2V0T3B0aW9uKCdjb2x1bW5zLicgKyAoaW5kZXgpICsgJy52aXNpYmxlJywgZmFsc2UpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdCQoUGx1Z2luLnJlY2VudE5vZGUpLmhpZGUoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFBsdWdpbi5jb2x1bW5IaWRlKCk7XHJcblx0XHRcdFx0XHRQbHVnaW4ucmVkcmF3KCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEdldCB0aGUgdGhlIERPTSBlbGVtZW50IGZvciB0aGUgc2VsZWN0ZWQgcm93cyBvciBjb2x1bW5zXHJcblx0XHRcdCAqIEByZXR1cm5zIHtBcnJheX1cclxuXHRcdFx0ICovXHJcblx0XHRcdG5vZGVzOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gUGx1Z2luLnJlY2VudE5vZGU7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogd2lsbCBiZSBpbXBsZW1lbnRlZCBzb29uXHJcblx0XHRcdCAqIEByZXR1cm5zIHtqUXVlcnl9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRkYXRhc2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gZGF0YXRhYmxlO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIE9wZW4gcGFnZSBieSBudW1iZXJcclxuXHRcdFx0ICogQHBhcmFtIHBhZ2UgbnVtYmVyXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRnb3RvUGFnZTogZnVuY3Rpb24gKHBhZ2UpIHtcclxuXHRcdFx0XHRpZiAodHlwZW9mIFBsdWdpbi5wYWdpbmdPYmplY3QgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRQbHVnaW4uaXNJbml0ID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFBsdWdpbi5wYWdpbmdPYmplY3Qub3BlblBhZ2UocGFnZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBQdWJsaWMgQVBJIG1ldGhvZHMgY2FuIGJlIHVzZWQgZGlyZWN0bHkgYnkgZGF0YXRhYmxlXHJcblx0XHQgKi9cclxuXHRcdCQuZWFjaChQbHVnaW4sIGZ1bmN0aW9uKGZ1bmNOYW1lLCBmdW5jKSB7XHJcblx0XHRcdGRhdGF0YWJsZVtmdW5jTmFtZV0gPSBmdW5jO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gaW5pdGlhbGl6ZSBtYWluIGRhdGF0YWJsZSBwbHVnaW5cclxuXHRcdGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0aWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykge1xyXG5cdFx0XHRcdHZhciBtZXRob2QgPSBvcHRpb25zO1xyXG5cdFx0XHRcdGRhdGF0YWJsZSA9ICQodGhpcykuZGF0YShwbHVnaW5OYW1lKTtcclxuXHRcdFx0XHRpZiAodHlwZW9mIGRhdGF0YWJsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdG9wdGlvbnMgPSBkYXRhdGFibGUub3B0aW9ucztcclxuXHRcdFx0XHRcdFBsdWdpblttZXRob2RdLmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRpZiAoIWRhdGF0YWJsZS5kYXRhKHBsdWdpbk5hbWUpICYmICEkKHRoaXMpLmhhc0NsYXNzKHBmeCArICdkYXRhdGFibGUtbG9hZGVkJykpIHtcclxuXHRcdFx0XHRcdGRhdGF0YWJsZS5kYXRhU2V0ID0gbnVsbDtcclxuXHRcdFx0XHRcdGRhdGF0YWJsZS50ZXh0QWxpZ24gPSB7XHJcblx0XHRcdFx0XHRcdGxlZnQ6IHBmeCArICdkYXRhdGFibGUtY2VsbC1sZWZ0JyxcclxuXHRcdFx0XHRcdFx0Y2VudGVyOiBwZnggKyAnZGF0YXRhYmxlLWNlbGwtY2VudGVyJyxcclxuXHRcdFx0XHRcdFx0cmlnaHQ6IHBmeCArICdkYXRhdGFibGUtY2VsbC1yaWdodCcsXHJcblx0XHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHRcdC8vIG1lcmdlIGRlZmF1bHQgYW5kIHVzZXIgZGVmaW5lZCBvcHRpb25zXHJcblx0XHRcdFx0XHRvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sICQuZm5bcGx1Z2luTmFtZV0uZGVmYXVsdHMsIG9wdGlvbnMpO1xyXG5cclxuXHRcdFx0XHRcdGRhdGF0YWJsZS5vcHRpb25zID0gb3B0aW9ucztcclxuXHJcblx0XHRcdFx0XHQvLyBpbml0IHBsdWdpbiBwcm9jZXNzXHJcblx0XHRcdFx0XHRQbHVnaW4uaW5pdC5hcHBseSh0aGlzLCBbb3B0aW9uc10pO1xyXG5cclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlLndyYXApLmRhdGEocGx1Z2luTmFtZSwgZGF0YXRhYmxlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIGdldCBleGlzdGluZyBpbnN0YW5jZSBkYXRhdGFibGVcclxuXHRcdFx0ZGF0YXRhYmxlID0gJCh0aGlzKS5kYXRhKHBsdWdpbk5hbWUpO1xyXG5cdFx0XHRpZiAodHlwZW9mIGRhdGF0YWJsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHQkLmVycm9yKHBsdWdpbk5hbWUgKyAnIG5vdCBpbml0aWFsaXplZCcpO1xyXG5cdFx0XHR9XHJcblx0XHRcdG9wdGlvbnMgPSBkYXRhdGFibGUub3B0aW9ucztcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZGF0YXRhYmxlO1xyXG5cdH07XHJcblxyXG5cdC8vIGRlZmF1bHQgb3B0aW9uc1xyXG5cdCQuZm5bcGx1Z2luTmFtZV0uZGVmYXVsdHMgPSB7XHJcblx0XHQvLyBkYXRhc291cmNlIGRlZmluaXRpb25cclxuXHRcdGRhdGE6IHtcclxuXHRcdFx0dHlwZTogJ2xvY2FsJyxcclxuXHRcdFx0c291cmNlOiBudWxsLFxyXG5cdFx0XHRwYWdlU2l6ZTogMTAsIC8vIGRpc3BsYXkgcmVjb3JkcyBwZXIgcGFnZVxyXG5cdFx0XHRzYXZlU3RhdGU6IHRydWUsXHJcblxyXG5cdFx0XHRzZXJ2ZXJQYWdpbmc6IGZhbHNlLFxyXG5cdFx0XHRzZXJ2ZXJGaWx0ZXJpbmc6IGZhbHNlLFxyXG5cdFx0XHRzZXJ2ZXJTb3J0aW5nOiBmYWxzZSxcclxuXHJcblx0XHRcdGF1dG9Db2x1bW5zOiBmYWxzZSxcclxuXHRcdFx0YXR0cjoge1xyXG5cdFx0XHRcdHJvd1Byb3BzOiBbXSxcclxuXHRcdFx0fSxcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gbGF5b3V0IGRlZmluaXRpb25cclxuXHRcdGxheW91dDoge1xyXG5cdFx0XHR0aGVtZTogJ2RlZmF1bHQnLCAvLyBkYXRhdGFibGUgd2lsbCBzdXBwb3J0IG11bHRpcGxlIHRoZW1lcyBhbmQgZGVzaWduc1xyXG5cdFx0XHRjbGFzczogcGZ4ICsgJ2RhdGF0YWJsZS1wcmltYXJ5JywgLy8gY3VzdG9tIHdyYXBwZXIgY2xhc3NcclxuXHRcdFx0c2Nyb2xsOiBmYWxzZSwgLy8gZW5hYmxlL2Rpc2FibGUgZGF0YXRhYmxlIHNjcm9sbCBib3RoIGhvcml6b250YWwgYW5kIHZlcnRpY2FsIHdoZW4gbmVlZGVkLlxyXG5cdFx0XHRoZWlnaHQ6IG51bGwsIC8vIGRhdGF0YWJsZSdzIGJvZHkncyBmaXhlZCBoZWlnaHRcclxuXHRcdFx0bWluSGVpZ2h0OiBudWxsLFxyXG5cdFx0XHRmb290ZXI6IGZhbHNlLCAvLyBkaXNwbGF5L2hpZGUgZm9vdGVyXHJcblx0XHRcdGhlYWRlcjogdHJ1ZSwgLy8gZGlzcGxheS9oaWRlIGhlYWRlclxyXG5cdFx0XHRjdXN0b21TY3JvbGxiYXI6IHRydWUsIC8vIHNldCBmYWxzZSB0byBkaXNhYmxlIGN1c3RvbSBzY3JvbGxiYXJcclxuXHJcblx0XHRcdC8vIGRhdGF0YWJsZSBzcGlubmVyXHJcblx0XHRcdHNwaW5uZXI6IHtcclxuXHRcdFx0XHRvdmVybGF5Q29sb3I6ICcjMDAwMDAwJyxcclxuXHRcdFx0XHRvcGFjaXR5OiAwLFxyXG5cdFx0XHRcdHR5cGU6ICdsb2FkZXInLFxyXG5cdFx0XHRcdHN0YXRlOiAncHJpbWFyeScsXHJcblx0XHRcdFx0bWVzc2FnZTogdHJ1ZSxcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8vIGRhdGF0YWJsZSBVSSBpY29uc1xyXG5cdFx0XHRpY29uczoge1xyXG5cdFx0XHRcdHNvcnQ6IHthc2M6ICdmbGF0aWNvbjItYXJyb3ctdXAnLCBkZXNjOiAnZmxhdGljb24yLWFycm93LWRvd24nfSxcclxuXHRcdFx0XHRwYWdpbmF0aW9uOiB7XHJcblx0XHRcdFx0XHRuZXh0OiAnZmxhdGljb24yLW5leHQnLFxyXG5cdFx0XHRcdFx0cHJldjogJ2ZsYXRpY29uMi1iYWNrJyxcclxuXHRcdFx0XHRcdGZpcnN0OiAnZmxhdGljb24yLWZhc3QtYmFjaycsXHJcblx0XHRcdFx0XHRsYXN0OiAnZmxhdGljb24yLWZhc3QtbmV4dCcsXHJcblx0XHRcdFx0XHRtb3JlOiAnZmxhdGljb24tbW9yZS0xJyxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHJvd0RldGFpbDoge2V4cGFuZDogJ2ZhIGZhLWNhcmV0LWRvd24nLCBjb2xsYXBzZTogJ2ZhIGZhLWNhcmV0LXJpZ2h0J30sXHJcblx0XHRcdH0sXHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIGNvbHVtbiBzb3J0aW5nXHJcblx0XHRzb3J0YWJsZTogdHJ1ZSxcclxuXHJcblx0XHQvLyByZXNpemUgY29sdW1uIHNpemUgd2l0aCBtb3VzZSBkcmFnIGNvbWluZyBzb29uKVxyXG5cdFx0cmVzaXphYmxlOiBmYWxzZSxcclxuXHJcblx0XHQvLyBjb2x1bW4gYmFzZWQgZmlsdGVyaW5nIChjb21pbmcgc29vbilcclxuXHRcdGZpbHRlcmFibGU6IGZhbHNlLFxyXG5cclxuXHRcdHBhZ2luYXRpb246IHRydWUsXHJcblxyXG5cdFx0Ly8gaW5saW5lIGFuZCBiYWN0Y2ggZWRpdGluZyAoY29vbWluZyBzb29uKVxyXG5cdFx0ZWRpdGFibGU6IGZhbHNlLFxyXG5cclxuXHRcdC8vIGNvbHVtbnMgZGVmaW5pdGlvblxyXG5cdFx0Y29sdW1uczogW10sXHJcblxyXG5cdFx0c2VhcmNoOiB7XHJcblx0XHRcdC8vIGVuYWJsZSB0cmlnZ2VyIHNlYXJjaCBieSBrZXl1cCBlbnRlclxyXG5cdFx0XHRvbkVudGVyOiBmYWxzZSxcclxuXHRcdFx0Ly8gaW5wdXQgdGV4dCBmb3Igc2VhcmNoXHJcblx0XHRcdGlucHV0OiBudWxsLFxyXG5cdFx0XHQvLyBzZWFyY2ggZGVsYXkgaW4gbWlsbGlzZWNvbmRzXHJcblx0XHRcdGRlbGF5OiA0MDAsXHJcblx0XHRcdC8vXHRyZW1vdGUgc2VydmVyIHNlYXJjaCBrZXkgdmFsdWVcclxuXHRcdFx0a2V5OiBudWxsXHJcblx0XHR9LFxyXG5cclxuXHRcdHJvd3M6IHtcclxuXHRcdFx0Ly8gZGVwcmVjYXRlZFxyXG5cdFx0XHRjYWxsYmFjazogZnVuY3Rpb24oKSB7XHJcblx0XHRcdH0sXHJcblx0XHRcdC8vIGNhbGwgYmVmb3JlIHJvdyB0ZW1wbGF0ZVxyXG5cdFx0XHRiZWZvcmVUZW1wbGF0ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdH0sXHJcblx0XHRcdC8vIGNhbGwgYWZ0ZXIgcm93IHRlbXBsYXRlXHJcblx0XHRcdGFmdGVyVGVtcGxhdGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRhdXRvSGlkZTogdHJ1ZSxcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gdG9vbGJhclxyXG5cdFx0dG9vbGJhcjoge1xyXG5cdFx0XHQvLyBwbGFjZSBwYWdpbmF0aW9uIGFuZCBkaXNwbGF5SW5mbyBibG9ja3MgYWNjb3JkaW5nIHRvIHRoZSBhcnJheSBvcmRlclxyXG5cdFx0XHRsYXlvdXQ6IFsncGFnaW5hdGlvbicsICdpbmZvJ10sXHJcblxyXG5cdFx0XHQvLyB0b29sYmFyIHBsYWNlbWVudCBjYW4gYmUgYXQgdG9wIG9yIGJvdHRvbSBvciBib3RoIHRvcCBhbmQgYm90dG9tIHJlcGVhdGVkXHJcblx0XHRcdHBsYWNlbWVudDogWydib3R0b20nXSwgIC8vJ3RvcCcsICdib3R0b20nXHJcblxyXG5cdFx0XHQvLyB0b29sYmFyIGl0ZW1zXHJcblx0XHRcdGl0ZW1zOiB7XHJcblx0XHRcdFx0Ly8gcGFnaW5hdGlvblxyXG5cdFx0XHRcdHBhZ2luYXRpb246IHtcclxuXHRcdFx0XHRcdC8vIHBhZ2luYXRpb24gdHlwZShkZWZhdWx0IG9yIHNjcm9sbClcclxuXHRcdFx0XHRcdHR5cGU6ICdkZWZhdWx0JyxcclxuXHJcblx0XHRcdFx0XHQvLyBudW1iZXIgb2YgcGFnZXMgdG8gZGlzcGxheSBieSBicmVha3BvaW50c1xyXG5cdFx0XHRcdFx0cGFnZXM6IHtcclxuXHRcdFx0XHRcdFx0ZGVza3RvcDoge1xyXG5cdFx0XHRcdFx0XHRcdGxheW91dDogJ2RlZmF1bHQnLFxyXG5cdFx0XHRcdFx0XHRcdHBhZ2VzTnVtYmVyOiA1LFxyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHR0YWJsZXQ6IHtcclxuXHRcdFx0XHRcdFx0XHRsYXlvdXQ6ICdkZWZhdWx0JyxcclxuXHRcdFx0XHRcdFx0XHRwYWdlc051bWJlcjogMyxcclxuXHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0bW9iaWxlOiB7XHJcblx0XHRcdFx0XHRcdFx0bGF5b3V0OiAnY29tcGFjdCcsXHJcblx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRcdC8vIG5hdmlnYXRpb24gYnV0dG9uc1xyXG5cdFx0XHRcdFx0bmF2aWdhdGlvbjoge1xyXG5cdFx0XHRcdFx0XHRwcmV2OiB0cnVlLCAvLyBkaXNwbGF5IHByZXYgYnV0dG9uXHJcblx0XHRcdFx0XHRcdG5leHQ6IHRydWUsIC8vIGRpc3BsYXkgbmV4dCBidXR0b25cclxuXHRcdFx0XHRcdFx0Zmlyc3Q6IHRydWUsIC8vIGRpc3BsYXkgZmlyc3QgYnV0dG9uXHJcblx0XHRcdFx0XHRcdGxhc3Q6IHRydWUsIC8vIGRpc3BsYXkgbGFzdCBidXR0b25cclxuXHRcdFx0XHRcdFx0bW9yZTogZmFsc2UgLy8gZGlzcGxheSBtb3JlIGJ1dHRvblxyXG5cdFx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0XHQvLyBwYWdlIHNpemUgc2VsZWN0XHJcblx0XHRcdFx0XHRwYWdlU2l6ZVNlbGVjdDogW10sIC8vIGRpc3BsYXkgZHJvcGRvd24gdG8gc2VsZWN0IHBhZ2luYXRpb24gc2l6ZS4gLTEgaXMgdXNlZCBmb3IgXCJBTGxcIiBvcHRpb25cclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHQvLyByZWNvcmRzIGluZm9cclxuXHRcdFx0XHRpbmZvOiB0cnVlLFxyXG5cdFx0XHR9LFxyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBoZXJlIHdlIHdpbGwga2VlcCBhbGwgc3RyaW5ncyBhbmQgbWVzc2FnZSB1c2VkIGJ5IGRhdGF0YWJsZSBVSSBzbyBkZXZlbG9wZXIgY2FuIGVhc2lsaXkgdHJhbnNsYXRlIHRvIGFueSBsYW5ndWFnZS5cclxuXHRcdC8vIEJ5IGRlZmF1bHQgdGhlIHN0aXJuZ3Mgd2lsbCBiZSBpbiB0aGUgcGx1Z2luIHNvdXJjZSBhbmQgaGVyZSBjYW4gb3ZlcnJpZGUgaXRcclxuXHRcdHRyYW5zbGF0ZToge1xyXG5cdFx0XHRyZWNvcmRzOiB7XHJcblx0XHRcdFx0cHJvY2Vzc2luZzogJ1BsZWFzZSB3YWl0Li4uJyxcclxuXHRcdFx0XHRub1JlY29yZHM6ICdObyByZWNvcmRzIGZvdW5kJyxcclxuXHRcdFx0fSxcclxuXHRcdFx0dG9vbGJhcjoge1xyXG5cdFx0XHRcdHBhZ2luYXRpb246IHtcclxuXHRcdFx0XHRcdGl0ZW1zOiB7XHJcblx0XHRcdFx0XHRcdGRlZmF1bHQ6IHtcclxuXHRcdFx0XHRcdFx0XHRmaXJzdDogJ0ZpcnN0JyxcclxuXHRcdFx0XHRcdFx0XHRwcmV2OiAnUHJldmlvdXMnLFxyXG5cdFx0XHRcdFx0XHRcdG5leHQ6ICdOZXh0JyxcclxuXHRcdFx0XHRcdFx0XHRsYXN0OiAnTGFzdCcsXHJcblx0XHRcdFx0XHRcdFx0bW9yZTogJ01vcmUgcGFnZXMnLFxyXG5cdFx0XHRcdFx0XHRcdGlucHV0OiAnUGFnZSBudW1iZXInLFxyXG5cdFx0XHRcdFx0XHRcdHNlbGVjdDogJ1NlbGVjdCBwYWdlIHNpemUnLFxyXG5cdFx0XHRcdFx0XHRcdGFsbDogJ2FsbCcsXHJcblx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdGluZm86ICdTaG93aW5nIHt7c3RhcnR9fSAtIHt7ZW5kfX0gb2Yge3t0b3RhbH19JyxcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0fSxcclxuXHRcdH0sXHJcblxyXG5cdFx0ZXh0ZW5zaW9uczoge30sXHJcblx0fTtcclxuXHJcbn0oalF1ZXJ5KSk7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/datatable/core.datatable.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/datatable/datatable.checkbox.js":
/*!**************************************************************************!*\
  !*** ./resources/metronic/js/components/datatable/datatable.checkbox.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function ($) {\n  var pluginName = 'KTDatatable';\n  var pfx = '';\n  $.fn[pluginName] = $.fn[pluginName] || {};\n  /**\r\n   * @param datatable Main datatable plugin instance\r\n   * @param options Extension options\r\n   * @returns {*}\r\n   */\n\n  $.fn[pluginName].checkbox = function (datatable, options) {\n    var Extension = {\n      selectedAllRows: false,\n      selectedRows: [],\n      unselectedRows: [],\n      init: function init() {\n        if (Extension.selectorEnabled()) {\n          // reset\n          datatable.setDataSourceParam(options.vars.selectedAllRows, false);\n          datatable.stateRemove('checkbox'); // requestIds is not null\n\n          if (options.vars.requestIds) {\n            // request ids in response\n            datatable.setDataSourceParam(options.vars.requestIds, true);\n          } // remove selected checkbox on datatable reload\n\n\n          $(datatable).on(pfx + 'datatable-on-reloaded', function () {\n            datatable.stateRemove('checkbox');\n            datatable.setDataSourceParam(options.vars.selectedAllRows, false);\n            Extension.selectedAllRows = false;\n            Extension.selectedRows = [];\n            Extension.unselectedRows = [];\n          }); // select all on extension init\n\n          Extension.selectedAllRows = datatable.getDataSourceParam(options.vars.selectedAllRows);\n          $(datatable).on(pfx + 'datatable-on-layout-updated', function (e, args) {\n            if (args.table != $(datatable.wrap).attr('id')) {\n              return;\n            }\n\n            datatable.ready(function () {\n              Extension.initVars();\n              Extension.initEvent();\n              Extension.initSelect();\n            });\n          });\n          $(datatable).on(pfx + 'datatable-on-check', function (e, ids) {\n            ids.forEach(function (id) {\n              Extension.selectedRows.push(id); // // remove from unselected rows\n\n              Extension.unselectedRows = Extension.remove(Extension.unselectedRows, id);\n            });\n            var storage = {};\n            storage['selectedRows'] = Extension.selectedRows.filter(Extension.unique);\n            storage['unselectedRows'] = Extension.unselectedRows.filter(Extension.unique);\n            datatable.stateKeep('checkbox', storage);\n          });\n          $(datatable).on(pfx + 'datatable-on-uncheck', function (e, ids) {\n            ids.forEach(function (id) {\n              Extension.unselectedRows.push(id); // // remove from selected rows\n\n              Extension.selectedRows = Extension.remove(Extension.selectedRows, id);\n            });\n            var storage = {};\n            storage['selectedRows'] = Extension.selectedRows.filter(Extension.unique);\n            storage['unselectedRows'] = Extension.unselectedRows.filter(Extension.unique);\n            storage['unselectedRows'] = Extension.unselectedRows.filter(Extension.unique);\n            datatable.stateKeep('checkbox', storage);\n          });\n        }\n      },\n\n      /**\r\n       * Init checkbox clicks event\r\n       */\n      initEvent: function initEvent() {\n        // select all checkbox click\n        $(datatable.tableHead).find('.' + pfx + 'checkbox-all > [type=\"checkbox\"]').click(function (e) {\n          // clear selected and unselected rows\n          Extension.selectedRows = Extension.unselectedRows = [];\n          datatable.stateRemove('checkbox'); // select all rows\n\n          Extension.selectedAllRows = !!$(this).is(':checked'); // local select all current page rows\n\n          if (!options.vars.requestIds) {\n            if ($(this).is(':checked')) {\n              Extension.selectedRows = $.makeArray($(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type=\"checkbox\"]').map(function (i, chk) {\n                return $(chk).val();\n              }));\n            }\n\n            var storage = {};\n            storage['selectedRows'] = Extension.selectedRows.filter(Extension.unique);\n            datatable.stateKeep('checkbox', storage);\n          } // keep selectedAllRows in datasource params\n\n\n          datatable.setDataSourceParam(options.vars.selectedAllRows, Extension.selectedAllRows);\n          $(datatable).trigger(pfx + 'datatable-on-click-checkbox', [$(this)]);\n        }); // single row checkbox click\n\n        $(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type=\"checkbox\"]').click(function (e) {\n          var id = $(this).val();\n\n          if ($(this).is(':checked')) {\n            Extension.selectedRows.push(id); // remove from unselected rows\n\n            Extension.unselectedRows = Extension.remove(Extension.unselectedRows, id);\n          } else {\n            Extension.unselectedRows.push(id); // remove from selected rows\n\n            Extension.selectedRows = Extension.remove(Extension.selectedRows, id);\n          } // local checkbox header check\n\n\n          if (!options.vars.requestIds && Extension.selectedRows.length < 1) {\n            // remove select all checkbox, if there is no checked checkbox left\n            $(datatable.tableHead).find('.' + pfx + 'checkbox-all > [type=\"checkbox\"]').prop('checked', false);\n          }\n\n          var storage = {};\n          storage['selectedRows'] = Extension.selectedRows.filter(Extension.unique);\n          storage['unselectedRows'] = Extension.unselectedRows.filter(Extension.unique);\n          datatable.stateKeep('checkbox', storage);\n          $(datatable).trigger(pfx + 'datatable-on-click-checkbox', [$(this)]);\n        });\n      },\n      unique: function unique(value, index, self) {\n        return self.indexOf(value) === index;\n      },\n      initSelect: function initSelect() {\n        // selected all rows from server\n        if (Extension.selectedAllRows && options.vars.requestIds) {\n          if (!datatable.hasClass(pfx + 'datatable-error')) {\n            // set header select all checkbox checked\n            $(datatable.tableHead).find('.' + pfx + 'checkbox-all > [type=\"checkbox\"]').prop('checked', true);\n          } // set all checkbox in table body\n\n\n          datatable.setActiveAll(true); // remove unselected rows\n\n          Extension.unselectedRows.forEach(function (id) {\n            datatable.setInactive(id);\n          });\n        } else {\n          // single check for server and local\n          Extension.selectedRows.forEach(function (id) {\n            datatable.setActive(id);\n          }); // local checkbox; check if all checkboxes of currect page are checked\n\n          if (!datatable.hasClass(pfx + 'datatable-error') && $(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type=\"checkbox\"]').not(':checked').length < 1) {\n            // set header select all checkbox checked\n            $(datatable.tableHead).find('.' + pfx + 'checkbox-all > [type=\"checkbox\"]').prop('checked', true);\n          }\n        }\n      },\n\n      /**\r\n       * Check if selector is enabled from options\r\n       */\n      selectorEnabled: function selectorEnabled() {\n        return $.grep(datatable.options.columns, function (n, i) {\n          return n.selector || false;\n        })[0];\n      },\n      initVars: function initVars() {\n        // get single select/unselect from localstorage\n        var storage = datatable.stateGet('checkbox');\n\n        if (typeof storage !== 'undefined') {\n          Extension.selectedRows = storage['selectedRows'] || [];\n          Extension.unselectedRows = storage['unselectedRows'] || [];\n        }\n      },\n      getSelectedId: function getSelectedId(path) {\n        Extension.initVars(); // server selected all rows\n\n        if (Extension.selectedAllRows && options.vars.requestIds) {\n          if (typeof path === 'undefined') {\n            path = options.vars.rowIds;\n          } // if selected all rows, return id from response meta\n\n\n          var selectedAllRows = datatable.getObject(path, datatable.lastResponse) || [];\n\n          if (selectedAllRows.length > 0) {\n            // remove single unselected rows from selectedAllRows ids from server response emta\n            Extension.unselectedRows.forEach(function (id) {\n              selectedAllRows = Extension.remove(selectedAllRows, parseInt(id));\n            });\n          }\n\n          return selectedAllRows.filter(Extension.unique);\n        } // else return single checked selected rows\n\n\n        return Extension.selectedRows.filter(Extension.unique);\n      },\n      remove: function remove(array, element) {\n        return array.filter(function (e) {\n          return e !== element;\n        });\n      }\n    }; // make the extension accessible from datatable init\n\n    datatable.checkbox = function () {\n      return Extension;\n    };\n\n    if (_typeof(options) === 'object') {\n      options = $.extend(true, {}, $.fn[pluginName].checkbox[\"default\"], options);\n      Extension.init.apply(this, [options]);\n    }\n\n    return datatable;\n  };\n\n  $.fn[pluginName].checkbox[\"default\"] = {\n    vars: {\n      // select all rows flag to be sent to the server\n      selectedAllRows: 'selectedAllRows',\n      // request id parameter's name\n      requestIds: 'requestIds',\n      // response path to all rows id\n      rowIds: 'meta.rowIds'\n    }\n  };\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/datatable/datatable.checkbox.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/datatable/datatable.rtl.js":
/*!*********************************************************************!*\
  !*** ./resources/metronic/js/components/datatable/datatable.rtl.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var defaults = {\n  layout: {\n    icons: {\n      pagination: {\n        next: 'flaticon2-next',\n        prev: 'flaticon2-back',\n        first: 'flaticon2-fast-back',\n        last: 'flaticon2-fast-next',\n        more: 'flaticon-more-1'\n      },\n      rowDetail: {\n        expand: 'fa fa-caret-down',\n        collapse: 'fa fa-caret-right'\n      }\n    }\n  }\n};\n\nif (KTUtil.isRTL()) {\n  defaults = {\n    layout: {\n      icons: {\n        pagination: {\n          next: 'flaticon2-back',\n          prev: 'flaticon2-next',\n          first: 'flaticon2-fast-next',\n          last: 'flaticon2-fast-back'\n        },\n        rowDetail: {\n          collapse: 'fa fa-caret-down',\n          expand: 'fa fa-caret-right'\n        }\n      }\n    }\n  };\n}\n\n$.extend(true, $.fn.KTDatatable.defaults, defaults);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvY29tcG9uZW50cy9kYXRhdGFibGUvZGF0YXRhYmxlLnJ0bC5qcz9jNWExIl0sIm5hbWVzIjpbImRlZmF1bHRzIiwibGF5b3V0IiwiaWNvbnMiLCJwYWdpbmF0aW9uIiwibmV4dCIsInByZXYiLCJmaXJzdCIsImxhc3QiLCJtb3JlIiwicm93RGV0YWlsIiwiZXhwYW5kIiwiY29sbGFwc2UiLCJLVFV0aWwiLCJpc1JUTCIsIiQiLCJleHRlbmQiLCJmbiIsIktURGF0YXRhYmxlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxRQUFRLEdBQUc7QUFDZEMsUUFBTSxFQUFFO0FBQ1BDLFNBQUssRUFBRTtBQUNOQyxnQkFBVSxFQUFFO0FBQ1hDLFlBQUksRUFBRSxnQkFESztBQUVYQyxZQUFJLEVBQUUsZ0JBRks7QUFHWEMsYUFBSyxFQUFFLHFCQUhJO0FBSVhDLFlBQUksRUFBRSxxQkFKSztBQUtYQyxZQUFJLEVBQUU7QUFMSyxPQUROO0FBUU5DLGVBQVMsRUFBRTtBQUFDQyxjQUFNLEVBQUUsa0JBQVQ7QUFBNkJDLGdCQUFRLEVBQUU7QUFBdkM7QUFSTDtBQURBO0FBRE0sQ0FBZjs7QUFlQSxJQUFJQyxNQUFNLENBQUNDLEtBQVAsRUFBSixFQUFvQjtBQUNuQmIsVUFBUSxHQUFHO0FBQ1ZDLFVBQU0sRUFBRTtBQUNQQyxXQUFLLEVBQUU7QUFDTkMsa0JBQVUsRUFBRTtBQUNYQyxjQUFJLEVBQUUsZ0JBREs7QUFFWEMsY0FBSSxFQUFFLGdCQUZLO0FBR1hDLGVBQUssRUFBRSxxQkFISTtBQUlYQyxjQUFJLEVBQUU7QUFKSyxTQUROO0FBT05FLGlCQUFTLEVBQUU7QUFBQ0Usa0JBQVEsRUFBRSxrQkFBWDtBQUErQkQsZ0JBQU0sRUFBRTtBQUF2QztBQVBMO0FBREE7QUFERSxHQUFYO0FBYUE7O0FBRURJLENBQUMsQ0FBQ0MsTUFBRixDQUFTLElBQVQsRUFBZUQsQ0FBQyxDQUFDRSxFQUFGLENBQUtDLFdBQUwsQ0FBaUJqQixRQUFoQyxFQUEwQ0EsUUFBMUMiLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvY29tcG9uZW50cy9kYXRhdGFibGUvZGF0YXRhYmxlLnJ0bC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkZWZhdWx0cyA9IHtcclxuXHRsYXlvdXQ6IHtcclxuXHRcdGljb25zOiB7XHJcblx0XHRcdHBhZ2luYXRpb246IHtcclxuXHRcdFx0XHRuZXh0OiAnZmxhdGljb24yLW5leHQnLFxyXG5cdFx0XHRcdHByZXY6ICdmbGF0aWNvbjItYmFjaycsXHJcblx0XHRcdFx0Zmlyc3Q6ICdmbGF0aWNvbjItZmFzdC1iYWNrJyxcclxuXHRcdFx0XHRsYXN0OiAnZmxhdGljb24yLWZhc3QtbmV4dCcsXHJcblx0XHRcdFx0bW9yZTogJ2ZsYXRpY29uLW1vcmUtMScsXHJcblx0XHRcdH0sXHJcblx0XHRcdHJvd0RldGFpbDoge2V4cGFuZDogJ2ZhIGZhLWNhcmV0LWRvd24nLCBjb2xsYXBzZTogJ2ZhIGZhLWNhcmV0LXJpZ2h0J30sXHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuaWYgKEtUVXRpbC5pc1JUTCgpKSB7XHJcblx0ZGVmYXVsdHMgPSB7XHJcblx0XHRsYXlvdXQ6IHtcclxuXHRcdFx0aWNvbnM6IHtcclxuXHRcdFx0XHRwYWdpbmF0aW9uOiB7XHJcblx0XHRcdFx0XHRuZXh0OiAnZmxhdGljb24yLWJhY2snLFxyXG5cdFx0XHRcdFx0cHJldjogJ2ZsYXRpY29uMi1uZXh0JyxcclxuXHRcdFx0XHRcdGZpcnN0OiAnZmxhdGljb24yLWZhc3QtbmV4dCcsXHJcblx0XHRcdFx0XHRsYXN0OiAnZmxhdGljb24yLWZhc3QtYmFjaycsXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRyb3dEZXRhaWw6IHtjb2xsYXBzZTogJ2ZhIGZhLWNhcmV0LWRvd24nLCBleHBhbmQ6ICdmYSBmYS1jYXJldC1yaWdodCd9LFxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG4kLmV4dGVuZCh0cnVlLCAkLmZuLktURGF0YXRhYmxlLmRlZmF1bHRzLCBkZWZhdWx0cyk7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/datatable/datatable.rtl.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/dialog.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/components/dialog.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Component Definition \n\nvar KTDialog = function KTDialog(options) {\n  // Main object\n  var the = this; // Get element object\n\n  var element;\n  var body = KTUtil.getBody(); // Default options\n\n  var defaultOptions = {\n    'placement': 'top center',\n    'type': 'loader',\n    'width': 100,\n    'state': 'default',\n    'message': 'Loading...'\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Construct\r\n     */\n    construct: function construct(options) {\n      Plugin.init(options);\n      return the;\n    },\n\n    /**\r\n     * Handles subtoggle click toggle\r\n     */\n    init: function init(options) {\n      the.events = []; // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n      the.state = false;\n    },\n\n    /**\r\n     * Show dialog\r\n     */\n    show: function show() {\n      Plugin.eventTrigger('show');\n      element = document.createElement(\"DIV\");\n      KTUtil.setHTML(element, the.options.message);\n      KTUtil.addClass(element, 'dialog dialog-shown');\n      KTUtil.addClass(element, 'dialog-' + the.options.state);\n      KTUtil.addClass(element, 'dialog-' + the.options.type);\n\n      if (the.options.placement == 'top center') {\n        KTUtil.addClass(element, 'dialog-top-center');\n      }\n\n      body.appendChild(element);\n      the.state = 'shown';\n      Plugin.eventTrigger('shown');\n      return the;\n    },\n\n    /**\r\n     * Hide dialog\r\n     */\n    hide: function hide() {\n      if (element) {\n        Plugin.eventTrigger('hide');\n        element.remove();\n        the.state = 'hidden';\n        Plugin.eventTrigger('hidden');\n      }\n\n      return the;\n    },\n\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the);\n            }\n          } else {\n            return event.handler.call(this, the);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n      return the;\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\r\n   * Check shown state\r\n   */\n\n\n  the.shown = function () {\n    return the.state == 'shown';\n  };\n  /**\r\n   * Check hidden state\r\n   */\n\n\n  the.hidden = function () {\n    return the.state == 'hidden';\n  };\n  /**\r\n   * Show dialog\r\n   */\n\n\n  the.show = function () {\n    return Plugin.show();\n  };\n  /**\r\n   * Hide dialog\r\n   */\n\n\n  the.hide = function () {\n    return Plugin.hide();\n  };\n  /**\r\n   * Attach event\r\n   * @returns {KTToggle}\r\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n  /**\r\n   * Attach event that will be fired once\r\n   * @returns {KTToggle}\r\n   */\n\n\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  }; // Construct plugin\n\n\n  Plugin.construct.apply(the, [options]);\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTDialog;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/dialog.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/header.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/components/header.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Component Definition\n\nvar KTHeader = function KTHeader(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false; // Get element object\n\n  var element = KTUtil.getById(elementId);\n  var body = KTUtil.getBody();\n\n  if (element === undefined) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    offset: {\n      desktop: true,\n      tabletAndMobile: true\n    },\n    releseOnReverse: {\n      desktop: false,\n      tabletAndMobile: false\n    }\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Run plugin\r\n     * @returns {KTHeader}\r\n     */\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('header')) {\n        the = KTUtil.data(element).get('header');\n      } else {\n        // reset header\n        Plugin.init(options); // build header\n\n        Plugin.build();\n        KTUtil.data(element).set('header', the);\n      }\n\n      return the;\n    },\n\n    /**\r\n     * Handles subheader click toggle\r\n     * @returns {KTHeader}\r\n     */\n    init: function init(options) {\n      the.events = []; // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    },\n\n    /**\r\n     * Reset header\r\n     * @returns {KTHeader}\r\n     */\n    build: function build() {\n      var eventTriggerState = true;\n      var lastScrollTop = 0;\n      window.addEventListener('scroll', function () {\n        var offset = 0,\n            st,\n            attrName;\n\n        if (KTUtil.isBreakpointDown('lg') && the.options.offset.tabletAndMobile === false) {\n          return;\n        }\n\n        if (KTUtil.isBreakpointUp('lg') && the.options.offset.desktop === false) {\n          return;\n        }\n\n        if (KTUtil.isBreakpointUp('lg')) {\n          offset = the.options.offset.desktop;\n        } else if (KTUtil.isBreakpointDown('lg')) {\n          offset = the.options.offset.tabletAndMobile;\n        }\n\n        st = KTUtil.getScrollTop();\n\n        if (KTUtil.isBreakpointDown('lg') && the.options.releseOnReverse.tabletAndMobile || KTUtil.isBreakpointUp('lg') && the.options.releseOnReverse.desktop) {\n          if (st > offset && lastScrollTop < st) {\n            // down scroll mode\n            if (body.hasAttribute('data-header-scroll') === false) {\n              body.setAttribute('data-header-scroll', 'on');\n            }\n\n            if (eventTriggerState) {\n              Plugin.eventTrigger('scrollOn', the);\n              eventTriggerState = false;\n            }\n          } else {\n            // back scroll mode\n            if (body.hasAttribute('data-header-scroll') === true) {\n              body.removeAttribute('data-header-scroll');\n            }\n\n            if (eventTriggerState == false) {\n              Plugin.eventTrigger('scrollOff', the);\n              eventTriggerState = true;\n            }\n          }\n\n          lastScrollTop = st;\n        } else {\n          if (st > offset) {\n            // down scroll mode\n            if (body.hasAttribute('data-header-scroll') === false) {\n              body.setAttribute('data-header-scroll', 'on');\n            }\n\n            if (eventTriggerState) {\n              Plugin.eventTrigger('scrollOn', the);\n              eventTriggerState = false;\n            }\n          } else {\n            // back scroll mode\n            if (body.hasAttribute('data-header-scroll') === true) {\n              body.removeAttribute('data-header-scroll');\n            }\n\n            if (eventTriggerState == false) {\n              Plugin.eventTrigger('scrollOff', the);\n              eventTriggerState = true;\n            }\n          }\n        }\n      });\n    },\n\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name, args) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the, args);\n            }\n          } else {\n            return event.handler.call(this, the, args);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\r\n   * Register event\r\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  }; ///////////////////////////////\n  // ** Plugin Construction ** //\n  ///////////////////////////////\n  // Run plugin\n\n\n  Plugin.construct.apply(the, [options]); // Init done\n\n  init = true; // Return plugin instance\n\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTHeader;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/header.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/image-input.js":
/*!*********************************************************!*\
  !*** ./resources/metronic/js/components/image-input.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Component Definition \n\nvar KTImageInput = function KTImageInput(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false; // Get element object\n\n  var element = KTUtil.getById(elementId);\n  var body = KTUtil.getBody();\n\n  if (!element) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    editMode: false\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Construct\r\n     */\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('imageinput')) {\n        the = KTUtil.data(element).get('imageinput');\n      } else {\n        // reset menu\n        Plugin.init(options); // build menu\n\n        Plugin.build();\n        KTUtil.data(element).set('imageinput', the);\n      }\n\n      return the;\n    },\n\n    /**\r\n     * Init avatar\r\n     */\n    init: function init(options) {\n      the.element = element;\n      the.events = [];\n      the.input = KTUtil.find(element, 'input[type=\"file\"]');\n      the.wrapper = KTUtil.find(element, '.image-input-wrapper');\n      the.cancel = KTUtil.find(element, '[data-action=\"cancel\"]');\n      the.remove = KTUtil.find(element, '[data-action=\"remove\"]');\n      the.src = KTUtil.css(the.wrapper, 'backgroundImage');\n      the.hidden = KTUtil.find(element, 'input[type=\"hidden\"]'); // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    },\n\n    /**\r\n     * Build\r\n     */\n    build: function build() {\n      // Handle change\n      KTUtil.addEvent(the.input, 'change', function (e) {\n        e.preventDefault();\n\n        if (the.input && the.input.files && the.input.files[0]) {\n          var reader = new FileReader();\n\n          reader.onload = function (e) {\n            KTUtil.css(the.wrapper, 'background-image', 'url(' + e.target.result + ')');\n          };\n\n          reader.readAsDataURL(the.input.files[0]);\n          KTUtil.addClass(the.element, 'image-input-changed');\n          KTUtil.removeClass(the.element, 'image-input-empty'); // Fire change event\n\n          Plugin.eventTrigger('change');\n        }\n      }); // Handle cancel\n\n      KTUtil.addEvent(the.cancel, 'click', function (e) {\n        e.preventDefault(); // Fire cancel event\n\n        Plugin.eventTrigger('cancel');\n        KTUtil.removeClass(the.element, 'image-input-changed');\n        KTUtil.removeClass(the.element, 'image-input-empty');\n        KTUtil.css(the.wrapper, 'background-image', the.src);\n        the.input.value = \"\";\n\n        if (the.hidden) {\n          the.hidden.value = \"0\";\n        }\n      }); // Handle remove\n\n      KTUtil.addEvent(the.remove, 'click', function (e) {\n        e.preventDefault(); // Fire cancel event\n\n        Plugin.eventTrigger('remove');\n        KTUtil.removeClass(the.element, 'image-input-changed');\n        KTUtil.addClass(the.element, 'image-input-empty');\n        KTUtil.css(the.wrapper, 'background-image', \"none\");\n        the.input.value = \"\";\n\n        if (the.hidden) {\n          the.hidden.value = \"1\";\n        }\n      });\n    },\n\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name) {\n      //KTUtil.triggerCustomEvent(name);\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the);\n            }\n          } else {\n            return event.handler.call(this, the);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n      return the;\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\r\n   * Attach event\r\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n  /**\r\n   * Attach event that will be fired once\r\n   */\n\n\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  }; // Construct plugin\n\n\n  Plugin.construct.apply(the, [options]);\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTImageInput;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/image-input.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/menu.js":
/*!**************************************************!*\
  !*** ./resources/metronic/js/components/menu.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Component Definition\n\nvar KTMenu = function KTMenu(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false; // Get element object\n\n  var element = KTUtil.getById(elementId);\n  var body = KTUtil.getBody();\n\n  if (!element) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    // scrollable area with Perfect Scroll\n    scroll: {\n      rememberPosition: false\n    },\n    // accordion submenu mode\n    accordion: {\n      slideSpeed: 200,\n      // accordion toggle slide speed in milliseconds\n      autoScroll: false,\n      // enable auto scrolling(focus) to the clicked menu item\n      autoScrollSpeed: 1200,\n      expandAll: true // allow having multiple expanded accordions in the menu\n\n    },\n    // dropdown submenu mode\n    dropdown: {\n      timeout: 500 // timeout in milliseconds to show and hide the hoverable submenu dropdown\n\n    }\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Run plugin\r\n     * @returns {KTMenu}\r\n     */\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('menu')) {\n        the = KTUtil.data(element).get('menu');\n      } else {\n        // reset menu\n        Plugin.init(options); // reset menu\n\n        Plugin.reset(); // build menu\n\n        Plugin.build();\n        KTUtil.data(element).set('menu', the);\n      }\n\n      return the;\n    },\n\n    /**\r\n     * Handles submenu click toggle\r\n     * @returns {KTMenu}\r\n     */\n    init: function init(options) {\n      the.events = [];\n      the.eventHandlers = {}; // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options); // pause menu\n\n      the.pauseDropdownHoverTime = 0;\n      the.uid = KTUtil.getUniqueID();\n    },\n    update: function update(options) {\n      // merge default and user defined options\n      the.options = KTUtil.deepExtend({}, defaultOptions, options); // pause menu\n\n      the.pauseDropdownHoverTime = 0; // reset menu\n\n      Plugin.reset();\n      the.eventHandlers = {}; // build menu\n\n      Plugin.build();\n      KTUtil.data(element).set('menu', the);\n    },\n    reload: function reload() {\n      // reset menu\n      Plugin.reset(); // build menu\n\n      Plugin.build(); // reset submenu props\n\n      Plugin.resetSubmenuProps();\n    },\n\n    /**\r\n     * Reset menu\r\n     * @returns {KTMenu}\r\n     */\n    build: function build() {\n      // General accordion submenu toggle\n      the.eventHandlers['event_1'] = KTUtil.on(element, '.menu-toggle', 'click', Plugin.handleSubmenuAccordion); // Dropdown mode(hoverable)\n\n      if (Plugin.getSubmenuMode() === 'dropdown' || Plugin.isConditionalSubmenuDropdown()) {\n        // dropdown submenu - hover toggle\n        the.eventHandlers['event_2'] = KTUtil.on(element, '[data-menu-toggle=\"hover\"]', 'mouseover', Plugin.handleSubmenuDrodownHoverEnter);\n        the.eventHandlers['event_3'] = KTUtil.on(element, '[data-menu-toggle=\"hover\"]', 'mouseout', Plugin.handleSubmenuDrodownHoverExit); // dropdown submenu - click toggle\n\n        the.eventHandlers['event_4'] = KTUtil.on(element, '[data-menu-toggle=\"click\"] > .menu-toggle, [data-menu-toggle=\"click\"] > .menu-link .menu-toggle', 'click', Plugin.handleSubmenuDropdownClick);\n        the.eventHandlers['event_5'] = KTUtil.on(element, '[data-menu-toggle=\"tab\"] > .menu-toggle, [data-menu-toggle=\"tab\"] > .menu-link .menu-toggle', 'click', Plugin.handleSubmenuDropdownTabClick);\n      } // Handle general link click\n\n\n      the.eventHandlers['event_6'] = KTUtil.on(element, '.menu-item > .menu-link:not(.menu-toggle):not(.menu-link-toggle-skip)', 'click', Plugin.handleLinkClick); // Init scrollable menu\n\n      if (the.options.scroll && the.options.scroll.height) {\n        Plugin.scrollInit();\n      }\n    },\n\n    /**\r\n     * Reset menu\r\n     * @returns {KTMenu}\r\n     */\n    reset: function reset() {\n      KTUtil.off(element, 'click', the.eventHandlers['event_1']); // dropdown submenu - hover toggle\n\n      KTUtil.off(element, 'mouseover', the.eventHandlers['event_2']);\n      KTUtil.off(element, 'mouseout', the.eventHandlers['event_3']); // dropdown submenu - click toggle\n\n      KTUtil.off(element, 'click', the.eventHandlers['event_4']);\n      KTUtil.off(element, 'click', the.eventHandlers['event_5']); // handle link click\n\n      KTUtil.off(element, 'click', the.eventHandlers['event_6']);\n    },\n\n    /**\r\n     * Init scroll menu\r\n     *\r\n    */\n    scrollInit: function scrollInit() {\n      if (the.options.scroll && the.options.scroll.height) {\n        KTUtil.scrollDestroy(element, true);\n        KTUtil.scrollInit(element, {\n          mobileNativeScroll: true,\n          windowScroll: false,\n          resetHeightOnDestroy: true,\n          handleWindowResize: true,\n          height: the.options.scroll.height,\n          rememberPosition: the.options.scroll.rememberPosition\n        });\n      } else {\n        KTUtil.scrollDestroy(element, true);\n      }\n    },\n\n    /**\r\n     * Update scroll menu\r\n    */\n    scrollUpdate: function scrollUpdate() {\n      if (the.options.scroll && the.options.scroll.height) {\n        KTUtil.scrollUpdate(element);\n      }\n    },\n\n    /**\r\n     * Scroll top\r\n    */\n    scrollTop: function scrollTop() {\n      if (the.options.scroll && the.options.scroll.height) {\n        KTUtil.scrollTop(element);\n      }\n    },\n\n    /**\r\n     * Get submenu mode for current breakpoint and menu state\r\n     * @returns {KTMenu}\r\n     */\n    getSubmenuMode: function getSubmenuMode(el) {\n      if (KTUtil.isBreakpointUp('lg')) {\n        if (el && KTUtil.hasAttr(el, 'data-menu-toggle') && KTUtil.attr(el, 'data-menu-toggle') == 'hover') {\n          return 'dropdown';\n        }\n\n        if (KTUtil.isset(the.options.submenu, 'desktop.state.body')) {\n          if (KTUtil.hasClasses(body, the.options.submenu.desktop.state.body)) {\n            return the.options.submenu.desktop.state.mode;\n          } else {\n            return the.options.submenu.desktop[\"default\"];\n          }\n        } else if (KTUtil.isset(the.options.submenu, 'desktop')) {\n          return the.options.submenu.desktop;\n        }\n      } else if (KTUtil.isBreakpointUp('md') && KTUtil.isBreakpointDown('lg') && KTUtil.isset(the.options.submenu, 'tablet')) {\n        return the.options.submenu.tablet;\n      } else if (KTUtil.isBreakpointDown('md') && KTUtil.isset(the.options.submenu, 'mobile')) {\n        return the.options.submenu.mobile;\n      } else {\n        return false;\n      }\n    },\n\n    /**\r\n     * Get submenu mode for current breakpoint and menu state\r\n     * @returns {KTMenu}\r\n     */\n    isConditionalSubmenuDropdown: function isConditionalSubmenuDropdown() {\n      if (KTUtil.isBreakpointUp('lg') && KTUtil.isset(the.options.submenu, 'desktop.state.body')) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    /**\r\n     * Reset submenu attributes\r\n     * @returns {KTMenu}\r\n     */\n    resetSubmenuProps: function resetSubmenuProps(e) {\n      var submenus = KTUtil.findAll(element, '.menu-submenu');\n\n      if (submenus) {\n        for (var i = 0, len = submenus.length; i < len; i++) {\n          var submenu = submenus[0];\n          KTUtil.css(submenu, 'display', '');\n          KTUtil.css(submenu, 'overflow', '');\n\n          if (submenu.hasAttribute('data-hor-direction')) {\n            KTUtil.removeClass(submenu, 'menu-submenu-left');\n            KTUtil.removeClass(submenu, 'menu-submenu-right');\n            KTUtil.addClass(submenu, submenu.getAttribute('data-hor-direction'));\n          }\n        }\n      }\n    },\n\n    /**\r\n     * Handles submenu hover toggle\r\n     * @returns {KTMenu}\r\n     */\n    handleSubmenuDrodownHoverEnter: function handleSubmenuDrodownHoverEnter(e) {\n      if (Plugin.getSubmenuMode(this) === 'accordion') {\n        return;\n      }\n\n      if (the.resumeDropdownHover() === false) {\n        return;\n      }\n\n      var item = this;\n\n      if (item.getAttribute('data-hover') == '1') {\n        item.removeAttribute('data-hover');\n        clearTimeout(item.getAttribute('data-timeout'));\n        item.removeAttribute('data-timeout');\n      }\n\n      Plugin.showSubmenuDropdown(item);\n    },\n\n    /**\r\n     * Handles submenu hover toggle\r\n     * @returns {KTMenu}\r\n     */\n    handleSubmenuDrodownHoverExit: function handleSubmenuDrodownHoverExit(e) {\n      if (the.resumeDropdownHover() === false) {\n        return;\n      }\n\n      if (Plugin.getSubmenuMode(this) === 'accordion') {\n        return;\n      }\n\n      var item = this;\n      var time = the.options.dropdown.timeout;\n      var timeout = setTimeout(function () {\n        if (item.getAttribute('data-hover') == '1') {\n          Plugin.hideSubmenuDropdown(item, true);\n        }\n      }, time);\n      item.setAttribute('data-hover', '1');\n      item.setAttribute('data-timeout', timeout);\n    },\n\n    /**\r\n     * Handles submenu click toggle\r\n     * @returns {KTMenu}\r\n     */\n    handleSubmenuDropdownClick: function handleSubmenuDropdownClick(e) {\n      if (Plugin.getSubmenuMode(this) === 'accordion') {\n        return;\n      }\n\n      var item = this.closest('.menu-item'); // Trigger click event handlers\n\n      var result = Plugin.eventTrigger('submenuToggle', this, e);\n\n      if (result === false) {\n        return;\n      }\n\n      if (item.getAttribute('data-menu-submenu-mode') == 'accordion') {\n        return;\n      }\n\n      if (KTUtil.hasClass(item, 'menu-item-hover') === false) {\n        KTUtil.addClass(item, 'menu-item-open-dropdown');\n        Plugin.showSubmenuDropdown(item);\n      } else {\n        KTUtil.removeClass(item, 'menu-item-open-dropdown');\n        Plugin.hideSubmenuDropdown(item, true);\n      }\n\n      e.preventDefault();\n    },\n\n    /**\r\n     * Handles tab click toggle\r\n     * @returns {KTMenu}\r\n     */\n    handleSubmenuDropdownTabClick: function handleSubmenuDropdownTabClick(e) {\n      if (Plugin.getSubmenuMode(this) === 'accordion') {\n        return;\n      }\n\n      var item = this.closest('.menu-item'); // Trigger click event handlers\n\n      var result = Plugin.eventTrigger('submenuToggle', this, e);\n\n      if (result === false) {\n        return;\n      }\n\n      if (item.getAttribute('data-menu-submenu-mode') == 'accordion') {\n        return;\n      }\n\n      if (KTUtil.hasClass(item, 'menu-item-hover') == false) {\n        KTUtil.addClass(item, 'menu-item-open-dropdown');\n        Plugin.showSubmenuDropdown(item);\n      }\n\n      e.preventDefault();\n    },\n\n    /**\r\n     * Handles link click\r\n     * @returns {KTMenu}\r\n     */\n    handleLinkClick: function handleLinkClick(e) {\n      var submenu = this.closest('.menu-item.menu-item-submenu'); // Trigger click event handlers\n\n      var result = Plugin.eventTrigger('linkClick', this, e);\n\n      if (result === false) {\n        return;\n      }\n\n      if (submenu && Plugin.getSubmenuMode(submenu) === 'dropdown') {\n        Plugin.hideSubmenuDropdowns();\n      }\n    },\n\n    /**\r\n     * Handles submenu dropdown close on link click\r\n     * @returns {KTMenu}\r\n     */\n    handleSubmenuDropdownClose: function handleSubmenuDropdownClose(e, el) {\n      // exit if its not submenu dropdown mode\n      if (Plugin.getSubmenuMode(el) === 'accordion') {\n        return;\n      }\n\n      var shown = element.querySelectorAll('.menu-item.menu-item-submenu.menu-item-hover:not(.menu-item-tabs)'); // check if currently clicked link's parent item ha\n\n      if (shown.length > 0 && KTUtil.hasClass(el, 'menu-toggle') === false && el.querySelectorAll('.menu-toggle').length === 0) {\n        // close opened dropdown menus\n        for (var i = 0, len = shown.length; i < len; i++) {\n          Plugin.hideSubmenuDropdown(shown[0], true);\n        }\n      }\n    },\n\n    /**\r\n     * helper functions\r\n     * @returns {KTMenu}\r\n     */\n    handleSubmenuAccordion: function handleSubmenuAccordion(e, el) {\n      var query;\n      var item = el ? el : this; // Trigger click event handlers\n\n      var result = Plugin.eventTrigger('submenuToggle', this, e);\n\n      if (result === false) {\n        return;\n      }\n\n      if (Plugin.getSubmenuMode(el) === 'dropdown' && (query = item.closest('.menu-item'))) {\n        if (query.getAttribute('data-menu-submenu-mode') != 'accordion') {\n          e.preventDefault();\n          return;\n        }\n      }\n\n      var li = item.closest('.menu-item');\n      var submenu = KTUtil.child(li, '.menu-submenu, .menu-inner');\n\n      if (KTUtil.hasClass(item.closest('.menu-item'), 'menu-item-open-always')) {\n        return;\n      }\n\n      if (li && submenu) {\n        e.preventDefault();\n        var speed = the.options.accordion.slideSpeed;\n        var hasClosables = false;\n\n        if (KTUtil.hasClass(li, 'menu-item-open') === false) {\n          // hide other accordions\n          if (the.options.accordion.expandAll === false) {\n            var subnav = item.closest('.menu-nav, .menu-subnav');\n            var closables = KTUtil.children(subnav, '.menu-item.menu-item-open.menu-item-submenu:not(.menu-item-here):not(.menu-item-open-always)');\n\n            if (subnav && closables) {\n              for (var i = 0, len = closables.length; i < len; i++) {\n                var el_ = closables[0];\n                var submenu_ = KTUtil.child(el_, '.menu-submenu');\n\n                if (submenu_) {\n                  KTUtil.slideUp(submenu_, speed, function () {\n                    Plugin.scrollUpdate();\n                    KTUtil.removeClass(el_, 'menu-item-open');\n                  });\n                }\n              }\n            }\n          }\n\n          KTUtil.slideDown(submenu, speed, function () {\n            Plugin.scrollToItem(item);\n            Plugin.scrollUpdate();\n            Plugin.eventTrigger('submenuToggle', submenu, e);\n          });\n          KTUtil.addClass(li, 'menu-item-open');\n        } else {\n          KTUtil.slideUp(submenu, speed, function () {\n            Plugin.scrollToItem(item);\n            Plugin.scrollUpdate();\n            Plugin.eventTrigger('submenuToggle', submenu, e);\n          });\n          KTUtil.removeClass(li, 'menu-item-open');\n        }\n      }\n    },\n\n    /**\r\n     * scroll to item function\r\n     * @returns {KTMenu}\r\n     */\n    scrollToItem: function scrollToItem(item) {\n      // handle auto scroll for accordion submenus\n      if (KTUtil.isBreakpointUp('lg') && the.options.accordion.autoScroll && element.getAttribute('data-menu-scroll') !== '1') {\n        KTUtil.scrollTo(item, the.options.accordion.autoScrollSpeed);\n      }\n    },\n\n    /**\r\n     * Hide submenu dropdown\r\n     * @returns {KTMenu}\r\n     */\n    hideSubmenuDropdown: function hideSubmenuDropdown(item, classAlso) {\n      // remove submenu activation class\n      if (classAlso) {\n        KTUtil.removeClass(item, 'menu-item-hover');\n        KTUtil.removeClass(item, 'menu-item-active-tab');\n      } // clear timeout\n\n\n      item.removeAttribute('data-hover');\n\n      if (item.getAttribute('data-menu-toggle-class')) {\n        KTUtil.removeClass(body, item.getAttribute('data-menu-toggle-class'));\n      }\n\n      var timeout = item.getAttribute('data-timeout');\n      item.removeAttribute('data-timeout');\n      clearTimeout(timeout);\n    },\n\n    /**\r\n     * Hide submenu dropdowns\r\n     * @returns {KTMenu}\r\n     */\n    hideSubmenuDropdowns: function hideSubmenuDropdowns() {\n      var items;\n\n      if (items = element.querySelectorAll('.menu-item-submenu.menu-item-hover:not(.menu-item-tabs):not([data-menu-toggle=\"tab\"])')) {\n        for (var j = 0, cnt = items.length; j < cnt; j++) {\n          Plugin.hideSubmenuDropdown(items[j], true);\n        }\n      }\n    },\n\n    /**\r\n     * helper functions\r\n     * @returns {KTMenu}\r\n     */\n    showSubmenuDropdown: function showSubmenuDropdown(item) {\n      // close active submenus\n      var list = element.querySelectorAll('.menu-item-submenu.menu-item-hover, .menu-item-submenu.menu-item-active-tab');\n\n      if (list) {\n        for (var i = 0, len = list.length; i < len; i++) {\n          var el = list[i];\n\n          if (item !== el && el.contains(item) === false && item.contains(el) === false) {\n            Plugin.hideSubmenuDropdown(el, true);\n          }\n        }\n      } // add submenu activation class\n\n\n      KTUtil.addClass(item, 'menu-item-hover'); // Change the alignment of submenu is offscreen.\n\n      var submenu = KTUtil.find(item, '.menu-submenu');\n\n      if (submenu && submenu.hasAttribute('data-hor-direction') === false) {\n        if (KTUtil.hasClass(submenu, 'menu-submenu-left')) {\n          submenu.setAttribute('data-hor-direction', 'menu-submenu-left');\n        } else if (KTUtil.hasClass(submenu, 'menu-submenu-right')) {\n          submenu.setAttribute('data-hor-direction', 'menu-submenu-right');\n        }\n      }\n\n      if (submenu && KTUtil.isOffscreen(submenu, 'left', 15) === true) {\n        KTUtil.removeClass(submenu, 'menu-submenu-left');\n        KTUtil.addClass(submenu, 'menu-submenu-right');\n      } else if (submenu && KTUtil.isOffscreen(submenu, 'right', 15) === true) {\n        KTUtil.removeClass(submenu, 'menu-submenu-right');\n        KTUtil.addClass(submenu, 'menu-submenu-left');\n      }\n\n      if (item.getAttribute('data-menu-toggle-class')) {\n        KTUtil.addClass(body, item.getAttribute('data-menu-toggle-class'));\n      }\n    },\n\n    /**\r\n     * Handles submenu slide toggle\r\n     * @returns {KTMenu}\r\n     */\n    createSubmenuDropdownClickDropoff: function createSubmenuDropdownClickDropoff(el) {\n      var query;\n      var zIndex = (query = KTUtil.child(el, '.menu-submenu') ? KTUtil.css(query, 'z-index') : 0) - 1;\n      var dropoff = document.createElement('<div class=\"menu-dropoff\" style=\"background: transparent; position: fixed; top: 0; bottom: 0; left: 0; right: 0; z-index: ' + zIndex + '\"></div>');\n      body.appendChild(dropoff);\n      KTUtil.addEvent(dropoff, 'click', function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n        KTUtil.remove(this);\n        Plugin.hideSubmenuDropdown(el, true);\n      });\n    },\n\n    /**\r\n     * Handles submenu hover toggle\r\n     * @returns {KTMenu}\r\n     */\n    pauseDropdownHover: function pauseDropdownHover(time) {\n      var date = new Date();\n      the.pauseDropdownHoverTime = date.getTime() + time;\n    },\n\n    /**\r\n     * Handles submenu hover toggle\r\n     * @returns {KTMenu}\r\n     */\n    resumeDropdownHover: function resumeDropdownHover() {\n      var date = new Date();\n      return date.getTime() > the.pauseDropdownHoverTime ? true : false;\n    },\n\n    /**\r\n     * Reset menu's current active item\r\n     * @returns {KTMenu}\r\n     */\n    resetActiveItem: function resetActiveItem(item) {\n      var list;\n      var parents;\n      list = element.querySelectorAll('.menu-item-active');\n\n      for (var i = 0, len = list.length; i < len; i++) {\n        var el = list[0];\n        KTUtil.removeClass(el, 'menu-item-active');\n        KTUtil.hide(KTUtil.child(el, '.menu-submenu'));\n        parents = KTUtil.parents(el, '.menu-item-submenu') || [];\n\n        for (var i_ = 0, len_ = parents.length; i_ < len_; i_++) {\n          var el_ = parents[i];\n          KTUtil.removeClass(el_, 'menu-item-open');\n          KTUtil.hide(KTUtil.child(el_, '.menu-submenu'));\n        }\n      } // close open submenus\n\n\n      if (the.options.accordion.expandAll === false) {\n        if (list = element.querySelectorAll('.menu-item-open')) {\n          for (var i = 0, len = list.length; i < len; i++) {\n            KTUtil.removeClass(parents[0], 'menu-item-open');\n          }\n        }\n      }\n    },\n\n    /**\r\n     * Sets menu's active item\r\n     * @returns {KTMenu}\r\n     */\n    setActiveItem: function setActiveItem(item) {\n      // reset current active item\n      Plugin.resetActiveItem();\n      var parents = KTUtil.parents(item, '.menu-item-submenu') || [];\n\n      for (var i = 0, len = parents.length; i < len; i++) {\n        KTUtil.addClass(parents[i], 'menu-item-open');\n      }\n\n      KTUtil.addClass(item, 'menu-item-active');\n    },\n\n    /**\r\n     * Returns page breadcrumbs for the menu's active item\r\n     * @returns {KTMenu}\r\n     */\n    getBreadcrumbs: function getBreadcrumbs(item) {\n      var query;\n      var breadcrumbs = [];\n      var link = KTUtil.child(item, '.menu-link');\n      breadcrumbs.push({\n        text: query = KTUtil.child(link, '.menu-text') ? query.innerHTML : '',\n        title: link.getAttribute('title'),\n        href: link.getAttribute('href')\n      });\n      var parents = KTUtil.parents(item, '.menu-item-submenu');\n\n      for (var i = 0, len = parents.length; i < len; i++) {\n        var submenuLink = KTUtil.child(parents[i], '.menu-link');\n        breadcrumbs.push({\n          text: query = KTUtil.child(submenuLink, '.menu-text') ? query.innerHTML : '',\n          title: submenuLink.getAttribute('title'),\n          href: submenuLink.getAttribute('href')\n        });\n      }\n\n      return breadcrumbs.reverse();\n    },\n\n    /**\r\n     * Returns page title for the menu's active item\r\n     * @returns {KTMenu}\r\n     */\n    getPageTitle: function getPageTitle(item) {\n      var query;\n      return query = KTUtil.child(item, '.menu-text') ? query.innerHTML : '';\n    },\n\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name, target, e) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, target, e);\n            }\n          } else {\n            return event.handler.call(this, target, e);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n    },\n    removeEvent: function removeEvent(name) {\n      if (the.events[name]) {\n        delete the.events[name];\n      }\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\r\n   * Update scroll\r\n   */\n\n\n  the.scrollUpdate = function () {\n    return Plugin.scrollUpdate();\n  };\n  /**\r\n   * Re-init scroll\r\n   */\n\n\n  the.scrollReInit = function () {\n    return Plugin.scrollInit();\n  };\n  /**\r\n   * Scroll top\r\n   */\n\n\n  the.scrollTop = function () {\n    return Plugin.scrollTop();\n  };\n  /**\r\n   * Set active menu item\r\n   */\n\n\n  the.setActiveItem = function (item) {\n    return Plugin.setActiveItem(item);\n  };\n\n  the.reload = function () {\n    return Plugin.reload();\n  };\n\n  the.update = function (options) {\n    return Plugin.update(options);\n  };\n  /**\r\n   * Set breadcrumb for menu item\r\n   */\n\n\n  the.getBreadcrumbs = function (item) {\n    return Plugin.getBreadcrumbs(item);\n  };\n  /**\r\n   * Set page title for menu item\r\n   */\n\n\n  the.getPageTitle = function (item) {\n    return Plugin.getPageTitle(item);\n  };\n  /**\r\n   * Get submenu mode\r\n   */\n\n\n  the.getSubmenuMode = function (el) {\n    return Plugin.getSubmenuMode(el);\n  };\n  /**\r\n   * Hide dropdown\r\n   * @returns {Object}\r\n   */\n\n\n  the.hideDropdown = function (item) {\n    Plugin.hideSubmenuDropdown(item, true);\n  };\n  /**\r\n   * Hide dropdowns\r\n   * @returns {Object}\r\n   */\n\n\n  the.hideDropdowns = function () {\n    Plugin.hideSubmenuDropdowns();\n  };\n  /**\r\n   * Disable menu for given time\r\n   * @returns {Object}\r\n   */\n\n\n  the.pauseDropdownHover = function (time) {\n    Plugin.pauseDropdownHover(time);\n  };\n  /**\r\n   * Disable menu for given time\r\n   * @returns {Object}\r\n   */\n\n\n  the.resumeDropdownHover = function () {\n    return Plugin.resumeDropdownHover();\n  };\n  /**\r\n   * Register event\r\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n\n  the.off = function (name) {\n    return Plugin.removeEvent(name);\n  };\n\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  }; ///////////////////////////////\n  // ** Plugin Construction ** //\n  ///////////////////////////////\n  // Run plugin\n\n\n  Plugin.construct.apply(the, [options]); // Handle plugin on window resize\n\n  KTUtil.addResizeHandler(function () {\n    if (init) {\n      the.reload();\n    }\n  }); // Init done\n\n  init = true; // Return plugin instance\n\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTMenu;\n} // Plugin global lazy initialization\n\n\ndocument.addEventListener(\"click\", function (e) {\n  var body = KTUtil.getByTagName('body')[0];\n  var query;\n\n  if (query = body.querySelectorAll('.menu-nav .menu-item.menu-item-submenu.menu-item-hover:not(.menu-item-tabs)[data-menu-toggle=\"click\"]')) {\n    for (var i = 0, len = query.length; i < len; i++) {\n      var element = query[i].closest('.menu-nav').parentNode;\n\n      if (element) {\n        var the = KTUtil.data(element).get('menu');\n\n        if (!the) {\n          break;\n        }\n\n        if (!the || the.getSubmenuMode() !== 'dropdown') {\n          break;\n        }\n\n        if (e.target !== element && element.contains(e.target) === false) {\n          the.hideDropdowns();\n        }\n      }\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/menu.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/offcanvas.js":
/*!*******************************************************!*\
  !*** ./resources/metronic/js/components/offcanvas.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Component Definition\n\nvar KTOffcanvas = function KTOffcanvas(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false; // Get element object\n\n  var element = KTUtil.getById(elementId);\n  var body = KTUtil.getBody();\n\n  if (!element) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    attrCustom: ''\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('offcanvas')) {\n        the = KTUtil.data(element).get('offcanvas');\n      } else {\n        // Reset offcanvas\n        Plugin.init(options); // Build offcanvas\n\n        Plugin.build();\n        KTUtil.data(element).set('offcanvas', the);\n      }\n\n      return the;\n    },\n    init: function init(options) {\n      the.events = []; // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n      the.classBase = the.options.baseClass;\n      the.attrCustom = the.options.attrCustom;\n      the.classShown = the.classBase + '-on';\n      the.classOverlay = the.classBase + '-overlay';\n      the.target;\n      the.state = KTUtil.hasClass(element, the.classShown) ? 'shown' : 'hidden';\n    },\n    build: function build() {\n      // offcanvas toggle\n      if (the.options.toggleBy) {\n        if (typeof the.options.toggleBy === 'string') {\n          KTUtil.addEvent(KTUtil.getById(the.options.toggleBy), 'click', function (e) {\n            e.preventDefault();\n            the.target = this;\n            Plugin.toggle();\n          });\n        } else if (the.options.toggleBy && the.options.toggleBy[0]) {\n          if (the.options.toggleBy[0].target) {\n            for (var i in the.options.toggleBy) {\n              KTUtil.addEvent(KTUtil.getById(the.options.toggleBy[i].target), 'click', function (e) {\n                e.preventDefault();\n                the.target = this;\n                Plugin.toggle();\n              });\n            }\n          } else {\n            for (var i in the.options.toggleBy) {\n              KTUtil.addEvent(KTUtil.getById(the.options.toggleBy[i]), 'click', function (e) {\n                e.preventDefault();\n                the.target = this;\n                Plugin.toggle();\n              });\n            }\n          }\n        } else if (the.options.toggleBy && the.options.toggleBy.target) {\n          KTUtil.addEvent(KTUtil.getById(the.options.toggleBy.target), 'click', function (e) {\n            e.preventDefault();\n            the.target = this;\n            Plugin.toggle();\n          });\n        }\n      } // offcanvas close\n\n\n      var closeBy = KTUtil.getById(the.options.closeBy);\n\n      if (closeBy) {\n        KTUtil.addEvent(closeBy, 'click', function (e) {\n          e.preventDefault();\n          the.target = this;\n          Plugin.hide();\n        });\n      }\n    },\n    isShown: function isShown() {\n      return the.state == 'shown' ? true : false;\n    },\n    toggle: function toggle() {\n      ;\n      Plugin.eventTrigger('toggle');\n\n      if (the.state == 'shown') {\n        Plugin.hide();\n      } else {\n        Plugin.show();\n      }\n    },\n    show: function show() {\n      if (the.state == 'shown') {\n        return;\n      }\n\n      Plugin.eventTrigger('beforeShow');\n      Plugin.toggleClass('show'); // Offcanvas panel\n\n      KTUtil.attr(body, 'data-offcanvas-' + the.classBase, 'on');\n      KTUtil.addClass(element, the.classShown);\n\n      if (the.attrCustom.length > 0) {\n        KTUtil.attr(body, 'data-offcanvas-' + the.classCustom, 'on'); //KTUtil.addClass(body, the.classCustom);\n      }\n\n      the.state = 'shown';\n\n      if (the.options.overlay) {\n        the.overlay = KTUtil.insertAfter(document.createElement('DIV'), element);\n        KTUtil.addClass(the.overlay, the.classOverlay);\n        KTUtil.addEvent(the.overlay, 'click', function (e) {\n          //e.stopPropagation();\n          e.preventDefault();\n          Plugin.hide(the.target);\n        });\n      }\n\n      Plugin.eventTrigger('afterShow');\n    },\n    hide: function hide() {\n      if (the.state == 'hidden') {\n        return;\n      }\n\n      Plugin.eventTrigger('beforeHide');\n      Plugin.toggleClass('hide');\n      KTUtil.removeAttr(body, 'data-offcanvas-' + the.classBase);\n      KTUtil.removeClass(element, the.classShown);\n\n      if (the.attrCustom.length > 0) {\n        KTUtil.removeAttr(body, 'data-offcanvas-' + the.attrCustom);\n      }\n\n      the.state = 'hidden';\n\n      if (the.options.overlay && the.overlay) {\n        KTUtil.remove(the.overlay);\n      }\n\n      Plugin.eventTrigger('afterHide');\n    },\n    toggleClass: function toggleClass(mode) {\n      var id = KTUtil.attr(the.target, 'id');\n      var toggleBy;\n\n      if (the.options.toggleBy && the.options.toggleBy[0] && the.options.toggleBy[0].target) {\n        for (var i in the.options.toggleBy) {\n          if (the.options.toggleBy[i].target === id) {\n            toggleBy = the.options.toggleBy[i];\n          }\n        }\n      } else if (the.options.toggleBy && the.options.toggleBy.target) {\n        toggleBy = the.options.toggleBy;\n      }\n\n      if (toggleBy) {\n        var el = KTUtil.getById(toggleBy.target);\n\n        if (mode === 'show') {\n          KTUtil.addClass(el, toggleBy.state);\n        }\n\n        if (mode === 'hide') {\n          KTUtil.removeClass(el, toggleBy.state);\n        }\n      }\n    },\n    eventTrigger: function eventTrigger(name, args) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the, args);\n            }\n          } else {\n            return event.handler.call(this, the, args);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   * @param options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\r\n   * Check if canvas is shown\r\n   * @returns {boolean}\r\n   */\n\n\n  the.isShown = function () {\n    return Plugin.isShown();\n  };\n  /**\r\n   * Set to hide the canvas\r\n   */\n\n\n  the.hide = function () {\n    return Plugin.hide();\n  };\n  /**\r\n   * Set to show the canvas\r\n   */\n\n\n  the.show = function () {\n    return Plugin.show();\n  };\n  /**\r\n   * Attach event\r\n   * @param name\r\n   * @param handler\r\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n  /**\r\n   * Attach event that will be fired once\r\n   * @param name\r\n   * @param handler\r\n   */\n\n\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  }; ///////////////////////////////\n  // ** Plugin Construction ** //\n  ///////////////////////////////\n  // Run plugin\n\n\n  Plugin.construct.apply(the, [options]); // Init done\n\n  init = true; // Return plugin instance\n\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTOffcanvas;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/offcanvas.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/scrolltop.js":
/*!*******************************************************!*\
  !*** ./resources/metronic/js/components/scrolltop.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Component Definition\n\nvar KTScrolltop = function KTScrolltop(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false; // Get element object\n\n  var element = KTUtil.getById(elementId);\n  var body = KTUtil.getBody();\n\n  if (!element) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    offset: 300,\n    speed: 6000\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Run plugin\r\n     * @returns {mscrolltop}\r\n     */\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('scrolltop')) {\n        the = KTUtil.data(element).get('scrolltop');\n      } else {\n        // reset scrolltop\n        Plugin.init(options); // build scrolltop\n\n        Plugin.build();\n        KTUtil.data(element).set('scrolltop', the);\n      }\n\n      return the;\n    },\n\n    /**\r\n     * Handles subscrolltop click toggle\r\n     * @returns {mscrolltop}\r\n     */\n    init: function init(options) {\n      the.events = []; // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    },\n    build: function build() {\n      var timer;\n      window.addEventListener('scroll', function () {\n        KTUtil.throttle(timer, function () {\n          Plugin.handle();\n        }, 200);\n      }); // handle button click\n\n      KTUtil.addEvent(element, 'click', Plugin.scroll);\n    },\n\n    /**\r\n     * Handles scrolltop click scrollTop\r\n     */\n    handle: function handle() {\n      var pos = KTUtil.getScrollTop(); // current vertical position\n\n      if (pos > the.options.offset) {\n        if (body.hasAttribute('data-scrolltop') === false) {\n          body.setAttribute('data-scrolltop', 'on');\n        }\n      } else {\n        if (body.hasAttribute('data-scrolltop') === true) {\n          body.removeAttribute('data-scrolltop');\n        }\n      }\n    },\n\n    /**\r\n     * Handles scrolltop click scrollTop\r\n     */\n    scroll: function scroll(e) {\n      e.preventDefault();\n      KTUtil.scrollTop(0, the.options.speed);\n    },\n\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name, args) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the, args);\n            }\n          } else {\n            return event.handler.call(this, the, args);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\r\n   * Get subscrolltop mode\r\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n  /**\r\n   * Set scrolltop content\r\n   * @returns {mscrolltop}\r\n   */\n\n\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  }; ///////////////////////////////\n  // ** Plugin Construction ** //\n  ///////////////////////////////\n  // Run plugin\n\n\n  Plugin.construct.apply(the, [options]); // Init done\n\n  init = true; // Return plugin instance\n\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTScrolltop;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/scrolltop.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/toggle.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/components/toggle.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Component Definition\n\nvar KTToggle = function KTToggle(toggleElement, targetElement, options) {\n  // Main object\n  var the = this;\n  var init = false; // Get element object\n\n  var element = toggleElement;\n  var target = targetElement;\n\n  if (!element) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    targetToggleMode: 'class' // class|attribute\n\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Construct\r\n     */\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('toggle')) {\n        the = KTUtil.data(element).get('toggle');\n      } else {\n        // reset menu\n        Plugin.init(options); // build menu\n\n        Plugin.build();\n        KTUtil.data(element).set('toggle', the);\n      }\n\n      return the;\n    },\n\n    /**\r\n     * Handles subtoggle click toggle\r\n     */\n    init: function init(options) {\n      the.element = element;\n      the.events = []; // Merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options); //alert(the.options.target.tagName);\n\n      the.target = target;\n      the.targetState = the.options.targetState;\n      the.toggleState = the.options.toggleState;\n\n      if (the.options.targetToggleMode == 'class') {\n        the.state = KTUtil.hasClasses(the.target, the.targetState) ? 'on' : 'off';\n      } else {\n        the.state = KTUtil.hasAttr(the.target, 'data-' + the.targetState) ? KTUtil.attr(the.target, 'data-' + the.targetState) : 'off';\n      }\n    },\n\n    /**\r\n     * Setup toggle\r\n     */\n    build: function build() {\n      KTUtil.addEvent(element, 'mouseup', Plugin.toggle);\n    },\n\n    /**\r\n     * Handles offcanvas click toggle\r\n     */\n    toggle: function toggle(e) {\n      Plugin.eventTrigger('beforeToggle');\n\n      if (the.state == 'off') {\n        Plugin.toggleOn();\n      } else {\n        Plugin.toggleOff();\n      }\n\n      Plugin.eventTrigger('afterToggle');\n      e.preventDefault();\n      return the;\n    },\n\n    /**\r\n     * Handles toggle click toggle\r\n     */\n    toggleOn: function toggleOn() {\n      Plugin.eventTrigger('beforeOn');\n\n      if (the.options.targetToggleMode == 'class') {\n        KTUtil.addClass(the.target, the.targetState);\n      } else {\n        KTUtil.attr(the.target, 'data-' + the.targetState, 'on');\n      }\n\n      if (the.toggleState) {\n        KTUtil.addClass(element, the.toggleState);\n      }\n\n      the.state = 'on';\n      Plugin.eventTrigger('afterOn');\n      Plugin.eventTrigger('toggle');\n      return the;\n    },\n\n    /**\r\n     * Handles toggle click toggle\r\n     */\n    toggleOff: function toggleOff() {\n      Plugin.eventTrigger('beforeOff');\n\n      if (the.options.targetToggleMode == 'class') {\n        KTUtil.removeClass(the.target, the.targetState);\n      } else {\n        KTUtil.removeAttr(the.target, 'data-' + the.targetState);\n      }\n\n      if (the.toggleState) {\n        KTUtil.removeClass(element, the.toggleState);\n      }\n\n      the.state = 'off';\n      Plugin.eventTrigger('afterOff');\n      Plugin.eventTrigger('toggle');\n      return the;\n    },\n\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the);\n            }\n          } else {\n            return event.handler.call(this, the);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n      return the;\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\r\n   * Get toggle state\r\n   */\n\n\n  the.getState = function () {\n    return the.state;\n  };\n  /**\r\n   * Toggle\r\n   */\n\n\n  the.toggle = function () {\n    return Plugin.toggle();\n  };\n  /**\r\n   * Toggle on\r\n   */\n\n\n  the.toggleOn = function () {\n    return Plugin.toggleOn();\n  };\n  /**\r\n   * Toggle off\r\n   */\n\n\n  the.toggleOff = function () {\n    return Plugin.toggleOff();\n  };\n  /**\r\n   * Attach event\r\n   * @returns {KTToggle}\r\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n  /**\r\n   * Attach event that will be fired once\r\n   * @returns {KTToggle}\r\n   */\n\n\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  }; // Construct plugin\n\n\n  Plugin.construct.apply(the, [options]);\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTToggle;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/toggle.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/util.js":
/*!**************************************************!*\
  !*** ./resources/metronic/js/components/util.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\r\n * @class KTUtil  base utilize class that privides helper functions\r\n */\n// Polyfills\n\n/**\r\n * Element.matches() polyfill (simple version)\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\r\n */\n\nif (!Element.prototype.matches) {\n  Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n}\n/**\r\n * Element.closest() polyfill\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill\r\n */\n\n\nif (!Element.prototype.closest) {\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n  }\n\n  Element.prototype.closest = function (s) {\n    var el = this;\n    var ancestor = this;\n    if (!document.documentElement.contains(el)) return null;\n\n    do {\n      if (ancestor.matches(s)) return ancestor;\n      ancestor = ancestor.parentElement;\n    } while (ancestor !== null);\n\n    return null;\n  };\n}\n/**\r\n * ChildNode.remove() polyfill\r\n * https://gomakethings.com/removing-an-element-from-the-dom-the-es6-way/\r\n * @author Chris Ferdinandi\r\n * @license MIT\r\n */\n\n\n(function (elem) {\n  for (var i = 0; i < elem.length; i++) {\n    if (!window[elem[i]] || 'remove' in window[elem[i]].prototype) continue;\n\n    window[elem[i]].prototype.remove = function () {\n      this.parentNode.removeChild(this);\n    };\n  }\n})(['Element', 'CharacterData', 'DocumentType']); //\n// requestAnimationFrame polyfill by Erik Möller.\n//  With fixes from Paul Irish and Tino Zijdel\n//\n//  http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n//  http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n//\n//  MIT license\n//\n\n\n(function () {\n  var lastTime = 0;\n  var vendors = ['webkit', 'moz'];\n\n  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n  }\n\n  if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback) {\n    var currTime = new Date().getTime();\n    var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n    var id = window.setTimeout(function () {\n      callback(currTime + timeToCall);\n    }, timeToCall);\n    lastTime = currTime + timeToCall;\n    return id;\n  };\n  if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {\n    clearTimeout(id);\n  };\n})(); // Source: https://github.com/jserz/js_piece/blob/master/DOM/ParentNode/prepend()/prepend().md\n\n\n(function (arr) {\n  arr.forEach(function (item) {\n    if (item.hasOwnProperty('prepend')) {\n      return;\n    }\n\n    Object.defineProperty(item, 'prepend', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function prepend() {\n        var argArr = Array.prototype.slice.call(arguments),\n            docFrag = document.createDocumentFragment();\n        argArr.forEach(function (argItem) {\n          var isNode = argItem instanceof Node;\n          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));\n        });\n        this.insertBefore(docFrag, this.firstChild);\n      }\n    });\n  });\n})([Element.prototype, Document.prototype, DocumentFragment.prototype]); // getAttributeNames\n\n\nif (Element.prototype.getAttributeNames == undefined) {\n  Element.prototype.getAttributeNames = function () {\n    var attributes = this.attributes;\n    var length = attributes.length;\n    var result = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      result[i] = attributes[i].name;\n    }\n\n    return result;\n  };\n} // Global variables\n\n\nwindow.KTUtilElementDataStore = {};\nwindow.KTUtilElementDataStoreID = 0;\nwindow.KTUtilDelegatedEventHandlers = {};\n\nvar KTUtil = function () {\n  var resizeHandlers = [];\n  /** @type {object} breakpoints The device width breakpoints **/\n\n  var breakpoints = {\n    sm: 544,\n    // Small screen / phone\n    md: 768,\n    // Medium screen / tablet\n    lg: 992,\n    // Large screen / desktop\n    xl: 1200 // Extra large screen / wide desktop\n\n  };\n  /**\r\n   * Handle window resize event with some\r\n   * delay to attach event handlers upon resize complete\r\n   */\n\n  var _windowResizeHandler = function _windowResizeHandler() {\n    var _runResizeHandlers = function _runResizeHandlers() {\n      // reinitialize other subscribed elements\n      for (var i = 0; i < resizeHandlers.length; i++) {\n        var each = resizeHandlers[i];\n        each.call();\n      }\n    };\n\n    var timer;\n    window.addEventListener('resize', function () {\n      KTUtil.throttle(timer, function () {\n        _runResizeHandlers();\n      }, 200);\n    });\n  };\n\n  return {\n    /**\r\n     * Class main initializer.\r\n     * @param {object} settings.\r\n     * @returns null\r\n     */\n    //main function to initiate the theme\n    init: function init(settings) {\n      if (settings && settings.breakpoints) {\n        breakpoints = settings.breakpoints;\n      }\n\n      _windowResizeHandler();\n    },\n\n    /**\r\n     * Adds window resize event handler.\r\n     * @param {function} callback function.\r\n     */\n    addResizeHandler: function addResizeHandler(callback) {\n      resizeHandlers.push(callback);\n    },\n\n    /**\r\n     * Removes window resize event handler.\r\n     * @param {function} callback function.\r\n     */\n    removeResizeHandler: function removeResizeHandler(callback) {\n      for (var i = 0; i < resizeHandlers.length; i++) {\n        if (callback === resizeHandlers[i]) {\n          delete resizeHandlers[i];\n        }\n      }\n    },\n\n    /**\r\n     * Trigger window resize handlers.\r\n     */\n    runResizeHandlers: function runResizeHandlers() {\n      _runResizeHandlers();\n    },\n    resize: function resize() {\n      if (typeof Event === 'function') {\n        // modern browsers\n        window.dispatchEvent(new Event('resize'));\n      } else {\n        // for IE and other old browsers\n        // causes deprecation warning on modern browsers\n        var evt = window.document.createEvent('UIEvents');\n        evt.initUIEvent('resize', true, false, window, 0);\n        window.dispatchEvent(evt);\n      }\n    },\n\n    /**\r\n     * Get GET parameter value from URL.\r\n     * @param {string} paramName Parameter name.\r\n     * @returns {string}\r\n     */\n    getURLParam: function getURLParam(paramName) {\n      var searchString = window.location.search.substring(1),\n          i,\n          val,\n          params = searchString.split(\"&\");\n\n      for (i = 0; i < params.length; i++) {\n        val = params[i].split(\"=\");\n\n        if (val[0] == paramName) {\n          return unescape(val[1]);\n        }\n      }\n\n      return null;\n    },\n\n    /**\r\n     * Checks whether current device is mobile touch.\r\n     * @returns {boolean}\r\n     */\n    isMobileDevice: function isMobileDevice() {\n      var test = this.getViewPort().width < this.getBreakpoint('lg') ? true : false;\n\n      if (test === false) {\n        // For use within normal web clients\n        test = navigator.userAgent.match(/iPad/i) != null;\n      }\n\n      return test;\n    },\n\n    /**\r\n     * Checks whether current device is desktop.\r\n     * @returns {boolean}\r\n     */\n    isDesktopDevice: function isDesktopDevice() {\n      return KTUtil.isMobileDevice() ? false : true;\n    },\n\n    /**\r\n     * Gets browser window viewport size. Ref:\r\n     * http://andylangton.co.uk/articles/javascript/get-viewport-size-javascript/\r\n     * @returns {object}\r\n     */\n    getViewPort: function getViewPort() {\n      var e = window,\n          a = 'inner';\n\n      if (!('innerWidth' in window)) {\n        a = 'client';\n        e = document.documentElement || document.body;\n      }\n\n      return {\n        width: e[a + 'Width'],\n        height: e[a + 'Height']\n      };\n    },\n\n    /**\r\n     * Checks whether given device mode is currently activated.\r\n     * @param {string} mode Responsive mode name(e.g: desktop,\r\n     *     desktop-and-tablet, tablet, tablet-and-mobile, mobile)\r\n     * @returns {boolean}\r\n     */\n    isInResponsiveRange: function isInResponsiveRange(mode) {\n      var breakpoint = this.getViewPort().width;\n\n      if (mode == 'general') {\n        return true;\n      } else if (mode == 'desktop' && breakpoint >= this.getBreakpoint('lg') + 1) {\n        return true;\n      } else if (mode == 'tablet' && breakpoint >= this.getBreakpoint('md') + 1 && breakpoint < this.getBreakpoint('lg')) {\n        return true;\n      } else if (mode == 'mobile' && breakpoint <= this.getBreakpoint('md')) {\n        return true;\n      } else if (mode == 'desktop-and-tablet' && breakpoint >= this.getBreakpoint('md') + 1) {\n        return true;\n      } else if (mode == 'tablet-and-mobile' && breakpoint <= this.getBreakpoint('lg')) {\n        return true;\n      } else if (mode == 'minimal-desktop-and-below' && breakpoint <= this.getBreakpoint('xl')) {\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\r\n           * Checks whether given device mode is currently activated.\r\n           * @param {string} mode Responsive mode name(e.g: desktop,\r\n           *     desktop-and-tablet, tablet, tablet-and-mobile, mobile)\r\n           * @returns {boolean}\r\n           */\n    isBreakpointUp: function isBreakpointUp(mode) {\n      var width = this.getViewPort().width;\n      var breakpoint = this.getBreakpoint(mode);\n      return width >= breakpoint;\n    },\n    isBreakpointDown: function isBreakpointDown(mode) {\n      var width = this.getViewPort().width;\n      var breakpoint = this.getBreakpoint(mode);\n      return width < breakpoint;\n    },\n\n    /**\r\n     * Generates unique ID for give prefix.\r\n     * @param {string} prefix Prefix for generated ID\r\n     * @returns {boolean}\r\n     */\n    getUniqueID: function getUniqueID(prefix) {\n      return prefix + Math.floor(Math.random() * new Date().getTime());\n    },\n\n    /**\r\n     * Gets window width for give breakpoint mode.\r\n     * @param {string} mode Responsive mode name(e.g: xl, lg, md, sm)\r\n     * @returns {number}\r\n     */\n    getBreakpoint: function getBreakpoint(mode) {\n      return breakpoints[mode];\n    },\n\n    /**\r\n     * Checks whether object has property matchs given key path.\r\n     * @param {object} obj Object contains values paired with given key path\r\n     * @param {string} keys Keys path seperated with dots\r\n     * @returns {object}\r\n     */\n    isset: function isset(obj, keys) {\n      var stone;\n      keys = keys || '';\n\n      if (keys.indexOf('[') !== -1) {\n        throw new Error('Unsupported object path notation.');\n      }\n\n      keys = keys.split('.');\n\n      do {\n        if (obj === undefined) {\n          return false;\n        }\n\n        stone = keys.shift();\n\n        if (!obj.hasOwnProperty(stone)) {\n          return false;\n        }\n\n        obj = obj[stone];\n      } while (keys.length);\n\n      return true;\n    },\n\n    /**\r\n     * Gets highest z-index of the given element parents\r\n     * @param {object} el jQuery element object\r\n     * @returns {number}\r\n     */\n    getHighestZindex: function getHighestZindex(el) {\n      var position, value;\n\n      while (el && el !== document) {\n        // Ignore z-index if position is set to a value where z-index is ignored by the browser\n        // This makes behavior of this function consistent across browsers\n        // WebKit always returns auto if the element is positioned\n        position = KTUtil.css(el, 'position');\n\n        if (position === \"absolute\" || position === \"relative\" || position === \"fixed\") {\n          // IE returns 0 when zIndex is not specified\n          // other browsers return a string\n          // we ignore the case of nested elements with an explicit value of 0\n          // <div style=\"z-index: -10;\"><div style=\"z-index: 0;\"></div></div>\n          value = parseInt(KTUtil.css(el, 'z-index'));\n\n          if (!isNaN(value) && value !== 0) {\n            return value;\n          }\n        }\n\n        el = el.parentNode;\n      }\n\n      return null;\n    },\n\n    /**\r\n     * Checks whether the element has any parent with fixed positionfreg\r\n     * @param {object} el jQuery element object\r\n     * @returns {boolean}\r\n     */\n    hasFixedPositionedParent: function hasFixedPositionedParent(el) {\n      var position;\n\n      while (el && el !== document) {\n        position = KTUtil.css(el, 'position');\n\n        if (position === \"fixed\") {\n          return true;\n        }\n\n        el = el.parentNode;\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Simulates delay\r\n     */\n    sleep: function sleep(milliseconds) {\n      var start = new Date().getTime();\n\n      for (var i = 0; i < 1e7; i++) {\n        if (new Date().getTime() - start > milliseconds) {\n          break;\n        }\n      }\n    },\n\n    /**\r\n     * Gets randomly generated integer value within given min and max range\r\n     * @param {number} min Range start value\r\n     * @param {number} max Range end value\r\n     * @returns {number}\r\n     */\n    getRandomInt: function getRandomInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n\n    /**\r\n     * Checks whether Angular library is included\r\n     * @returns {boolean}\r\n     */\n    isAngularVersion: function isAngularVersion() {\n      return window.Zone !== undefined ? true : false;\n    },\n    // Deep extend:  $.extend(true, {}, objA, objB);\n    deepExtend: function deepExtend(out) {\n      out = out || {};\n\n      for (var i = 1; i < arguments.length; i++) {\n        var obj = arguments[i];\n        if (!obj) continue;\n\n        for (var key in obj) {\n          if (!obj.hasOwnProperty(key)) {\n            continue;\n          } // based on https://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/\n\n\n          if (Object.prototype.toString.call(obj[key]) === '[object Object]') {\n            out[key] = KTUtil.deepExtend(out[key], obj[key]);\n            continue;\n          }\n\n          out[key] = obj[key];\n        }\n      }\n\n      return out;\n    },\n    // extend:  $.extend({}, objA, objB);\n    extend: function extend(out) {\n      out = out || {};\n\n      for (var i = 1; i < arguments.length; i++) {\n        if (!arguments[i]) continue;\n\n        for (var key in arguments[i]) {\n          if (arguments[i].hasOwnProperty(key)) out[key] = arguments[i][key];\n        }\n      }\n\n      return out;\n    },\n    getById: function getById(el) {\n      if (typeof el === 'string') {\n        return document.getElementById(el);\n      } else {\n        return el;\n      }\n    },\n    getByTag: function getByTag(query) {\n      return document.getElementsByTagName(query);\n    },\n    getByTagName: function getByTagName(query) {\n      return document.getElementsByTagName(query);\n    },\n    getByClass: function getByClass(query) {\n      return document.getElementsByClassName(query);\n    },\n    getBody: function getBody() {\n      return document.getElementsByTagName('body')[0];\n    },\n\n    /**\r\n     * Checks whether the element has given classes\r\n     * @param {object} el jQuery element object\r\n     * @param {string} Classes string\r\n     * @returns {boolean}\r\n     */\n    hasClasses: function hasClasses(el, classes) {\n      if (!el) {\n        return;\n      }\n\n      var classesArr = classes.split(\" \");\n\n      for (var i = 0; i < classesArr.length; i++) {\n        if (KTUtil.hasClass(el, KTUtil.trim(classesArr[i])) == false) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    hasClass: function hasClass(el, className) {\n      if (!el) {\n        return;\n      }\n\n      return el.classList ? el.classList.contains(className) : new RegExp('\\\\b' + className + '\\\\b').test(el.className);\n    },\n    addClass: function addClass(el, className) {\n      if (!el || typeof className === 'undefined') {\n        return;\n      }\n\n      var classNames = className.split(' ');\n\n      if (el.classList) {\n        for (var i = 0; i < classNames.length; i++) {\n          if (classNames[i] && classNames[i].length > 0) {\n            el.classList.add(KTUtil.trim(classNames[i]));\n          }\n        }\n      } else if (!KTUtil.hasClass(el, className)) {\n        for (var x = 0; x < classNames.length; x++) {\n          el.className += ' ' + KTUtil.trim(classNames[x]);\n        }\n      }\n    },\n    removeClass: function removeClass(el, className) {\n      if (!el || typeof className === 'undefined') {\n        return;\n      }\n\n      var classNames = className.split(' ');\n\n      if (el.classList) {\n        for (var i = 0; i < classNames.length; i++) {\n          el.classList.remove(KTUtil.trim(classNames[i]));\n        }\n      } else if (KTUtil.hasClass(el, className)) {\n        for (var x = 0; x < classNames.length; x++) {\n          el.className = el.className.replace(new RegExp('\\\\b' + KTUtil.trim(classNames[x]) + '\\\\b', 'g'), '');\n        }\n      }\n    },\n    triggerCustomEvent: function triggerCustomEvent(el, eventName, data) {\n      var event;\n\n      if (window.CustomEvent) {\n        event = new CustomEvent(eventName, {\n          detail: data\n        });\n      } else {\n        event = document.createEvent('CustomEvent');\n        event.initCustomEvent(eventName, true, true, data);\n      }\n\n      el.dispatchEvent(event);\n    },\n    triggerEvent: function triggerEvent(node, eventName) {\n      // Make sure we use the ownerDocument from the provided node to avoid cross-window problems\n      var doc;\n\n      if (node.ownerDocument) {\n        doc = node.ownerDocument;\n      } else if (node.nodeType == 9) {\n        // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n        doc = node;\n      } else {\n        throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n      }\n\n      if (node.dispatchEvent) {\n        // Gecko-style approach (now the standard) takes more work\n        var eventClass = \"\"; // Different events have different event classes.\n        // If this switch statement can't map an eventName to an eventClass,\n        // the event firing is going to fail.\n\n        switch (eventName) {\n          case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n\n          case \"mouseenter\":\n          case \"mouseleave\":\n          case \"mousedown\":\n          case \"mouseup\":\n            eventClass = \"MouseEvents\";\n            break;\n\n          case \"focus\":\n          case \"change\":\n          case \"blur\":\n          case \"select\":\n            eventClass = \"HTMLEvents\";\n            break;\n\n          default:\n            throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n            break;\n        }\n\n        var event = doc.createEvent(eventClass);\n        var bubbles = eventName == \"change\" ? false : true;\n        event.initEvent(eventName, bubbles, true); // All events created as bubbling and cancelable.\n\n        event.synthetic = true; // allow detection of synthetic events\n        // The second parameter says go ahead with the default action\n\n        node.dispatchEvent(event, true);\n      } else if (node.fireEvent) {\n        // IE-old school style\n        var event = doc.createEventObject();\n        event.synthetic = true; // allow detection of synthetic events\n\n        node.fireEvent(\"on\" + eventName, event);\n      }\n    },\n    index: function index(el) {\n      var c = el.parentNode.children,\n          i = 0;\n\n      for (; i < c.length; i++) {\n        if (c[i] == el) return i;\n      }\n    },\n    trim: function trim(string) {\n      return string.trim();\n    },\n    eventTriggered: function eventTriggered(e) {\n      if (e.currentTarget.dataset.triggered) {\n        return true;\n      } else {\n        e.currentTarget.dataset.triggered = true;\n        return false;\n      }\n    },\n    remove: function remove(el) {\n      if (el && el.parentNode) {\n        el.parentNode.removeChild(el);\n      }\n    },\n    find: function find(parent, query) {\n      parent = KTUtil.getById(parent);\n\n      if (parent) {\n        return parent.querySelector(query);\n      }\n    },\n    findAll: function findAll(parent, query) {\n      parent = KTUtil.getById(parent);\n\n      if (parent) {\n        return parent.querySelectorAll(query);\n      }\n    },\n    insertAfter: function insertAfter(el, referenceNode) {\n      return referenceNode.parentNode.insertBefore(el, referenceNode.nextSibling);\n    },\n    parents: function parents(elem, selector) {\n      // Element.matches() polyfill\n      if (!Element.prototype.matches) {\n        Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n          var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n              i = matches.length;\n\n          while (--i >= 0 && matches.item(i) !== this) {}\n\n          return i > -1;\n        };\n      } // Set up a parent array\n\n\n      var parents = []; // Push each parent element to the array\n\n      for (; elem && elem !== document; elem = elem.parentNode) {\n        if (selector) {\n          if (elem.matches(selector)) {\n            parents.push(elem);\n          }\n\n          continue;\n        }\n\n        parents.push(elem);\n      } // Return our parent array\n\n\n      return parents;\n    },\n    children: function children(el, selector, log) {\n      if (!el || !el.childNodes) {\n        return;\n      }\n\n      var result = [],\n          i = 0,\n          l = el.childNodes.length;\n\n      for (var i; i < l; ++i) {\n        if (el.childNodes[i].nodeType == 1 && KTUtil.matches(el.childNodes[i], selector, log)) {\n          result.push(el.childNodes[i]);\n        }\n      }\n\n      return result;\n    },\n    child: function child(el, selector, log) {\n      var children = KTUtil.children(el, selector, log);\n      return children ? children[0] : null;\n    },\n    matches: function matches(el, selector, log) {\n      var p = Element.prototype;\n\n      var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function (s) {\n        return [].indexOf.call(document.querySelectorAll(s), this) !== -1;\n      };\n\n      if (el && el.tagName) {\n        return f.call(el, selector);\n      } else {\n        return false;\n      }\n    },\n    data: function data(el) {\n      return {\n        set: function set(name, data) {\n          if (!el) {\n            return;\n          }\n\n          if (el.customDataTag === undefined) {\n            window.KTUtilElementDataStoreID++;\n            el.customDataTag = window.KTUtilElementDataStoreID;\n          }\n\n          if (window.KTUtilElementDataStore[el.customDataTag] === undefined) {\n            window.KTUtilElementDataStore[el.customDataTag] = {};\n          }\n\n          window.KTUtilElementDataStore[el.customDataTag][name] = data;\n        },\n        get: function get(name) {\n          if (!el) {\n            return;\n          }\n\n          if (el.customDataTag === undefined) {\n            return null;\n          }\n\n          return this.has(name) ? window.KTUtilElementDataStore[el.customDataTag][name] : null;\n        },\n        has: function has(name) {\n          if (!el) {\n            return false;\n          }\n\n          if (el.customDataTag === undefined) {\n            return false;\n          }\n\n          return window.KTUtilElementDataStore[el.customDataTag] && window.KTUtilElementDataStore[el.customDataTag][name] ? true : false;\n        },\n        remove: function remove(name) {\n          if (el && this.has(name)) {\n            delete window.KTUtilElementDataStore[el.customDataTag][name];\n          }\n        }\n      };\n    },\n    outerWidth: function outerWidth(el, margin) {\n      var width;\n\n      if (margin === true) {\n        width = parseFloat(el.offsetWidth);\n        width += parseFloat(KTUtil.css(el, 'margin-left')) + parseFloat(KTUtil.css(el, 'margin-right'));\n        return parseFloat(width);\n      } else {\n        width = parseFloat(el.offsetWidth);\n        return width;\n      }\n    },\n    offset: function offset(el) {\n      var rect, win;\n\n      if (!el) {\n        return;\n      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n      // Support: IE <=11 only\n      // Running getBoundingClientRect on a\n      // disconnected node in IE throws an error\n\n\n      if (!el.getClientRects().length) {\n        return {\n          top: 0,\n          left: 0\n        };\n      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\n\n      rect = el.getBoundingClientRect();\n      win = el.ownerDocument.defaultView;\n      return {\n        top: rect.top + win.pageYOffset,\n        left: rect.left + win.pageXOffset\n      };\n    },\n    height: function height(el) {\n      return KTUtil.css(el, 'height');\n    },\n    outerHeight: function outerHeight(el, withMargin) {\n      var height = el.offsetHeight;\n      var style;\n\n      if (typeof withMargin !== 'undefined' && withMargin === true) {\n        style = getComputedStyle(el);\n        height += parseInt(style.marginTop) + parseInt(style.marginBottom);\n        return height;\n      } else {\n        return height;\n      }\n    },\n    visible: function visible(el) {\n      return !(el.offsetWidth === 0 && el.offsetHeight === 0);\n    },\n    attr: function attr(el, name, value) {\n      if (el == undefined) {\n        return;\n      }\n\n      if (value !== undefined) {\n        el.setAttribute(name, value);\n      } else {\n        return el.getAttribute(name);\n      }\n    },\n    hasAttr: function hasAttr(el, name) {\n      if (el == undefined) {\n        return;\n      }\n\n      return el.getAttribute(name) ? true : false;\n    },\n    removeAttr: function removeAttr(el, name) {\n      if (el == undefined) {\n        return;\n      }\n\n      el.removeAttribute(name);\n    },\n    animate: function animate(from, to, duration, update, easing, done) {\n      /**\r\n       * TinyAnimate.easings\r\n       *  Adapted from jQuery Easing\r\n       */\n      var easings = {};\n      var easing;\n\n      easings.linear = function (t, b, c, d) {\n        return c * t / d + b;\n      };\n\n      easing = easings.linear; // Early bail out if called incorrectly\n\n      if (typeof from !== 'number' || typeof to !== 'number' || typeof duration !== 'number' || typeof update !== 'function') {\n        return;\n      } // Create mock done() function if necessary\n\n\n      if (typeof done !== 'function') {\n        done = function done() {};\n      } // Pick implementation (requestAnimationFrame | setTimeout)\n\n\n      var rAF = window.requestAnimationFrame || function (callback) {\n        window.setTimeout(callback, 1000 / 50);\n      }; // Animation loop\n\n\n      var canceled = false;\n      var change = to - from;\n\n      function loop(timestamp) {\n        var time = (timestamp || +new Date()) - start;\n\n        if (time >= 0) {\n          update(easing(time, from, change, duration));\n        }\n\n        if (time >= 0 && time >= duration) {\n          update(to);\n          done();\n        } else {\n          rAF(loop);\n        }\n      }\n\n      update(from); // Start animation loop\n\n      var start = window.performance && window.performance.now ? window.performance.now() : +new Date();\n      rAF(loop);\n    },\n    actualCss: function actualCss(el, prop, cache) {\n      var css = '';\n\n      if (el instanceof HTMLElement === false) {\n        return;\n      }\n\n      if (!el.getAttribute('kt-hidden-' + prop) || cache === false) {\n        var value; // the element is hidden so:\n        // making the el block so we can meassure its height but still be hidden\n\n        css = el.style.cssText;\n        el.style.cssText = 'position: absolute; visibility: hidden; display: block;';\n\n        if (prop == 'width') {\n          value = el.offsetWidth;\n        } else if (prop == 'height') {\n          value = el.offsetHeight;\n        }\n\n        el.style.cssText = css; // store it in cache\n\n        el.setAttribute('kt-hidden-' + prop, value);\n        return parseFloat(value);\n      } else {\n        // store it in cache\n        return parseFloat(el.getAttribute('kt-hidden-' + prop));\n      }\n    },\n    actualHeight: function actualHeight(el, cache) {\n      return KTUtil.actualCss(el, 'height', cache);\n    },\n    actualWidth: function actualWidth(el, cache) {\n      return KTUtil.actualCss(el, 'width', cache);\n    },\n    getScroll: function getScroll(element, method) {\n      // The passed in `method` value should be 'Top' or 'Left'\n      method = 'scroll' + method;\n      return element == window || element == document ? self[method == 'scrollTop' ? 'pageYOffset' : 'pageXOffset'] || browserSupportsBoxModel && document.documentElement[method] || document.body[method] : element[method];\n    },\n    css: function css(el, styleProp, value) {\n      if (!el) {\n        return;\n      }\n\n      if (value !== undefined) {\n        el.style[styleProp] = value;\n      } else {\n        var defaultView = (el.ownerDocument || document).defaultView; // W3C standard way:\n\n        if (defaultView && defaultView.getComputedStyle) {\n          // sanitize property name to css notation\n          // (hyphen separated words eg. font-Size)\n          styleProp = styleProp.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n          return defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);\n        } else if (el.currentStyle) {\n          // IE\n          // sanitize property name to camelCase\n          styleProp = styleProp.replace(/\\-(\\w)/g, function (str, letter) {\n            return letter.toUpperCase();\n          });\n          value = el.currentStyle[styleProp]; // convert other units to pixels on IE\n\n          if (/^\\d+(em|pt|%|ex)?$/i.test(value)) {\n            return function (value) {\n              var oldLeft = el.style.left,\n                  oldRsLeft = el.runtimeStyle.left;\n              el.runtimeStyle.left = el.currentStyle.left;\n              el.style.left = value || 0;\n              value = el.style.pixelLeft + \"px\";\n              el.style.left = oldLeft;\n              el.runtimeStyle.left = oldRsLeft;\n              return value;\n            }(value);\n          }\n\n          return value;\n        }\n      }\n    },\n    slide: function slide(el, dir, speed, callback, recalcMaxHeight) {\n      if (!el || dir == 'up' && KTUtil.visible(el) === false || dir == 'down' && KTUtil.visible(el) === true) {\n        return;\n      }\n\n      speed = speed ? speed : 600;\n      var calcHeight = KTUtil.actualHeight(el);\n      var calcPaddingTop = false;\n      var calcPaddingBottom = false;\n\n      if (KTUtil.css(el, 'padding-top') && KTUtil.data(el).has('slide-padding-top') !== true) {\n        KTUtil.data(el).set('slide-padding-top', KTUtil.css(el, 'padding-top'));\n      }\n\n      if (KTUtil.css(el, 'padding-bottom') && KTUtil.data(el).has('slide-padding-bottom') !== true) {\n        KTUtil.data(el).set('slide-padding-bottom', KTUtil.css(el, 'padding-bottom'));\n      }\n\n      if (KTUtil.data(el).has('slide-padding-top')) {\n        calcPaddingTop = parseInt(KTUtil.data(el).get('slide-padding-top'));\n      }\n\n      if (KTUtil.data(el).has('slide-padding-bottom')) {\n        calcPaddingBottom = parseInt(KTUtil.data(el).get('slide-padding-bottom'));\n      }\n\n      if (dir == 'up') {\n        // up\n        el.style.cssText = 'display: block; overflow: hidden;';\n\n        if (calcPaddingTop) {\n          KTUtil.animate(0, calcPaddingTop, speed, function (value) {\n            el.style.paddingTop = calcPaddingTop - value + 'px';\n          }, 'linear');\n        }\n\n        if (calcPaddingBottom) {\n          KTUtil.animate(0, calcPaddingBottom, speed, function (value) {\n            el.style.paddingBottom = calcPaddingBottom - value + 'px';\n          }, 'linear');\n        }\n\n        KTUtil.animate(0, calcHeight, speed, function (value) {\n          el.style.height = calcHeight - value + 'px';\n        }, 'linear', function () {\n          el.style.height = '';\n          el.style.display = 'none';\n\n          if (typeof callback === 'function') {\n            callback();\n          }\n        });\n      } else if (dir == 'down') {\n        // down\n        el.style.cssText = 'display: block; overflow: hidden;';\n\n        if (calcPaddingTop) {\n          KTUtil.animate(0, calcPaddingTop, speed, function (value) {\n            //\n            el.style.paddingTop = value + 'px';\n          }, 'linear', function () {\n            el.style.paddingTop = '';\n          });\n        }\n\n        if (calcPaddingBottom) {\n          KTUtil.animate(0, calcPaddingBottom, speed, function (value) {\n            el.style.paddingBottom = value + 'px';\n          }, 'linear', function () {\n            el.style.paddingBottom = '';\n          });\n        }\n\n        KTUtil.animate(0, calcHeight, speed, function (value) {\n          el.style.height = value + 'px';\n        }, 'linear', function () {\n          el.style.height = '';\n          el.style.display = '';\n          el.style.overflow = '';\n\n          if (typeof callback === 'function') {\n            callback();\n          }\n        });\n      }\n    },\n    slideUp: function slideUp(el, speed, callback) {\n      KTUtil.slide(el, 'up', speed, callback);\n    },\n    slideDown: function slideDown(el, speed, callback) {\n      KTUtil.slide(el, 'down', speed, callback);\n    },\n    show: function show(el, display) {\n      if (typeof el !== 'undefined') {\n        el.style.display = display ? display : 'block';\n      }\n    },\n    hide: function hide(el) {\n      if (typeof el !== 'undefined') {\n        el.style.display = 'none';\n      }\n    },\n    addEvent: function addEvent(el, type, handler, one) {\n      if (typeof el !== 'undefined' && el !== null) {\n        el.addEventListener(type, handler);\n      }\n    },\n    removeEvent: function removeEvent(el, type, handler) {\n      if (el !== null) {\n        el.removeEventListener(type, handler);\n      }\n    },\n    on: function on(element, selector, event, handler) {\n      if (!selector) {\n        return;\n      }\n\n      var eventId = KTUtil.getUniqueID('event');\n\n      window.KTUtilDelegatedEventHandlers[eventId] = function (e) {\n        var targets = element.querySelectorAll(selector);\n        var target = e.target;\n\n        while (target && target !== element) {\n          for (var i = 0, j = targets.length; i < j; i++) {\n            if (target === targets[i]) {\n              handler.call(target, e);\n            }\n          }\n\n          target = target.parentNode;\n        }\n      };\n\n      KTUtil.addEvent(element, event, window.KTUtilDelegatedEventHandlers[eventId]);\n      return eventId;\n    },\n    off: function off(element, event, eventId) {\n      if (!element || !window.KTUtilDelegatedEventHandlers[eventId]) {\n        return;\n      }\n\n      KTUtil.removeEvent(element, event, window.KTUtilDelegatedEventHandlers[eventId]);\n      delete window.KTUtilDelegatedEventHandlers[eventId];\n    },\n    one: function onetime(el, type, callback) {\n      el.addEventListener(type, function callee(e) {\n        // remove event\n        if (e.target && e.target.removeEventListener) {\n          e.target.removeEventListener(e.type, callee);\n        } // need to verify from https://themeforest.net/author_dashboard#comment_23615588\n\n\n        if (el && el.removeEventListener) {\n          e.currentTarget.removeEventListener(e.type, callee);\n        } // call handler\n\n\n        return callback(e);\n      });\n    },\n    hash: function hash(str) {\n      var hash = 0,\n          i,\n          chr;\n      if (str.length === 0) return hash;\n\n      for (i = 0; i < str.length; i++) {\n        chr = str.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0; // Convert to 32bit integer\n      }\n\n      return hash;\n    },\n    animateClass: function animateClass(el, animationName, callback) {\n      var animation;\n      var animations = {\n        animation: 'animationend',\n        OAnimation: 'oAnimationEnd',\n        MozAnimation: 'mozAnimationEnd',\n        WebkitAnimation: 'webkitAnimationEnd',\n        msAnimation: 'msAnimationEnd'\n      };\n\n      for (var t in animations) {\n        if (el.style[t] !== undefined) {\n          animation = animations[t];\n        }\n      }\n\n      KTUtil.addClass(el, 'animated ' + animationName);\n      KTUtil.one(el, animation, function () {\n        KTUtil.removeClass(el, 'animated ' + animationName);\n      });\n\n      if (callback) {\n        KTUtil.one(el, animation, callback);\n      }\n    },\n    transitionEnd: function transitionEnd(el, callback) {\n      var transition;\n      var transitions = {\n        transition: 'transitionend',\n        OTransition: 'oTransitionEnd',\n        MozTransition: 'mozTransitionEnd',\n        WebkitTransition: 'webkitTransitionEnd',\n        msTransition: 'msTransitionEnd'\n      };\n\n      for (var t in transitions) {\n        if (el.style[t] !== undefined) {\n          transition = transitions[t];\n        }\n      }\n\n      KTUtil.one(el, transition, callback);\n    },\n    animationEnd: function animationEnd(el, callback) {\n      var animation;\n      var animations = {\n        animation: 'animationend',\n        OAnimation: 'oAnimationEnd',\n        MozAnimation: 'mozAnimationEnd',\n        WebkitAnimation: 'webkitAnimationEnd',\n        msAnimation: 'msAnimationEnd'\n      };\n\n      for (var t in animations) {\n        if (el.style[t] !== undefined) {\n          animation = animations[t];\n        }\n      }\n\n      KTUtil.one(el, animation, callback);\n    },\n    animateDelay: function animateDelay(el, value) {\n      var vendors = ['webkit-', 'moz-', 'ms-', 'o-', ''];\n\n      for (var i = 0; i < vendors.length; i++) {\n        KTUtil.css(el, vendors[i] + 'animation-delay', value);\n      }\n    },\n    animateDuration: function animateDuration(el, value) {\n      var vendors = ['webkit-', 'moz-', 'ms-', 'o-', ''];\n\n      for (var i = 0; i < vendors.length; i++) {\n        KTUtil.css(el, vendors[i] + 'animation-duration', value);\n      }\n    },\n    scrollTo: function scrollTo(target, offset, duration) {\n      var duration = duration ? duration : 500;\n      var targetPos = target ? KTUtil.offset(target).top : 0;\n      var scrollPos = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\n      var from, to;\n\n      if (offset) {\n        scrollPos += offset;\n      }\n\n      from = scrollPos;\n      to = targetPos;\n      KTUtil.animate(from, to, duration, function (value) {\n        document.documentElement.scrollTop = value;\n        document.body.parentNode.scrollTop = value;\n        document.body.scrollTop = value;\n      }); //, easing, done\n    },\n    scrollTop: function scrollTop(offset, duration) {\n      KTUtil.scrollTo(null, offset, duration);\n    },\n    isArray: function isArray(obj) {\n      return obj && Array.isArray(obj);\n    },\n    ready: function ready(callback) {\n      if (document.attachEvent ? document.readyState === \"complete\" : document.readyState !== \"loading\") {\n        callback();\n      } else {\n        document.addEventListener('DOMContentLoaded', callback);\n      }\n    },\n    isEmpty: function isEmpty(obj) {\n      for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    numberString: function numberString(nStr) {\n      nStr += '';\n      var x = nStr.split('.');\n      var x1 = x[0];\n      var x2 = x.length > 1 ? '.' + x[1] : '';\n      var rgx = /(\\d+)(\\d{3})/;\n\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + ',' + '$2');\n      }\n\n      return x1 + x2;\n    },\n    detectIE: function detectIE() {\n      var ua = window.navigator.userAgent; // Test values; Uncomment to check result …\n      // IE 10\n      // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n      // IE 11\n      // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n      // Edge 12 (Spartan)\n      // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n      // Edge 13\n      // ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586';\n\n      var msie = ua.indexOf('MSIE ');\n\n      if (msie > 0) {\n        // IE 10 or older => return version number\n        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n      }\n\n      var trident = ua.indexOf('Trident/');\n\n      if (trident > 0) {\n        // IE 11 => return version number\n        var rv = ua.indexOf('rv:');\n        return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n      }\n\n      var edge = ua.indexOf('Edge/');\n\n      if (edge > 0) {\n        // Edge (IE 12+) => return version number\n        return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n      } // other browser\n\n\n      return false;\n    },\n    isRTL: function isRTL() {\n      var html = KTUtil.getByTagName('html')[0];\n\n      if (html) {\n        return KTUtil.attr(html, 'direction') == 'rtl';\n      }\n    },\n    // Scroller\n    scrollInit: function scrollInit(element, options) {\n      if (!element) {\n        return;\n      } // Learn more: https://github.com/mdbootstrap/perfect-scrollbar#options\n\n\n      var pluginDefOptions = {\n        wheelSpeed: 0.5,\n        swipeEasing: true,\n        wheelPropagation: false,\n        minScrollbarLength: 40,\n        maxScrollbarLength: 300,\n        suppressScrollX: true\n      };\n      options = KTUtil.deepExtend({}, pluginDefOptions, options); // Define init function\n\n      function init() {\n        var ps;\n        var height; // Get extra options via data attributes\n\n        var attrs = element.getAttributeNames();\n\n        if (attrs.length > 0) {\n          attrs.forEach(function (attrName) {\n            // more options; https://github.com/ganlanyuan/tiny-slider#options\n            if (/^data-.*/g.test(attrName)) {\n              if (['scroll', 'height', 'mobile-height'].includes(optionName) == false) {\n                var optionName = attrName.replace('data-', '').toLowerCase().replace(/(?:[\\s-])\\w/g, function (match) {\n                  return match.replace('-', '').toUpperCase();\n                });\n                options[optionName] = KTUtil.filterBoolean(element.getAttribute(attrName));\n              }\n            }\n          });\n        }\n\n        if (options.height instanceof Function) {\n          height = options.height.call();\n        } else {\n          if (KTUtil.isMobileDevice() === true && options.mobileHeight) {\n            height = parseInt(options.mobileHeight);\n          } else if (options.height) {\n            height = parseInt(options.height);\n          } else {\n            height = parseInt(KTUtil.css(element, 'height'));\n          }\n        }\n\n        if (height === false) {\n          KTUtil.scrollDestroy(element, true);\n          return;\n        }\n\n        height = parseInt(height); // Destroy scroll on table and mobile modes\n\n        if ((options.mobileNativeScroll || options.disableForMobile) && KTUtil.isMobileDevice() === true) {\n          ps = KTUtil.data(element).get('ps');\n\n          if (ps) {\n            if (options.resetHeightOnDestroy) {\n              KTUtil.css(element, 'height', 'auto');\n            } else {\n              KTUtil.css(element, 'overflow', 'auto');\n\n              if (height > 0) {\n                KTUtil.css(element, 'height', height + 'px');\n              }\n            }\n\n            ps.destroy();\n            ps = KTUtil.data(element).remove('ps');\n          } else if (height > 0) {\n            KTUtil.css(element, 'overflow', 'auto');\n            KTUtil.css(element, 'height', height + 'px');\n          }\n\n          return;\n        }\n\n        if (height > 0) {\n          KTUtil.css(element, 'height', height + 'px');\n        }\n\n        if (options.desktopNativeScroll) {\n          KTUtil.css(element, 'overflow', 'auto');\n          return;\n        } // Pass options via HTML Attributes\n\n\n        if (KTUtil.attr(element, 'data-window-scroll') == 'true') {\n          options.windowScroll = true;\n        } // Init scroll\n\n\n        ps = KTUtil.data(element).get('ps');\n\n        if (ps) {\n          ps.update();\n        } else {\n          KTUtil.css(element, 'overflow', 'hidden');\n          KTUtil.addClass(element, 'scroll');\n          ps = new PerfectScrollbar(element, options);\n          KTUtil.data(element).set('ps', ps);\n        } // Remember scroll position in cookie\n\n\n        var uid = KTUtil.attr(element, 'id'); // Todo:Consider using Localstorage\n\n        if (options.rememberPosition === true && KTCookie && uid) {\n          if (KTCookie.getCookie(uid)) {\n            var pos = parseInt(KTCookie.getCookie(uid));\n\n            if (pos > 0) {\n              element.scrollTop = pos;\n            }\n          }\n\n          element.addEventListener('ps-scroll-y', function () {\n            KTCookie.setCookie(uid, element.scrollTop);\n          });\n        }\n      } // Init\n\n\n      init(); // Handle window resize\n\n      if (options.handleWindowResize) {\n        KTUtil.addResizeHandler(function () {\n          init();\n        });\n      }\n    },\n    scrollUpdate: function scrollUpdate(element) {\n      var ps = KTUtil.data(element).get('ps');\n\n      if (ps) {\n        ps.update();\n      }\n    },\n    scrollUpdateAll: function scrollUpdateAll(parent) {\n      var scrollers = KTUtil.findAll(parent, '.ps');\n\n      for (var i = 0, len = scrollers.length; i < len; i++) {\n        KTUtil.scrollUpdate(scrollers[i]);\n      }\n    },\n    scrollDestroy: function scrollDestroy(element, resetAll) {\n      var ps = KTUtil.data(element).get('ps');\n\n      if (ps) {\n        ps.destroy();\n        ps = KTUtil.data(element).remove('ps');\n      }\n\n      if (element && resetAll) {\n        element.style.setProperty('overflow', '');\n        element.style.setProperty('height', '');\n      }\n    },\n    filterBoolean: function filterBoolean(val) {\n      // Convert string boolean\n      if (val === true || val === 'true') {\n        return true;\n      }\n\n      if (val === false || val === 'false') {\n        return false;\n      }\n\n      return val;\n    },\n    setHTML: function setHTML(el, html) {\n      el.innerHTML = html;\n    },\n    getHTML: function getHTML(el) {\n      if (el) {\n        return el.innerHTML;\n      }\n    },\n    getDocumentHeight: function getDocumentHeight() {\n      var body = document.body;\n      var html = document.documentElement;\n      return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n    },\n    getScrollTop: function getScrollTop() {\n      return (document.scrollingElement || document.documentElement).scrollTop;\n    },\n    changeColor: function changeColor(col, amt) {\n      var usePound = false;\n\n      if (col[0] == \"#\") {\n        col = col.slice(1);\n        usePound = true;\n      }\n\n      var num = parseInt(col, 16);\n      var r = (num >> 16) + amt;\n      if (r > 255) r = 255;else if (r < 0) r = 0;\n      var b = (num >> 8 & 0x00FF) + amt;\n      if (b > 255) b = 255;else if (b < 0) b = 0;\n      var g = (num & 0x0000FF) + amt;\n      if (g > 255) g = 255;else if (g < 0) g = 0;\n      return (usePound ? \"#\" : \"\") + (g | b << 8 | r << 16).toString(16);\n    },\n    // Throttle function: Input as function which needs to be throttled and delay is the time interval in milliseconds\n    throttle: function throttle(timer, func, delay) {\n      // If setTimeout is already scheduled, no need to do anything\n      if (timer) {\n        return;\n      } // Schedule a setTimeout after delay seconds\n\n\n      timer = setTimeout(function () {\n        func(); // Once setTimeout function execution is finished, timerId = undefined so that in <br>\n        // the next scroll event function execution can be scheduled by the setTimeout\n\n        timer = undefined;\n      }, delay);\n    },\n    // Debounce function: Input as function which needs to be debounced and delay is the debounced time in milliseconds\n    debounce: function debounce(timer, func, delay) {\n      // Cancels the setTimeout method execution\n      clearTimeout(timer); // Executes the func after delay time.\n\n      timer = setTimeout(func, delay);\n    },\n    btnWait: function btnWait(el, cls, message, disable) {\n      if (!el) {\n        return;\n      }\n\n      if (typeof disable !== 'undefined' && disable === true) {\n        KTUtil.attr(el, \"disabled\", true);\n      }\n\n      if (cls) {\n        KTUtil.addClass(el, cls);\n        KTUtil.attr(el, \"wait-class\", cls);\n      }\n\n      if (message) {\n        var caption = KTUtil.find(el, '.btn-caption');\n\n        if (caption) {\n          KTUtil.data(caption).set('caption', KTUtil.getHTML(caption));\n          KTUtil.setHTML(caption, message);\n        } else {\n          KTUtil.data(el).set('caption', KTUtil.getHTML(el));\n          KTUtil.setHTML(el, message);\n        }\n      }\n    },\n    btnRelease: function btnRelease(el) {\n      if (!el) {\n        return;\n      } /// Show loading state on button\n\n\n      KTUtil.removeAttr(el, \"disabled\");\n\n      if (KTUtil.hasAttr(el, \"wait-class\")) {\n        KTUtil.removeClass(el, KTUtil.attr(el, \"wait-class\"));\n      }\n\n      var caption = KTUtil.find(el, '.btn-caption');\n\n      if (caption && KTUtil.data(caption).has('caption')) {\n        KTUtil.setHTML(caption, KTUtil.data(caption).get('caption'));\n      } else if (KTUtil.data(el).has('caption')) {\n        KTUtil.setHTML(el, KTUtil.data(el).get('caption'));\n      }\n    },\n    isOffscreen: function isOffscreen(el, direction, offset) {\n      offset = offset || 0;\n      var windowWidth = KTUtil.getViewPort().width;\n      var windowHeight = KTUtil.getViewPort().height;\n      var top = KTUtil.offset(el).top;\n      var height = KTUtil.outerHeight(el) + offset;\n      var left = KTUtil.offset(el).left;\n      var width = KTUtil.outerWidth(el) + offset;\n\n      if (direction == 'bottom') {\n        if (windowHeight < top + height) {\n          return true;\n        } else if (windowHeight > top + height * 1.5) {\n          return true;\n        }\n      }\n\n      if (direction == 'top') {\n        if (top < 0) {\n          return true;\n        } else if (top > height) {\n          return true;\n        }\n      }\n\n      if (direction == 'left') {\n        if (left < 0) {\n          return true;\n        } else if (left * 2 > width) {//console.log('left 2');\n          //return true;\n        }\n      }\n\n      if (direction == 'right') {\n        if (windowWidth < left + width) {\n          return true;\n        } else {//console.log('right 2');\n          //return true;\n        }\n      }\n\n      return false;\n    }\n  };\n}(); // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTUtil;\n} // Initialize KTUtil class on document ready\n\n\nKTUtil.ready(function () {\n  if (typeof KTAppSettings !== 'undefined') {\n    KTUtil.init(KTAppSettings);\n  } else {\n    KTUtil.init();\n  }\n}); // CSS3 Transitions only after page load(.page-loading class added to body tag and remove with JS on page load)\n\nwindow.onload = function () {\n  var result = KTUtil.getByTagName('body');\n\n  if (result && result[0]) {\n    KTUtil.removeClass(result[0], 'page-loading');\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/util.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/wizard.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/components/wizard.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Component Definition\n\nvar KTWizard = function KTWizard(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false; // Get element object\n\n  var element = KTUtil.getById(elementId);\n  var body = KTUtil.getBody();\n\n  if (!element) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    startStep: 1,\n    clickableSteps: false // to make steps clickable this set value true and add data-wizard-clickable=\"true\" in HTML for class=\"wizard\" element\n\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Construct\r\n     */\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('wizard')) {\n        the = KTUtil.data(element).get('wizard');\n      } else {\n        // reset menu\n        Plugin.init(options); // build menu\n\n        Plugin.build();\n        KTUtil.data(element).set('wizard', the);\n      }\n\n      return the;\n    },\n\n    /**\r\n     * Init wizard\r\n     */\n    init: function init(options) {\n      the.element = element;\n      the.events = []; // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options); // Elements\n\n      the.steps = KTUtil.findAll(element, '[data-wizard-type=\"step\"]');\n      the.btnNext = KTUtil.find(element, '[data-wizard-type=\"action-next\"]');\n      the.btnPrev = KTUtil.find(element, '[data-wizard-type=\"action-prev\"]');\n      the.btnSubmit = KTUtil.find(element, '[data-wizard-type=\"action-submit\"]'); // Variables\n\n      the.events = [];\n      the.lastStep = 0;\n      the.currentStep = 1;\n      the.newStep = 0;\n      the.stopped = false;\n      the.totalSteps = the.steps.length; // Init current step\n\n      if (the.options.startStep > 1) {\n        Plugin.goTo(the.options.startStep);\n      } // Init UI\n\n\n      Plugin.updateUI();\n    },\n\n    /**\r\n     * Build Form Wizard\r\n     */\n    build: function build() {\n      // Next button event handler\n      KTUtil.addEvent(the.btnNext, 'click', function (e) {\n        e.preventDefault(); // Set new step number\n\n        Plugin.setNewStep(Plugin.getNextStep()); // Trigger change event\n\n        if (Plugin.eventTrigger('change') !== false) {\n          Plugin.goTo(Plugin.getNextStep());\n        }\n      }); // Prev button event handler\n\n      KTUtil.addEvent(the.btnPrev, 'click', function (e) {\n        e.preventDefault(); // Set new step number\n\n        Plugin.setNewStep(Plugin.getPrevStep()); // Trigger change event\n\n        if (Plugin.eventTrigger('change') !== false) {\n          Plugin.goTo(Plugin.getPrevStep());\n        }\n      });\n\n      if (the.options.clickableSteps === true) {\n        KTUtil.on(element, '[data-wizard-type=\"step\"]', 'click', function () {\n          var index = KTUtil.index(this) + 1;\n\n          if (index !== the.currentStep) {\n            Plugin.setNewStep(index); // Trigger change event\n\n            if (Plugin.eventTrigger('change') !== false) {\n              Plugin.goTo(index);\n            }\n          }\n        });\n      } // Submit button event handler\n\n\n      KTUtil.addEvent(the.btnSubmit, 'click', function (e) {\n        e.preventDefault();\n        Plugin.eventTrigger('submit');\n      });\n    },\n\n    /**\r\n     * Handles wizard click wizard\r\n     */\n    goTo: function goTo(number) {\n      // Skip if stopped\n      if (the.stopped === true) {\n        the.stopped = false;\n        return;\n      } // Skip if this step is already shown\n\n\n      if (number === the.currentStep || number > the.totalSteps || number < 0) {\n        return;\n      } // Validate step number\n\n\n      number = parseInt(number); // Set current step\n\n      the.lastStep = the.currentStep;\n      the.currentStep = number;\n      the.newStep = 0;\n      Plugin.updateUI();\n      Plugin.eventTrigger('changed');\n      return the;\n    },\n\n    /**\r\n     * Stop wizard\r\n     */\n    stop: function stop() {\n      the.stopped = true;\n    },\n\n    /**\r\n     * Resume wizard\r\n     */\n    resume: function resume() {\n      the.stopped = false;\n    },\n\n    /**\r\n     * Check last step\r\n     */\n    isLastStep: function isLastStep() {\n      return the.currentStep === the.totalSteps;\n    },\n\n    /**\r\n     * Check first step\r\n     */\n    isFirstStep: function isFirstStep() {\n      return the.currentStep === 1;\n    },\n\n    /**\r\n     * Check between step\r\n     */\n    isBetweenStep: function isBetweenStep() {\n      return Plugin.isLastStep() === false && Plugin.isFirstStep() === false;\n    },\n\n    /**\r\n     * Update wizard UI after step change\r\n     */\n    updateUI: function updateUI() {\n      var stepType = '';\n      var index = the.currentStep - 1;\n\n      if (Plugin.isLastStep()) {\n        stepType = 'last';\n      } else if (Plugin.isFirstStep()) {\n        stepType = 'first';\n      } else {\n        stepType = 'between';\n      }\n\n      KTUtil.attr(the.element, 'data-wizard-state', stepType); // Steps\n\n      var steps = KTUtil.findAll(the.element, '[data-wizard-type=\"step\"]');\n\n      if (steps && steps.length > 0) {\n        for (var i = 0, len = steps.length; i < len; i++) {\n          if (i == index) {\n            KTUtil.attr(steps[i], 'data-wizard-state', 'current');\n          } else {\n            if (i < index) {\n              KTUtil.attr(steps[i], 'data-wizard-state', 'done');\n            } else {\n              KTUtil.attr(steps[i], 'data-wizard-state', 'pending');\n            }\n          }\n        }\n      } // Steps Info\n\n\n      var stepsInfo = KTUtil.findAll(the.element, '[data-wizard-type=\"step-info\"]');\n\n      if (stepsInfo && stepsInfo.length > 0) {\n        for (var i = 0, len = stepsInfo.length; i < len; i++) {\n          if (i == index) {\n            KTUtil.attr(stepsInfo[i], 'data-wizard-state', 'current');\n          } else {\n            KTUtil.removeAttr(stepsInfo[i], 'data-wizard-state');\n          }\n        }\n      } // Steps Content\n\n\n      var stepsContent = KTUtil.findAll(the.element, '[data-wizard-type=\"step-content\"]');\n\n      if (stepsContent && stepsContent.length > 0) {\n        for (var i = 0, len = stepsContent.length; i < len; i++) {\n          if (i == index) {\n            KTUtil.attr(stepsContent[i], 'data-wizard-state', 'current');\n          } else {\n            KTUtil.removeAttr(stepsContent[i], 'data-wizard-state');\n          }\n        }\n      }\n    },\n\n    /**\r\n     * Get next step number\r\n     */\n    getNextStep: function getNextStep() {\n      if (the.totalSteps >= the.currentStep + 1) {\n        return the.currentStep + 1;\n      } else {\n        return the.totalSteps;\n      }\n    },\n\n    /**\r\n     * Get prev step number\r\n     */\n    getPrevStep: function getPrevStep() {\n      if (the.currentStep - 1 >= 1) {\n        return the.currentStep - 1;\n      } else {\n        return 1;\n      }\n    },\n\n    /**\r\n     * Get new step number\r\n     */\n    getNewStep: function getNewStep() {\n      return the.newStep;\n    },\n\n    /**\r\n     * Set new step\r\n     */\n    setNewStep: function setNewStep(step) {\n      the.newStep = step;\n    },\n\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name, nested) {\n      //KTUtil.triggerCustomEvent(name);\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the);\n            }\n          } else {\n            return event.handler.call(this, the);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n      return the;\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\r\n   * Go to the next step\r\n   */\n\n\n  the.goNext = function () {\n    return Plugin.goTo(Plugin.getNextStep());\n  };\n  /**\r\n   * Go to the prev step\r\n   */\n\n\n  the.goPrev = function () {\n    return Plugin.goTo(Plugin.getPrevStep());\n  };\n  /**\r\n   * Go to the last step\r\n   */\n\n\n  the.goLast = function () {\n    return Plugin.goTo(Plugin.getLastStep());\n  };\n  /**\r\n   * Go to the first step\r\n   */\n\n\n  the.goFirst = function () {\n    return Plugin.goTo(Plugin.getFirstStep());\n  };\n  /**\r\n   * Go to a step\r\n   */\n\n\n  the.goTo = function (number) {\n    return Plugin.goTo(number);\n  };\n  /**\r\n   * Stop wizard\r\n   */\n\n\n  the.stop = function () {\n    return Plugin.stop();\n  };\n  /**\r\n   * Resume wizard\r\n   */\n\n\n  the.resume = function () {\n    return Plugin.resume();\n  };\n  /**\r\n   * Get current step number\r\n   */\n\n\n  the.getStep = function () {\n    return the.currentStep;\n  };\n  /**\r\n   * Get new step number\r\n   */\n\n\n  the.getNewStep = function () {\n    return Plugin.getNewStep();\n  };\n  /**\r\n   * Set new step number\r\n   */\n\n\n  the.setNewStep = function (number) {\n    Plugin.setNewStep(number);\n  };\n  /**\r\n   * Check last step\r\n   */\n\n\n  the.isLastStep = function () {\n    return Plugin.isLastStep();\n  };\n  /**\r\n   * Check first step\r\n   */\n\n\n  the.isFirstStep = function () {\n    return Plugin.isFirstStep();\n  };\n  /**\r\n   * Attach event(\"change\", \"changed\", \"submit\")\r\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n  /**\r\n   * Attach event that will be fired once\r\n   */\n\n\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  }; // Construct plugin\n\n\n  Plugin.construct.apply(the, [options]);\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTWizard;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/wizard.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/aside-menu.js":
/*!*********************************************************!*\
  !*** ./resources/metronic/js/layout/base/aside-menu.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutAsideMenu = function () {\n  // Private properties\n  var _body;\n\n  var _element;\n\n  var _menuObject; // Initialize\n\n\n  var _init = function _init() {\n    var menuDesktopMode = KTUtil.attr(_element, 'data-menu-dropdown') === '1' ? 'dropdown' : 'accordion';\n    var scroll;\n\n    if (KTUtil.attr(_element, 'data-menu-scroll') === '1') {\n      scroll = {\n        rememberPosition: true,\n        // remember position on page reload\n        height: function height() {\n          // calculate available scrollable area height\n          var height = parseInt(KTUtil.getViewPort().height);\n\n          if (KTUtil.isBreakpointUp('lg')) {\n            height = height - KTLayoutBrand.getHeight();\n          }\n\n          height = height - (parseInt(KTUtil.css(_element, 'marginBottom')) + parseInt(KTUtil.css(_element, 'marginTop')));\n          return height;\n        }\n      };\n    }\n\n    _menuObject = new KTMenu(_element, {\n      // Vertical scroll\n      scroll: scroll,\n      // Submenu setup\n      submenu: {\n        desktop: menuDesktopMode,\n        tablet: 'accordion',\n        // menu set to accordion in tablet mode\n        mobile: 'accordion' // menu set to accordion in mobile mode\n\n      },\n      // Accordion setup\n      accordion: {\n        expandAll: false // allow having multiple expanded accordions in the menu\n\n      }\n    });\n  };\n\n  var _initHover = function _initHover() {\n    // Handle Minimized Aside Hover\n    if (KTUtil.hasClass(_body, 'aside-fixed') && KTUtil.hasClass(_body, 'aside-minimize-hoverable')) {\n      var insideTm;\n      var outsideTm; // Handle Aside Hover Mode\n\n      KTUtil.addEvent(_element, 'mouseenter', function (e) {\n        e.preventDefault();\n\n        if (KTUtil.isBreakpointUp('lg') === false) {\n          return;\n        }\n\n        if (outsideTm) {\n          clearTimeout(outsideTm);\n          outsideTm = null;\n        }\n\n        if (insideTm) {\n          clearTimeout(insideTm);\n          insideTm = null;\n        }\n\n        insideTm = setTimeout(function () {\n          if (KTUtil.hasClass(_body, 'aside-minimize') && KTUtil.isBreakpointUp('lg')) {\n            // Hover class\n            KTUtil.addClass(_body, 'aside-minimize-hover');\n            KTLayoutAsideMenu.getMenu().scrollUpdate();\n            KTLayoutAsideMenu.getMenu().scrollTop();\n          }\n        }, 50);\n      });\n      KTUtil.addEvent(KTLayoutAside.getElement(), 'mouseleave', function (e) {\n        e.preventDefault();\n\n        if (KTUtil.isBreakpointUp('lg') === false) {\n          return;\n        }\n\n        if (insideTm) {\n          clearTimeout(insideTm);\n          insideTm = null;\n        }\n\n        if (outsideTm) {\n          clearTimeout(outsideTm);\n          outsideTm = null;\n        }\n\n        outsideTm = setTimeout(function () {\n          if (KTUtil.hasClass(_body, 'aside-minimize-hover') && KTUtil.isBreakpointUp('lg')) {\n            KTUtil.removeClass(_body, 'aside-minimize-hover'); // Hover class\n\n            KTLayoutAsideMenu.getMenu().scrollUpdate();\n            KTLayoutAsideMenu.getMenu().scrollTop();\n          }\n        }, 100);\n      });\n    }\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _body = KTUtil.getBody();\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      } // Initialize menu\n\n\n      _init();\n\n      _initHover();\n    },\n    getElement: function getElement() {\n      return _element;\n    },\n    getMenu: function getMenu() {\n      return _menuObject;\n    },\n    pauseDropdownHover: function pauseDropdownHover(time) {\n      if (_menuObject) {\n        _menuObject.pauseDropdownHover(time);\n      }\n    },\n    closeMobileOffcanvas: function closeMobileOffcanvas() {\n      if (_menuObject && KTUtil.isMobileDevice()) {\n        _menuObject.hide();\n      }\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutAsideMenu;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/aside-menu.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/aside-toggle.js":
/*!***********************************************************!*\
  !*** ./resources/metronic/js/layout/base/aside-toggle.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutAsideToggle = function () {\n  // Private properties\n  var _body;\n\n  var _element;\n\n  var _toggleObject; // Initialize\n\n\n  var _init = function _init() {\n    _toggleObject = new KTToggle(_element, _body, {\n      targetState: 'aside-minimize',\n      toggleState: 'active'\n    });\n\n    _toggleObject.on('toggle', function (toggle) {\n      // Update sticky card\n      if (typeof KTLayoutStickyCard !== 'undefined') {\n        KTLayoutStickyCard.update();\n      } // Pause header menu dropdowns\n\n\n      if (typeof KTLayoutHeaderMenu !== 'undefined') {\n        KTLayoutHeaderMenu.pauseDropdownHover(800);\n      } // Pause aside menu dropdowns\n\n\n      if (typeof KTLayoutAsideMenu !== 'undefined') {\n        KTLayoutAsideMenu.pauseDropdownHover(800);\n      } // Remember state in cookie\n\n\n      KTCookie.setCookie('kt_aside_toggle_state', toggle.getState()); // to set default minimized left aside use this cookie value in your\n      // server side code and add \"kt-primary--minimize aside-minimize\" classes to\n      // the body tag in order to initialize the minimized left aside mode during page loading.\n    });\n\n    _toggleObject.on('beforeToggle', function (toggle) {\n      if (KTUtil.hasClass(_body, 'aside-minimize') === false && KTUtil.hasClass(_body, 'aside-minimize-hover')) {\n        KTUtil.removeClass(_body, 'aside-minimize-hover');\n      }\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n      _body = KTUtil.getBody();\n\n      if (!_element) {\n        return;\n      } // Initialize\n\n\n      _init();\n    },\n    getElement: function getElement() {\n      return _element;\n    },\n    getToggle: function getToggle() {\n      return _toggleObject;\n    },\n    onToggle: function onToggle(handler) {\n      if (typeof _toggleObject.element !== 'undefined') {\n        _toggleObject.on('toggle', handler);\n      }\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutAsideToggle;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvYXNpZGUtdG9nZ2xlLmpzPzA2NWQiXSwibmFtZXMiOlsiS1RMYXlvdXRBc2lkZVRvZ2dsZSIsIl9ib2R5IiwiX2VsZW1lbnQiLCJfdG9nZ2xlT2JqZWN0IiwiX2luaXQiLCJLVFRvZ2dsZSIsInRhcmdldFN0YXRlIiwidG9nZ2xlU3RhdGUiLCJvbiIsInRvZ2dsZSIsIktUTGF5b3V0U3RpY2t5Q2FyZCIsInVwZGF0ZSIsIktUTGF5b3V0SGVhZGVyTWVudSIsInBhdXNlRHJvcGRvd25Ib3ZlciIsIktUTGF5b3V0QXNpZGVNZW51IiwiS1RDb29raWUiLCJzZXRDb29raWUiLCJnZXRTdGF0ZSIsIktUVXRpbCIsImhhc0NsYXNzIiwicmVtb3ZlQ2xhc3MiLCJpbml0IiwiaWQiLCJnZXRCeUlkIiwiZ2V0Qm9keSIsImdldEVsZW1lbnQiLCJnZXRUb2dnbGUiLCJvblRvZ2dsZSIsImhhbmRsZXIiLCJlbGVtZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsbUJBQW1CLEdBQUcsWUFBVztBQUNqQztBQUNBLE1BQUlDLEtBQUo7O0FBQ0EsTUFBSUMsUUFBSjs7QUFDQSxNQUFJQyxhQUFKLENBSmlDLENBTXBDOzs7QUFDQSxNQUFJQyxLQUFLLEdBQUcsU0FBUkEsS0FBUSxHQUFXO0FBQ3RCRCxpQkFBYSxHQUFHLElBQUlFLFFBQUosQ0FBYUgsUUFBYixFQUF1QkQsS0FBdkIsRUFBOEI7QUFDN0NLLGlCQUFXLEVBQUUsZ0JBRGdDO0FBRTdDQyxpQkFBVyxFQUFFO0FBRmdDLEtBQTlCLENBQWhCOztBQUtBSixpQkFBYSxDQUFDSyxFQUFkLENBQWlCLFFBQWpCLEVBQTJCLFVBQVNDLE1BQVQsRUFBaUI7QUFDbEM7QUFDQSxVQUFJLE9BQU9DLGtCQUFQLEtBQThCLFdBQWxDLEVBQStDO0FBQzNDQSwwQkFBa0IsQ0FBQ0MsTUFBbkI7QUFDSCxPQUppQyxDQU1sQzs7O0FBQ0EsVUFBSSxPQUFPQyxrQkFBUCxLQUE4QixXQUFsQyxFQUErQztBQUMzQ0EsMEJBQWtCLENBQUNDLGtCQUFuQixDQUFzQyxHQUF0QztBQUNILE9BVGlDLENBV2xDOzs7QUFDQSxVQUFJLE9BQU9DLGlCQUFQLEtBQTZCLFdBQWpDLEVBQThDO0FBQzFDQSx5QkFBaUIsQ0FBQ0Qsa0JBQWxCLENBQXFDLEdBQXJDO0FBQ0gsT0FkaUMsQ0FnQmxDOzs7QUFDVEUsY0FBUSxDQUFDQyxTQUFULENBQW1CLHVCQUFuQixFQUE0Q1AsTUFBTSxDQUFDUSxRQUFQLEVBQTVDLEVBakIyQyxDQWtCM0M7QUFDQTtBQUNBO0FBQ0EsS0FyQkQ7O0FBdUJBZCxpQkFBYSxDQUFDSyxFQUFkLENBQWlCLGNBQWpCLEVBQWlDLFVBQVNDLE1BQVQsRUFBaUI7QUFDakQsVUFBSVMsTUFBTSxDQUFDQyxRQUFQLENBQWdCbEIsS0FBaEIsRUFBdUIsZ0JBQXZCLE1BQTZDLEtBQTdDLElBQXNEaUIsTUFBTSxDQUFDQyxRQUFQLENBQWdCbEIsS0FBaEIsRUFBdUIsc0JBQXZCLENBQTFELEVBQTBHO0FBQ3pHaUIsY0FBTSxDQUFDRSxXQUFQLENBQW1CbkIsS0FBbkIsRUFBMEIsc0JBQTFCO0FBQ0E7QUFDRCxLQUpEO0FBS0EsR0FsQ0QsQ0FQb0MsQ0EyQ2pDOzs7QUFDSCxTQUFPO0FBQ05vQixRQUFJLEVBQUUsY0FBU0MsRUFBVCxFQUFhO0FBQ1RwQixjQUFRLEdBQUdnQixNQUFNLENBQUNLLE9BQVAsQ0FBZUQsRUFBZixDQUFYO0FBQ0FyQixXQUFLLEdBQUdpQixNQUFNLENBQUNNLE9BQVAsRUFBUjs7QUFFQSxVQUFJLENBQUN0QixRQUFMLEVBQWU7QUFDWDtBQUNILE9BTlEsQ0FRVDs7O0FBQ0FFLFdBQUs7QUFDZCxLQVhLO0FBYUFxQixjQUFVLEVBQUUsc0JBQVc7QUFDbkIsYUFBT3ZCLFFBQVA7QUFDSCxLQWZEO0FBaUJBd0IsYUFBUyxFQUFFLHFCQUFXO0FBQzNCLGFBQU92QixhQUFQO0FBQ0EsS0FuQks7QUFxQk53QixZQUFRLEVBQUUsa0JBQVNDLE9BQVQsRUFBa0I7QUFDM0IsVUFBSSxPQUFPekIsYUFBYSxDQUFDMEIsT0FBckIsS0FBaUMsV0FBckMsRUFBa0Q7QUFDakQxQixxQkFBYSxDQUFDSyxFQUFkLENBQWlCLFFBQWpCLEVBQTJCb0IsT0FBM0I7QUFDQTtBQUNEO0FBekJLLEdBQVA7QUEyQkEsQ0F2RXlCLEVBQTFCLEMsQ0F5RUE7OztBQUNBLElBQUksSUFBSixFQUFtQztBQUNsQ0UsUUFBTSxDQUFDQyxPQUFQLEdBQWlCL0IsbUJBQWpCO0FBQ0EiLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvYXNpZGUtdG9nZ2xlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRBc2lkZVRvZ2dsZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gUHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICB2YXIgX2JvZHk7XHJcbiAgICB2YXIgX2VsZW1lbnQ7XHJcbiAgICB2YXIgX3RvZ2dsZU9iamVjdDtcclxuXHJcblx0Ly8gSW5pdGlhbGl6ZVxyXG5cdHZhciBfaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0X3RvZ2dsZU9iamVjdCA9IG5ldyBLVFRvZ2dsZShfZWxlbWVudCwgX2JvZHksIHtcclxuXHRcdFx0dGFyZ2V0U3RhdGU6ICdhc2lkZS1taW5pbWl6ZScsXHJcblx0XHRcdHRvZ2dsZVN0YXRlOiAnYWN0aXZlJ1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0X3RvZ2dsZU9iamVjdC5vbigndG9nZ2xlJywgZnVuY3Rpb24odG9nZ2xlKSB7XHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBzdGlja3kgY2FyZFxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIEtUTGF5b3V0U3RpY2t5Q2FyZCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIEtUTGF5b3V0U3RpY2t5Q2FyZC51cGRhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUGF1c2UgaGVhZGVyIG1lbnUgZHJvcGRvd25zXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgS1RMYXlvdXRIZWFkZXJNZW51ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgS1RMYXlvdXRIZWFkZXJNZW51LnBhdXNlRHJvcGRvd25Ib3Zlcig4MDApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBQYXVzZSBhc2lkZSBtZW51IGRyb3Bkb3duc1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIEtUTGF5b3V0QXNpZGVNZW51ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgS1RMYXlvdXRBc2lkZU1lbnUucGF1c2VEcm9wZG93bkhvdmVyKDgwMCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFJlbWVtYmVyIHN0YXRlIGluIGNvb2tpZVxyXG5cdFx0XHRLVENvb2tpZS5zZXRDb29raWUoJ2t0X2FzaWRlX3RvZ2dsZV9zdGF0ZScsIHRvZ2dsZS5nZXRTdGF0ZSgpKTtcclxuXHRcdFx0Ly8gdG8gc2V0IGRlZmF1bHQgbWluaW1pemVkIGxlZnQgYXNpZGUgdXNlIHRoaXMgY29va2llIHZhbHVlIGluIHlvdXJcclxuXHRcdFx0Ly8gc2VydmVyIHNpZGUgY29kZSBhbmQgYWRkIFwia3QtcHJpbWFyeS0tbWluaW1pemUgYXNpZGUtbWluaW1pemVcIiBjbGFzc2VzIHRvXHJcblx0XHRcdC8vIHRoZSBib2R5IHRhZyBpbiBvcmRlciB0byBpbml0aWFsaXplIHRoZSBtaW5pbWl6ZWQgbGVmdCBhc2lkZSBtb2RlIGR1cmluZyBwYWdlIGxvYWRpbmcuXHJcblx0XHR9KTtcclxuXHJcblx0XHRfdG9nZ2xlT2JqZWN0Lm9uKCdiZWZvcmVUb2dnbGUnLCBmdW5jdGlvbih0b2dnbGUpIHtcclxuXHRcdFx0aWYgKEtUVXRpbC5oYXNDbGFzcyhfYm9keSwgJ2FzaWRlLW1pbmltaXplJykgPT09IGZhbHNlICYmIEtUVXRpbC5oYXNDbGFzcyhfYm9keSwgJ2FzaWRlLW1pbmltaXplLWhvdmVyJykpIHtcclxuXHRcdFx0XHRLVFV0aWwucmVtb3ZlQ2xhc3MoX2JvZHksICdhc2lkZS1taW5pbWl6ZS1ob3ZlcicpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuXHRyZXR1cm4ge1xyXG5cdFx0aW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcbiAgICAgICAgICAgIF9ib2R5ID0gS1RVdGlsLmdldEJvZHkoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghX2VsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZVxyXG4gICAgICAgICAgICBfaW5pdCgpO1xyXG5cdFx0fSxcclxuXHJcbiAgICAgICAgZ2V0RWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZWxlbWVudDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRUb2dnbGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gX3RvZ2dsZU9iamVjdDtcclxuXHRcdH0sXHJcblxyXG5cdFx0b25Ub2dnbGU6IGZ1bmN0aW9uKGhhbmRsZXIpIHtcclxuXHRcdFx0aWYgKHR5cGVvZiBfdG9nZ2xlT2JqZWN0LmVsZW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0X3RvZ2dsZU9iamVjdC5vbigndG9nZ2xlJywgaGFuZGxlcik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dEFzaWRlVG9nZ2xlO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/aside-toggle.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/aside.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/layout/base/aside.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutAside = function () {\n  // Private properties\n  var _body;\n\n  var _element;\n\n  var _offcanvasObject; // Private functions\n  // Initialize\n\n\n  var _init = function _init() {\n    var offcanvasClass = KTUtil.hasClass(_element, 'aside-offcanvas-default') ? 'aside-offcanvas-default' : 'aside'; // Initialize mobile aside offcanvas\n\n    _offcanvasObject = new KTOffcanvas(_element, {\n      baseClass: offcanvasClass,\n      overlay: true,\n      closeBy: 'kt_aside_close_btn',\n      toggleBy: {\n        target: 'kt_aside_mobile_toggle',\n        state: 'mobile-toggle-active'\n      }\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n      _body = KTUtil.getBody();\n\n      if (!_element) {\n        return;\n      } // Initialize\n\n\n      _init();\n    },\n    getElement: function getElement() {\n      return _element;\n    },\n    getOffcanvas: function getOffcanvas() {\n      return _offcanvasObject;\n    },\n    isFixed: function isFixed() {\n      return KTUtil.hasClass(_body, 'aside-fixed');\n    },\n    isMinimized: function isMinimized() {\n      return KTUtil.hasClass(_body, 'aside-fixed') && KTUtil.hasClass(_body, 'aside-minimize');\n    },\n    isHoverable: function isHoverable() {\n      return KTUtil.hasClass(_body, 'aside-fixed') && KTUtil.hasClass(_body, 'aside-minimize-hoverable');\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutAside;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvYXNpZGUuanM/ZWIxMSJdLCJuYW1lcyI6WyJLVExheW91dEFzaWRlIiwiX2JvZHkiLCJfZWxlbWVudCIsIl9vZmZjYW52YXNPYmplY3QiLCJfaW5pdCIsIm9mZmNhbnZhc0NsYXNzIiwiS1RVdGlsIiwiaGFzQ2xhc3MiLCJLVE9mZmNhbnZhcyIsImJhc2VDbGFzcyIsIm92ZXJsYXkiLCJjbG9zZUJ5IiwidG9nZ2xlQnkiLCJ0YXJnZXQiLCJzdGF0ZSIsImluaXQiLCJpZCIsImdldEJ5SWQiLCJnZXRCb2R5IiwiZ2V0RWxlbWVudCIsImdldE9mZmNhbnZhcyIsImlzRml4ZWQiLCJpc01pbmltaXplZCIsImlzSG92ZXJhYmxlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsYUFBYSxHQUFHLFlBQVc7QUFDM0I7QUFDQSxNQUFJQyxLQUFKOztBQUNBLE1BQUlDLFFBQUo7O0FBQ0EsTUFBSUMsZ0JBQUosQ0FKMkIsQ0FNM0I7QUFDSDs7O0FBQ0EsTUFBSUMsS0FBSyxHQUFHLFNBQVJBLEtBQVEsR0FBVztBQUN0QixRQUFJQyxjQUFjLEdBQUdDLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQkwsUUFBaEIsRUFBMEIseUJBQTFCLElBQXVELHlCQUF2RCxHQUFtRixPQUF4RyxDQURzQixDQUdoQjs7QUFDTkMsb0JBQWdCLEdBQUcsSUFBSUssV0FBSixDQUFnQk4sUUFBaEIsRUFBMEI7QUFDNUNPLGVBQVMsRUFBRUosY0FEaUM7QUFFNUNLLGFBQU8sRUFBRSxJQUZtQztBQUc1Q0MsYUFBTyxFQUFFLG9CQUhtQztBQUk1Q0MsY0FBUSxFQUFFO0FBQ1RDLGNBQU0sRUFBRSx3QkFEQztBQUVUQyxhQUFLLEVBQUU7QUFGRTtBQUprQyxLQUExQixDQUFuQjtBQVNBLEdBYkQsQ0FSOEIsQ0F1QjNCOzs7QUFDSCxTQUFPO0FBQ05DLFFBQUksRUFBRSxjQUFTQyxFQUFULEVBQWE7QUFDVGQsY0FBUSxHQUFHSSxNQUFNLENBQUNXLE9BQVAsQ0FBZUQsRUFBZixDQUFYO0FBQ0FmLFdBQUssR0FBR0ssTUFBTSxDQUFDWSxPQUFQLEVBQVI7O0FBRUEsVUFBSSxDQUFDaEIsUUFBTCxFQUFlO0FBQ1g7QUFDSCxPQU5RLENBUVQ7OztBQUNBRSxXQUFLO0FBQ1IsS0FYRDtBQWFBZSxjQUFVLEVBQUUsc0JBQVc7QUFDbkIsYUFBT2pCLFFBQVA7QUFDSCxLQWZEO0FBaUJBa0IsZ0JBQVksRUFBRSx3QkFBVztBQUNyQixhQUFPakIsZ0JBQVA7QUFDSCxLQW5CRDtBQXFCQWtCLFdBQU8sRUFBRSxtQkFBVztBQUNoQixhQUFPZixNQUFNLENBQUNDLFFBQVAsQ0FBZ0JOLEtBQWhCLEVBQXVCLGFBQXZCLENBQVA7QUFDSCxLQXZCRDtBQXlCQXFCLGVBQVcsRUFBRSx1QkFBVztBQUNwQixhQUFRaEIsTUFBTSxDQUFDQyxRQUFQLENBQWdCTixLQUFoQixFQUF1QixhQUF2QixLQUF5Q0ssTUFBTSxDQUFDQyxRQUFQLENBQWdCTixLQUFoQixFQUF1QixnQkFBdkIsQ0FBakQ7QUFDSCxLQTNCRDtBQTZCQXNCLGVBQVcsRUFBRSx1QkFBVztBQUNwQixhQUFRakIsTUFBTSxDQUFDQyxRQUFQLENBQWdCTixLQUFoQixFQUF1QixhQUF2QixLQUF5Q0ssTUFBTSxDQUFDQyxRQUFQLENBQWdCTixLQUFoQixFQUF1QiwwQkFBdkIsQ0FBakQ7QUFDSDtBQS9CRCxHQUFQO0FBaUNBLENBekRtQixFQUFwQixDLENBMkRBOzs7QUFDQSxJQUFJLElBQUosRUFBbUM7QUFDbEN1QixRQUFNLENBQUNDLE9BQVAsR0FBaUJ6QixhQUFqQjtBQUNBIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2FzaWRlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRBc2lkZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gUHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICB2YXIgX2JvZHk7XHJcbiAgICB2YXIgX2VsZW1lbnQ7XHJcbiAgICB2YXIgX29mZmNhbnZhc09iamVjdDtcclxuXHJcbiAgICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG5cdC8vIEluaXRpYWxpemVcclxuXHR2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBvZmZjYW52YXNDbGFzcyA9IEtUVXRpbC5oYXNDbGFzcyhfZWxlbWVudCwgJ2FzaWRlLW9mZmNhbnZhcy1kZWZhdWx0JykgPyAnYXNpZGUtb2ZmY2FudmFzLWRlZmF1bHQnIDogJ2FzaWRlJztcclxuXHJcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBtb2JpbGUgYXNpZGUgb2ZmY2FudmFzXHJcblx0XHRfb2ZmY2FudmFzT2JqZWN0ID0gbmV3IEtUT2ZmY2FudmFzKF9lbGVtZW50LCB7XHJcblx0XHRcdGJhc2VDbGFzczogb2ZmY2FudmFzQ2xhc3MsXHJcblx0XHRcdG92ZXJsYXk6IHRydWUsXHJcblx0XHRcdGNsb3NlQnk6ICdrdF9hc2lkZV9jbG9zZV9idG4nLFxyXG5cdFx0XHR0b2dnbGVCeToge1xyXG5cdFx0XHRcdHRhcmdldDogJ2t0X2FzaWRlX21vYmlsZV90b2dnbGUnLFxyXG5cdFx0XHRcdHN0YXRlOiAnbW9iaWxlLXRvZ2dsZS1hY3RpdmUnXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcbiAgICAvLyBQdWJsaWMgbWV0aG9kc1xyXG5cdHJldHVybiB7XHJcblx0XHRpbml0OiBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgICAgICBfZWxlbWVudCA9IEtUVXRpbC5nZXRCeUlkKGlkKTtcclxuICAgICAgICAgICAgX2JvZHkgPSBLVFV0aWwuZ2V0Qm9keSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplXHJcbiAgICAgICAgICAgIF9pbml0KCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0RWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZWxlbWVudDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRPZmZjYW52YXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX29mZmNhbnZhc09iamVjdDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpc0ZpeGVkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtUVXRpbC5oYXNDbGFzcyhfYm9keSwgJ2FzaWRlLWZpeGVkJyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaXNNaW5pbWl6ZWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKEtUVXRpbC5oYXNDbGFzcyhfYm9keSwgJ2FzaWRlLWZpeGVkJykgJiYgS1RVdGlsLmhhc0NsYXNzKF9ib2R5LCAnYXNpZGUtbWluaW1pemUnKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaXNIb3ZlcmFibGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKEtUVXRpbC5oYXNDbGFzcyhfYm9keSwgJ2FzaWRlLWZpeGVkJykgJiYgS1RVdGlsLmhhc0NsYXNzKF9ib2R5LCAnYXNpZGUtbWluaW1pemUtaG92ZXJhYmxlJykpO1xyXG4gICAgICAgIH1cclxuXHR9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dEFzaWRlO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/aside.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/brand.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/layout/base/brand.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutBrand = function () {\n  // Private properties\n  var _element; // Private functions\n\n\n  var _getHeight = function _getHeight() {\n    var height = 0;\n\n    if (_element) {\n      height = KTUtil.actualHeight(_element);\n    }\n\n    return height;\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      }\n    },\n    getElement: function getElement() {\n      return _element;\n    },\n    getHeight: function getHeight() {\n      return _getHeight();\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutBrand;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvYnJhbmQuanM/NWM5OSJdLCJuYW1lcyI6WyJLVExheW91dEJyYW5kIiwiX2VsZW1lbnQiLCJfZ2V0SGVpZ2h0IiwiaGVpZ2h0IiwiS1RVdGlsIiwiYWN0dWFsSGVpZ2h0IiwiaW5pdCIsImlkIiwiZ2V0QnlJZCIsImdldEVsZW1lbnQiLCJnZXRIZWlnaHQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxhQUFhLEdBQUcsWUFBVztBQUMzQjtBQUNBLE1BQUlDLFFBQUosQ0FGMkIsQ0FJM0I7OztBQUNBLE1BQUlDLFVBQVUsR0FBRyxTQUFiQSxVQUFhLEdBQVc7QUFDeEIsUUFBSUMsTUFBTSxHQUFHLENBQWI7O0FBRUEsUUFBSUYsUUFBSixFQUFjO0FBQ1ZFLFlBQU0sR0FBR0MsTUFBTSxDQUFDQyxZQUFQLENBQW9CSixRQUFwQixDQUFUO0FBQ0g7O0FBRUQsV0FBT0UsTUFBUDtBQUNILEdBUkQsQ0FMMkIsQ0FlM0I7OztBQUNILFNBQU87QUFDTkcsUUFBSSxFQUFFLGNBQVNDLEVBQVQsRUFBYTtBQUNUTixjQUFRLEdBQUdHLE1BQU0sQ0FBQ0ksT0FBUCxDQUFlRCxFQUFmLENBQVg7O0FBRUEsVUFBSSxDQUFDTixRQUFMLEVBQWU7QUFDWDtBQUNIO0FBQ1YsS0FQSztBQVNBUSxjQUFVLEVBQUUsc0JBQVc7QUFDbkIsYUFBT1IsUUFBUDtBQUNILEtBWEQ7QUFhQVMsYUFBUyxFQUFFLHFCQUFXO0FBQ2xCLGFBQU9SLFVBQVUsRUFBakI7QUFDSDtBQWZELEdBQVA7QUFpQkEsQ0FqQ21CLEVBQXBCLEMsQ0FtQ0E7OztBQUNBLElBQUksSUFBSixFQUFtQztBQUNsQ1MsUUFBTSxDQUFDQyxPQUFQLEdBQWlCWixhQUFqQjtBQUNBIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2JyYW5kLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRCcmFuZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gUHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICB2YXIgX2VsZW1lbnQ7XHJcblxyXG4gICAgLy8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuICAgIHZhciBfZ2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IDA7XHJcblxyXG4gICAgICAgIGlmIChfZWxlbWVudCkge1xyXG4gICAgICAgICAgICBoZWlnaHQgPSBLVFV0aWwuYWN0dWFsSGVpZ2h0KF9lbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBoZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuXHRyZXR1cm4ge1xyXG5cdFx0aW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHRcdH0sXHJcblxyXG4gICAgICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2VsZW1lbnQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0SGVpZ2h0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9nZXRIZWlnaHQoKTtcclxuICAgICAgICB9XHJcblx0fTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRCcmFuZDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/brand.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/content.js":
/*!******************************************************!*\
  !*** ./resources/metronic/js/layout/base/content.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutContent = function () {\n  // Private properties\n  var _element; // Private functions\n\n\n  var _getHeight = function _getHeight() {\n    var height;\n    height = KTUtil.getViewPort().height;\n\n    if (_element) {\n      height = height - parseInt(KTUtil.css(_element, 'paddingTop')) - parseInt(KTUtil.css(_element, 'paddingBottom'));\n    }\n\n    height = height - KTLayoutHeader.getHeight();\n    height = height - KTLayoutSubheader.getHeight();\n    height = height - KTLayoutFooter.getHeight();\n    return height;\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n    },\n    getHeight: function getHeight() {\n      return _getHeight();\n    },\n    getElement: function getElement() {\n      return _element;\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutContent;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvY29udGVudC5qcz9hNTFjIl0sIm5hbWVzIjpbIktUTGF5b3V0Q29udGVudCIsIl9lbGVtZW50IiwiX2dldEhlaWdodCIsImhlaWdodCIsIktUVXRpbCIsImdldFZpZXdQb3J0IiwicGFyc2VJbnQiLCJjc3MiLCJLVExheW91dEhlYWRlciIsImdldEhlaWdodCIsIktUTGF5b3V0U3ViaGVhZGVyIiwiS1RMYXlvdXRGb290ZXIiLCJpbml0IiwiaWQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLGVBQWUsR0FBRyxZQUFXO0FBQzdCO0FBQ0EsTUFBSUMsUUFBSixDQUY2QixDQUloQzs7O0FBQ0EsTUFBSUMsVUFBVSxHQUFHLFNBQWJBLFVBQWEsR0FBVztBQUMzQixRQUFJQyxNQUFKO0FBRUFBLFVBQU0sR0FBR0MsTUFBTSxDQUFDQyxXQUFQLEdBQXFCRixNQUE5Qjs7QUFFTSxRQUFJRixRQUFKLEVBQWM7QUFDVkUsWUFBTSxHQUFHQSxNQUFNLEdBQUdHLFFBQVEsQ0FBQ0YsTUFBTSxDQUFDRyxHQUFQLENBQVdOLFFBQVgsRUFBcUIsWUFBckIsQ0FBRCxDQUFqQixHQUF3REssUUFBUSxDQUFDRixNQUFNLENBQUNHLEdBQVAsQ0FBV04sUUFBWCxFQUFxQixlQUFyQixDQUFELENBQXpFO0FBQ0g7O0FBRURFLFVBQU0sR0FBR0EsTUFBTSxHQUFHSyxjQUFjLENBQUNDLFNBQWYsRUFBbEI7QUFDQU4sVUFBTSxHQUFHQSxNQUFNLEdBQUdPLGlCQUFpQixDQUFDRCxTQUFsQixFQUFsQjtBQUNBTixVQUFNLEdBQUdBLE1BQU0sR0FBR1EsY0FBYyxDQUFDRixTQUFmLEVBQWxCO0FBRU4sV0FBT04sTUFBUDtBQUNBLEdBZEQsQ0FMZ0MsQ0FxQjdCOzs7QUFDSCxTQUFPO0FBQ05TLFFBQUksRUFBRSxjQUFTQyxFQUFULEVBQWE7QUFDVFosY0FBUSxHQUFHRyxNQUFNLENBQUNVLE9BQVAsQ0FBZUQsRUFBZixDQUFYO0FBQ1QsS0FISztBQUtOSixhQUFTLEVBQUUscUJBQVc7QUFDckIsYUFBT1AsVUFBVSxFQUFqQjtBQUNBLEtBUEs7QUFTQWEsY0FBVSxFQUFFLHNCQUFXO0FBQ25CLGFBQU9kLFFBQVA7QUFDSDtBQVhELEdBQVA7QUFhQSxDQW5DcUIsRUFBdEIsQyxDQXFDQTs7O0FBQ0EsSUFBSSxJQUFKLEVBQW1DO0FBQ2xDZSxRQUFNLENBQUNDLE9BQVAsR0FBaUJqQixlQUFqQjtBQUNBIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2NvbnRlbnQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dENvbnRlbnQgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgdmFyIF9lbGVtZW50O1xyXG5cclxuXHQvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG5cdHZhciBfZ2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaGVpZ2h0O1xyXG5cclxuXHRcdGhlaWdodCA9IEtUVXRpbC5nZXRWaWV3UG9ydCgpLmhlaWdodDtcclxuXHJcbiAgICAgICAgaWYgKF9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nVG9wJykpIC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ3BhZGRpbmdCb3R0b20nKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBLVExheW91dEhlYWRlci5nZXRIZWlnaHQoKTtcclxuICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBLVExheW91dFN1YmhlYWRlci5nZXRIZWlnaHQoKTtcclxuICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBLVExheW91dEZvb3Rlci5nZXRIZWlnaHQoKTtcclxuXHJcblx0XHRyZXR1cm4gaGVpZ2h0O1xyXG5cdH1cclxuXHJcbiAgICAvLyBQdWJsaWMgbWV0aG9kc1xyXG5cdHJldHVybiB7XHJcblx0XHRpbml0OiBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgICAgICBfZWxlbWVudCA9IEtUVXRpbC5nZXRCeUlkKGlkKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Z2V0SGVpZ2h0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIF9nZXRIZWlnaHQoKTtcclxuXHRcdH0sXHJcblxyXG4gICAgICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2VsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG5cdH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0Q29udGVudDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/content.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/footer.js":
/*!*****************************************************!*\
  !*** ./resources/metronic/js/layout/base/footer.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutFooter = function () {\n  // Private properties\n  var _element; // Private functions\n\n\n  var _getHeight = function _getHeight() {\n    var height = 0;\n\n    if (_element) {\n      height = KTUtil.actualHeight(_element);\n    }\n\n    return height;\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n    },\n    getHeight: function getHeight() {\n      return _getHeight();\n    },\n    getElement: function getElement() {\n      return _element;\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutFooter;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvZm9vdGVyLmpzPzQ5ZTUiXSwibmFtZXMiOlsiS1RMYXlvdXRGb290ZXIiLCJfZWxlbWVudCIsIl9nZXRIZWlnaHQiLCJoZWlnaHQiLCJLVFV0aWwiLCJhY3R1YWxIZWlnaHQiLCJpbml0IiwiaWQiLCJnZXRCeUlkIiwiZ2V0SGVpZ2h0IiwiZ2V0RWxlbWVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLGNBQWMsR0FBRyxZQUFXO0FBQzVCO0FBQ0EsTUFBSUMsUUFBSixDQUY0QixDQUkvQjs7O0FBQ0EsTUFBSUMsVUFBVSxHQUFHLFNBQWJBLFVBQWEsR0FBVztBQUMzQixRQUFJQyxNQUFNLEdBQUcsQ0FBYjs7QUFFTSxRQUFJRixRQUFKLEVBQWM7QUFDVkUsWUFBTSxHQUFHQyxNQUFNLENBQUNDLFlBQVAsQ0FBb0JKLFFBQXBCLENBQVQ7QUFDSDs7QUFFUCxXQUFPRSxNQUFQO0FBQ0EsR0FSRCxDQUwrQixDQWU1Qjs7O0FBQ0gsU0FBTztBQUNORyxRQUFJLEVBQUUsY0FBU0MsRUFBVCxFQUFhO0FBQ1ROLGNBQVEsR0FBR0csTUFBTSxDQUFDSSxPQUFQLENBQWVELEVBQWYsQ0FBWDtBQUNULEtBSEs7QUFLTkUsYUFBUyxFQUFFLHFCQUFXO0FBQ3JCLGFBQU9QLFVBQVUsRUFBakI7QUFDQSxLQVBLO0FBU0FRLGNBQVUsRUFBRSxzQkFBVztBQUNuQixhQUFPVCxRQUFQO0FBQ0g7QUFYRCxHQUFQO0FBYUEsQ0E3Qm9CLEVBQXJCLEMsQ0ErQkE7OztBQUNBLElBQUksSUFBSixFQUFtQztBQUNsQ1UsUUFBTSxDQUFDQyxPQUFQLEdBQWlCWixjQUFqQjtBQUNBIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2Zvb3Rlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUTGF5b3V0Rm9vdGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuICAgIHZhciBfZWxlbWVudDtcclxuXHJcblx0Ly8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuXHR2YXIgX2dldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGhlaWdodCA9IDA7XHJcblxyXG4gICAgICAgIGlmIChfZWxlbWVudCkge1xyXG4gICAgICAgICAgICBoZWlnaHQgPSBLVFV0aWwuYWN0dWFsSGVpZ2h0KF9lbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG5cdFx0cmV0dXJuIGhlaWdodDtcclxuXHR9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuXHRyZXR1cm4ge1xyXG5cdFx0aW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGdldEhlaWdodDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiBfZ2V0SGVpZ2h0KCk7XHJcblx0XHR9LFxyXG5cclxuICAgICAgICBnZXRFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9lbGVtZW50O1xyXG4gICAgICAgIH1cclxuXHR9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dEZvb3RlcjtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/footer.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/header-menu.js":
/*!**********************************************************!*\
  !*** ./resources/metronic/js/layout/base/header-menu.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutHeaderMenu = function () {\n  // Private properties\n  var _menuElement;\n\n  var _menuObject;\n\n  var _offcanvasElement;\n\n  var _offcanvasObject; // Private functions\n\n\n  var _init = function _init() {\n    _offcanvasObject = new KTOffcanvas(_offcanvasElement, {\n      overlay: true,\n      baseClass: 'header-menu-wrapper',\n      closeBy: 'kt_header_menu_mobile_close_btn',\n      toggleBy: {\n        target: 'kt_header_mobile_toggle',\n        state: 'mobile-toggle-active'\n      }\n    });\n    _menuObject = new KTMenu(_menuElement, {\n      submenu: {\n        desktop: 'dropdown',\n        tablet: 'accordion',\n        mobile: 'accordion'\n      },\n      accordion: {\n        slideSpeed: 200,\n        // accordion toggle slide speed in milliseconds\n        expandAll: false // allow having multiple expanded accordions in the menu\n\n      }\n    }); // Close aside offcanvas panel before page reload On tablet and mobile\n\n    _menuObject.on('linkClick', function (menu) {\n      if (KTUtil.isBreakpointDown('lg')) {\n        // Tablet and mobile mode\n        _offcanvasObject.hide(); // Hide offcanvas after general link click\n\n      }\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(menuId, offcanvasId) {\n      _menuElement = KTUtil.getById(menuId);\n      _offcanvasElement = KTUtil.getById(offcanvasId);\n\n      if (!_menuElement) {\n        return;\n      } // Initialize menu\n\n\n      _init();\n    },\n    getMenuElement: function getMenuElement() {\n      return _menuElement;\n    },\n    getOffcanvasElement: function getOffcanvasElement() {\n      return _offcanvasElement;\n    },\n    getMenu: function getMenu() {\n      return _menuObject;\n    },\n    pauseDropdownHover: function pauseDropdownHover(time) {\n      if (_menuObject) {\n        _menuObject.pauseDropdownHover(time);\n      }\n    },\n    getOffcanvas: function getOffcanvas() {\n      return _offcanvasObject;\n    },\n    closeMobileOffcanvas: function closeMobileOffcanvas() {\n      if (_menuObject && KTUtil.isMobileDevice()) {\n        _offcanvasObject.hide();\n      }\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutHeaderMenu;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvaGVhZGVyLW1lbnUuanM/NjRkYiJdLCJuYW1lcyI6WyJLVExheW91dEhlYWRlck1lbnUiLCJfbWVudUVsZW1lbnQiLCJfbWVudU9iamVjdCIsIl9vZmZjYW52YXNFbGVtZW50IiwiX29mZmNhbnZhc09iamVjdCIsIl9pbml0IiwiS1RPZmZjYW52YXMiLCJvdmVybGF5IiwiYmFzZUNsYXNzIiwiY2xvc2VCeSIsInRvZ2dsZUJ5IiwidGFyZ2V0Iiwic3RhdGUiLCJLVE1lbnUiLCJzdWJtZW51IiwiZGVza3RvcCIsInRhYmxldCIsIm1vYmlsZSIsImFjY29yZGlvbiIsInNsaWRlU3BlZWQiLCJleHBhbmRBbGwiLCJvbiIsIm1lbnUiLCJLVFV0aWwiLCJpc0JyZWFrcG9pbnREb3duIiwiaGlkZSIsImluaXQiLCJtZW51SWQiLCJvZmZjYW52YXNJZCIsImdldEJ5SWQiLCJnZXRNZW51RWxlbWVudCIsImdldE9mZmNhbnZhc0VsZW1lbnQiLCJnZXRNZW51IiwicGF1c2VEcm9wZG93bkhvdmVyIiwidGltZSIsImdldE9mZmNhbnZhcyIsImNsb3NlTW9iaWxlT2ZmY2FudmFzIiwiaXNNb2JpbGVEZXZpY2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxrQkFBa0IsR0FBRyxZQUFXO0FBQ2hDO0FBQ0gsTUFBSUMsWUFBSjs7QUFDRyxNQUFJQyxXQUFKOztBQUNBLE1BQUlDLGlCQUFKOztBQUNBLE1BQUlDLGdCQUFKLENBTGdDLENBT2hDOzs7QUFDSCxNQUFJQyxLQUFLLEdBQUcsU0FBUkEsS0FBUSxHQUFXO0FBQ3RCRCxvQkFBZ0IsR0FBRyxJQUFJRSxXQUFKLENBQWdCSCxpQkFBaEIsRUFBbUM7QUFDckRJLGFBQU8sRUFBRSxJQUQ0QztBQUVyREMsZUFBUyxFQUFFLHFCQUYwQztBQUdyREMsYUFBTyxFQUFFLGlDQUg0QztBQUlyREMsY0FBUSxFQUFFO0FBQ1RDLGNBQU0sRUFBRSx5QkFEQztBQUVUQyxhQUFLLEVBQUU7QUFGRTtBQUoyQyxLQUFuQyxDQUFuQjtBQVVBVixlQUFXLEdBQUcsSUFBSVcsTUFBSixDQUFXWixZQUFYLEVBQXlCO0FBQ3RDYSxhQUFPLEVBQUU7QUFDUkMsZUFBTyxFQUFFLFVBREQ7QUFFUkMsY0FBTSxFQUFFLFdBRkE7QUFHUkMsY0FBTSxFQUFFO0FBSEEsT0FENkI7QUFNdENDLGVBQVMsRUFBRTtBQUNWQyxrQkFBVSxFQUFFLEdBREY7QUFDTztBQUNqQkMsaUJBQVMsRUFBRSxLQUZELENBRU87O0FBRlA7QUFOMkIsS0FBekIsQ0FBZCxDQVhzQixDQXVCdEI7O0FBQ01sQixlQUFXLENBQUNtQixFQUFaLENBQWUsV0FBZixFQUE0QixVQUFTQyxJQUFULEVBQWU7QUFDdkMsVUFBSUMsTUFBTSxDQUFDQyxnQkFBUCxDQUF3QixJQUF4QixDQUFKLEVBQW1DO0FBQUU7QUFDakNwQix3QkFBZ0IsQ0FBQ3FCLElBQWpCLEdBRCtCLENBQ047O0FBQzVCO0FBQ0osS0FKRDtBQUtOLEdBN0JELENBUm1DLENBdUNoQzs7O0FBQ0gsU0FBTztBQUNBQyxRQUFJLEVBQUUsY0FBU0MsTUFBVCxFQUFpQkMsV0FBakIsRUFBOEI7QUFDaEMzQixrQkFBWSxHQUFHc0IsTUFBTSxDQUFDTSxPQUFQLENBQWVGLE1BQWYsQ0FBZjtBQUNBeEIsdUJBQWlCLEdBQUdvQixNQUFNLENBQUNNLE9BQVAsQ0FBZUQsV0FBZixDQUFwQjs7QUFFQSxVQUFJLENBQUMzQixZQUFMLEVBQW1CO0FBQ2Y7QUFDSCxPQU4rQixDQVFoQzs7O0FBQ0FJLFdBQUs7QUFDZCxLQVhLO0FBYU55QixrQkFBYyxFQUFFLDBCQUFXO0FBQzFCLGFBQU83QixZQUFQO0FBQ0EsS0FmSztBQWlCQThCLHVCQUFtQixFQUFFLCtCQUFXO0FBQ3JDLGFBQU81QixpQkFBUDtBQUNBLEtBbkJLO0FBcUJBNkIsV0FBTyxFQUFFLG1CQUFXO0FBQ3pCLGFBQU85QixXQUFQO0FBQ0EsS0F2Qks7QUF5Qk4rQixzQkFBa0IsRUFBRSw0QkFBU0MsSUFBVCxFQUFlO0FBQ2xDLFVBQUloQyxXQUFKLEVBQWlCO0FBQ2hCQSxtQkFBVyxDQUFDK0Isa0JBQVosQ0FBK0JDLElBQS9CO0FBQ0E7QUFDRCxLQTdCSztBQStCQUMsZ0JBQVksRUFBRSx3QkFBVztBQUM5QixhQUFPL0IsZ0JBQVA7QUFDQSxLQWpDSztBQW1DTmdDLHdCQUFvQixFQUFFLGdDQUFXO0FBQ2hDLFVBQUlsQyxXQUFXLElBQUlxQixNQUFNLENBQUNjLGNBQVAsRUFBbkIsRUFBNEM7QUFDM0NqQyx3QkFBZ0IsQ0FBQ3FCLElBQWpCO0FBQ0E7QUFDRDtBQXZDSyxHQUFQO0FBeUNBLENBakZ3QixFQUF6QixDLENBbUZBOzs7QUFDQSxJQUFJLElBQUosRUFBbUM7QUFDbENhLFFBQU0sQ0FBQ0MsT0FBUCxHQUFpQnZDLGtCQUFqQjtBQUNBIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2hlYWRlci1tZW51LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRIZWFkZXJNZW51ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuXHR2YXIgX21lbnVFbGVtZW50O1xyXG4gICAgdmFyIF9tZW51T2JqZWN0O1xyXG4gICAgdmFyIF9vZmZjYW52YXNFbGVtZW50O1xyXG4gICAgdmFyIF9vZmZjYW52YXNPYmplY3Q7XHJcblxyXG4gICAgLy8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuXHR2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuXHRcdF9vZmZjYW52YXNPYmplY3QgPSBuZXcgS1RPZmZjYW52YXMoX29mZmNhbnZhc0VsZW1lbnQsIHtcclxuXHRcdFx0b3ZlcmxheTogdHJ1ZSxcclxuXHRcdFx0YmFzZUNsYXNzOiAnaGVhZGVyLW1lbnUtd3JhcHBlcicsXHJcblx0XHRcdGNsb3NlQnk6ICdrdF9oZWFkZXJfbWVudV9tb2JpbGVfY2xvc2VfYnRuJyxcclxuXHRcdFx0dG9nZ2xlQnk6IHtcclxuXHRcdFx0XHR0YXJnZXQ6ICdrdF9oZWFkZXJfbW9iaWxlX3RvZ2dsZScsXHJcblx0XHRcdFx0c3RhdGU6ICdtb2JpbGUtdG9nZ2xlLWFjdGl2ZSdcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRcclxuXHRcdF9tZW51T2JqZWN0ID0gbmV3IEtUTWVudShfbWVudUVsZW1lbnQsIHtcclxuXHRcdFx0c3VibWVudToge1xyXG5cdFx0XHRcdGRlc2t0b3A6ICdkcm9wZG93bicsXHJcblx0XHRcdFx0dGFibGV0OiAnYWNjb3JkaW9uJyxcclxuXHRcdFx0XHRtb2JpbGU6ICdhY2NvcmRpb24nXHJcblx0XHRcdH0sXHJcblx0XHRcdGFjY29yZGlvbjoge1xyXG5cdFx0XHRcdHNsaWRlU3BlZWQ6IDIwMCwgLy8gYWNjb3JkaW9uIHRvZ2dsZSBzbGlkZSBzcGVlZCBpbiBtaWxsaXNlY29uZHNcclxuXHRcdFx0XHRleHBhbmRBbGw6IGZhbHNlIC8vIGFsbG93IGhhdmluZyBtdWx0aXBsZSBleHBhbmRlZCBhY2NvcmRpb25zIGluIHRoZSBtZW51XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIENsb3NlIGFzaWRlIG9mZmNhbnZhcyBwYW5lbCBiZWZvcmUgcGFnZSByZWxvYWQgT24gdGFibGV0IGFuZCBtb2JpbGVcclxuICAgICAgICBfbWVudU9iamVjdC5vbignbGlua0NsaWNrJywgZnVuY3Rpb24obWVudSkge1xyXG4gICAgICAgICAgICBpZiAoS1RVdGlsLmlzQnJlYWtwb2ludERvd24oJ2xnJykpIHsgLy8gVGFibGV0IGFuZCBtb2JpbGUgbW9kZVxyXG4gICAgICAgICAgICAgICAgX29mZmNhbnZhc09iamVjdC5oaWRlKCk7IC8vIEhpZGUgb2ZmY2FudmFzIGFmdGVyIGdlbmVyYWwgbGluayBjbGlja1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblx0fVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcblx0cmV0dXJuIHtcclxuICAgICAgICBpbml0OiBmdW5jdGlvbihtZW51SWQsIG9mZmNhbnZhc0lkKSB7XHJcbiAgICAgICAgICAgIF9tZW51RWxlbWVudCA9IEtUVXRpbC5nZXRCeUlkKG1lbnVJZCk7XHJcbiAgICAgICAgICAgIF9vZmZjYW52YXNFbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQob2ZmY2FudmFzSWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfbWVudUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSBtZW51XHJcbiAgICAgICAgICAgIF9pbml0KCk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGdldE1lbnVFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIF9tZW51RWxlbWVudDtcclxuXHRcdH0sXHJcblxyXG4gICAgICAgIGdldE9mZmNhbnZhc0VsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gX29mZmNhbnZhc0VsZW1lbnQ7XHJcblx0XHR9LFxyXG5cclxuICAgICAgICBnZXRNZW51OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIF9tZW51T2JqZWN0O1xyXG5cdFx0fSxcclxuXHJcblx0XHRwYXVzZURyb3Bkb3duSG92ZXI6IGZ1bmN0aW9uKHRpbWUpIHtcclxuXHRcdFx0aWYgKF9tZW51T2JqZWN0KSB7XHJcblx0XHRcdFx0X21lbnVPYmplY3QucGF1c2VEcm9wZG93bkhvdmVyKHRpbWUpO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuICAgICAgICBnZXRPZmZjYW52YXM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gX29mZmNhbnZhc09iamVjdDtcclxuXHRcdH0sXHJcblxyXG5cdFx0Y2xvc2VNb2JpbGVPZmZjYW52YXM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoX21lbnVPYmplY3QgJiYgS1RVdGlsLmlzTW9iaWxlRGV2aWNlKCkpIHtcclxuXHRcdFx0XHRfb2ZmY2FudmFzT2JqZWN0LmhpZGUoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0SGVhZGVyTWVudTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/header-menu.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/header-topbar.js":
/*!************************************************************!*\
  !*** ./resources/metronic/js/layout/base/header-topbar.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutHeaderTopbar = function () {\n  // Private properties\n  var _toggleElement;\n\n  var _toggleObject; // Private functions\n\n\n  var _init = function _init() {\n    _toggleObject = new KTToggle(_toggleElement, KTUtil.getBody(), {\n      targetState: 'topbar-mobile-on',\n      toggleState: 'active'\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _toggleElement = KTUtil.getById(id);\n\n      if (!_toggleElement) {\n        return;\n      } // Initialize\n\n\n      _init();\n    },\n    getToggleElement: function getToggleElement() {\n      return _toggleElement;\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutHeaderTopbar;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvaGVhZGVyLXRvcGJhci5qcz9iZmVmIl0sIm5hbWVzIjpbIktUTGF5b3V0SGVhZGVyVG9wYmFyIiwiX3RvZ2dsZUVsZW1lbnQiLCJfdG9nZ2xlT2JqZWN0IiwiX2luaXQiLCJLVFRvZ2dsZSIsIktUVXRpbCIsImdldEJvZHkiLCJ0YXJnZXRTdGF0ZSIsInRvZ2dsZVN0YXRlIiwiaW5pdCIsImlkIiwiZ2V0QnlJZCIsImdldFRvZ2dsZUVsZW1lbnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxvQkFBb0IsR0FBRyxZQUFXO0FBQ2xDO0FBQ0gsTUFBSUMsY0FBSjs7QUFDRyxNQUFJQyxhQUFKLENBSGtDLENBS2xDOzs7QUFDQSxNQUFJQyxLQUFLLEdBQUcsU0FBUkEsS0FBUSxHQUFXO0FBQ25CRCxpQkFBYSxHQUFHLElBQUlFLFFBQUosQ0FBYUgsY0FBYixFQUE2QkksTUFBTSxDQUFDQyxPQUFQLEVBQTdCLEVBQStDO0FBQzNEQyxpQkFBVyxFQUFFLGtCQUQ4QztBQUUzREMsaUJBQVcsRUFBRTtBQUY4QyxLQUEvQyxDQUFoQjtBQUlILEdBTEQsQ0FOa0MsQ0FhbEM7OztBQUNILFNBQU87QUFDTkMsUUFBSSxFQUFFLGNBQVNDLEVBQVQsRUFBYTtBQUNUVCxvQkFBYyxHQUFHSSxNQUFNLENBQUNNLE9BQVAsQ0FBZUQsRUFBZixDQUFqQjs7QUFFVCxVQUFJLENBQUNULGNBQUwsRUFBcUI7QUFDUjtBQUNILE9BTFEsQ0FPVDs7O0FBQ0FFLFdBQUs7QUFDZCxLQVZLO0FBWUFTLG9CQUFnQixFQUFFLDRCQUFXO0FBQ3pCLGFBQU9YLGNBQVA7QUFDSDtBQWRELEdBQVA7QUFnQkEsQ0E5QjBCLEVBQTNCLEMsQ0FnQ0E7OztBQUNBLElBQUksSUFBSixFQUFtQztBQUNsQ1ksUUFBTSxDQUFDQyxPQUFQLEdBQWlCZCxvQkFBakI7QUFDQSIsImZpbGUiOiIuL3Jlc291cmNlcy9tZXRyb25pYy9qcy9sYXlvdXQvYmFzZS9oZWFkZXItdG9wYmFyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRIZWFkZXJUb3BiYXIgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG5cdHZhciBfdG9nZ2xlRWxlbWVudDtcclxuICAgIHZhciBfdG9nZ2xlT2JqZWN0O1xyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcbiAgICB2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBfdG9nZ2xlT2JqZWN0ID0gbmV3IEtUVG9nZ2xlKF90b2dnbGVFbGVtZW50LCBLVFV0aWwuZ2V0Qm9keSgpLCB7XHJcbiAgICAgICAgICAgIHRhcmdldFN0YXRlOiAndG9wYmFyLW1vYmlsZS1vbicsXHJcbiAgICAgICAgICAgIHRvZ2dsZVN0YXRlOiAnYWN0aXZlJyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQdWJsaWMgbWV0aG9kc1xyXG5cdHJldHVybiB7XHJcblx0XHRpbml0OiBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgICAgICBfdG9nZ2xlRWxlbWVudCA9IEtUVXRpbC5nZXRCeUlkKGlkKTtcclxuXHJcblx0XHRcdGlmICghX3RvZ2dsZUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZVxyXG4gICAgICAgICAgICBfaW5pdCgpO1xyXG5cdFx0fSxcclxuXHJcbiAgICAgICAgZ2V0VG9nZ2xlRWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdG9nZ2xlRWxlbWVudDtcclxuICAgICAgICB9XHJcblx0fTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRIZWFkZXJUb3BiYXI7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/header-topbar.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/header.js":
/*!*****************************************************!*\
  !*** ./resources/metronic/js/layout/base/header.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutHeader = function () {\n  // Private properties\n  var _element;\n\n  var _elementForMobile;\n\n  var _object; // Private functions\n  // Get Height\n\n\n  var _getHeight = function _getHeight() {\n    var height = 0;\n\n    if (_element) {\n      height = KTUtil.actualHeight(_element) + 1;\n    }\n\n    return height;\n  }; // Get Height\n\n\n  var _getHeightForMobile = function _getHeightForMobile() {\n    var height;\n    height = KTUtil.actualHeight(_elementForMobile);\n    return height;\n  }; // Public Methods\n\n\n  return {\n    init: function init(id, idForMobile) {\n      _element = KTUtil.getById(id);\n      _elementForMobile = KTUtil.getById(idForMobile);\n\n      if (!_element) {\n        return;\n      }\n    },\n    isFixed: function isFixed() {\n      return KTUtil.hasClass(KTUtil.getBody(), 'header-fixed');\n    },\n    isFixedForMobile: function isFixedForMobile() {\n      return KTUtil.hasClass(KTUtil.getBody(), 'header-mobile-fixed');\n    },\n    getElement: function getElement() {\n      return _element;\n    },\n    getElementForMobile: function getElementForMobile() {\n      return _elementForMobile;\n    },\n    getHeader: function getHeader() {\n      return _object;\n    },\n    getHeight: function getHeight() {\n      return _getHeight();\n    },\n    getHeightForMobile: function getHeightForMobile() {\n      return _getHeightForMobile();\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutHeader;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvaGVhZGVyLmpzPzUyODYiXSwibmFtZXMiOlsiS1RMYXlvdXRIZWFkZXIiLCJfZWxlbWVudCIsIl9lbGVtZW50Rm9yTW9iaWxlIiwiX29iamVjdCIsIl9nZXRIZWlnaHQiLCJoZWlnaHQiLCJLVFV0aWwiLCJhY3R1YWxIZWlnaHQiLCJfZ2V0SGVpZ2h0Rm9yTW9iaWxlIiwiaW5pdCIsImlkIiwiaWRGb3JNb2JpbGUiLCJnZXRCeUlkIiwiaXNGaXhlZCIsImhhc0NsYXNzIiwiZ2V0Qm9keSIsImlzRml4ZWRGb3JNb2JpbGUiLCJnZXRFbGVtZW50IiwiZ2V0RWxlbWVudEZvck1vYmlsZSIsImdldEhlYWRlciIsImdldEhlaWdodCIsImdldEhlaWdodEZvck1vYmlsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLGNBQWMsR0FBRyxZQUFXO0FBQzVCO0FBQ0EsTUFBSUMsUUFBSjs7QUFDQSxNQUFJQyxpQkFBSjs7QUFDQSxNQUFJQyxPQUFKLENBSjRCLENBTS9CO0FBQ0c7OztBQUNBLE1BQUlDLFVBQVUsR0FBRyxTQUFiQSxVQUFhLEdBQVc7QUFDeEIsUUFBSUMsTUFBTSxHQUFHLENBQWI7O0FBRUEsUUFBSUosUUFBSixFQUFjO0FBQ1ZJLFlBQU0sR0FBR0MsTUFBTSxDQUFDQyxZQUFQLENBQW9CTixRQUFwQixJQUFnQyxDQUF6QztBQUNIOztBQUVELFdBQU9JLE1BQVA7QUFDSCxHQVJELENBUjRCLENBa0I1Qjs7O0FBQ0EsTUFBSUcsbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFzQixHQUFXO0FBQ2pDLFFBQUlILE1BQUo7QUFFQUEsVUFBTSxHQUFHQyxNQUFNLENBQUNDLFlBQVAsQ0FBb0JMLGlCQUFwQixDQUFUO0FBRUEsV0FBT0csTUFBUDtBQUNILEdBTkQsQ0FuQjRCLENBMkI1Qjs7O0FBQ0gsU0FBTztBQUNOSSxRQUFJLEVBQUUsY0FBU0MsRUFBVCxFQUFhQyxXQUFiLEVBQTBCO0FBQ3RCVixjQUFRLEdBQUdLLE1BQU0sQ0FBQ00sT0FBUCxDQUFlRixFQUFmLENBQVg7QUFDQVIsdUJBQWlCLEdBQUdJLE1BQU0sQ0FBQ00sT0FBUCxDQUFlRCxXQUFmLENBQXBCOztBQUVBLFVBQUksQ0FBQ1YsUUFBTCxFQUFlO0FBQ1g7QUFDSDtBQUNWLEtBUks7QUFVQVksV0FBTyxFQUFFLG1CQUFXO0FBQ2hCLGFBQU9QLE1BQU0sQ0FBQ1EsUUFBUCxDQUFnQlIsTUFBTSxDQUFDUyxPQUFQLEVBQWhCLEVBQWtDLGNBQWxDLENBQVA7QUFDSCxLQVpEO0FBY0FDLG9CQUFnQixFQUFFLDRCQUFXO0FBQ3pCLGFBQU9WLE1BQU0sQ0FBQ1EsUUFBUCxDQUFnQlIsTUFBTSxDQUFDUyxPQUFQLEVBQWhCLEVBQWtDLHFCQUFsQyxDQUFQO0FBQ0gsS0FoQkQ7QUFrQkFFLGNBQVUsRUFBRSxzQkFBVztBQUNuQixhQUFPaEIsUUFBUDtBQUNILEtBcEJEO0FBc0JBaUIsdUJBQW1CLEVBQUUsK0JBQVc7QUFDNUIsYUFBT2hCLGlCQUFQO0FBQ0gsS0F4QkQ7QUEwQkFpQixhQUFTLEVBQUUscUJBQVc7QUFDbEIsYUFBT2hCLE9BQVA7QUFDSCxLQTVCRDtBQThCQWlCLGFBQVMsRUFBRSxxQkFBVztBQUNsQixhQUFPaEIsVUFBVSxFQUFqQjtBQUNILEtBaENEO0FBa0NBaUIsc0JBQWtCLEVBQUUsOEJBQVc7QUFDM0IsYUFBT2IsbUJBQW1CLEVBQTFCO0FBQ0g7QUFwQ0QsR0FBUDtBQXNDQSxDQWxFb0IsRUFBckIsQyxDQW9FQTs7O0FBQ0EsSUFBSSxJQUFKLEVBQW1DO0FBQ2xDYyxRQUFNLENBQUNDLE9BQVAsR0FBaUJ2QixjQUFqQjtBQUNBIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2hlYWRlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUTGF5b3V0SGVhZGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuICAgIHZhciBfZWxlbWVudDtcclxuICAgIHZhciBfZWxlbWVudEZvck1vYmlsZTtcclxuICAgIHZhciBfb2JqZWN0O1xyXG5cclxuXHQvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG4gICAgLy8gR2V0IEhlaWdodFxyXG4gICAgdmFyIF9nZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaGVpZ2h0ID0gMDtcclxuXHJcbiAgICAgICAgaWYgKF9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGhlaWdodCA9IEtUVXRpbC5hY3R1YWxIZWlnaHQoX2VsZW1lbnQpICsgMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBoZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR2V0IEhlaWdodFxyXG4gICAgdmFyIF9nZXRIZWlnaHRGb3JNb2JpbGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaGVpZ2h0O1xyXG5cclxuICAgICAgICBoZWlnaHQgPSBLVFV0aWwuYWN0dWFsSGVpZ2h0KF9lbGVtZW50Rm9yTW9iaWxlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQdWJsaWMgTWV0aG9kc1xyXG5cdHJldHVybiB7XHJcblx0XHRpbml0OiBmdW5jdGlvbihpZCwgaWRGb3JNb2JpbGUpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcbiAgICAgICAgICAgIF9lbGVtZW50Rm9yTW9iaWxlID0gS1RVdGlsLmdldEJ5SWQoaWRGb3JNb2JpbGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblx0XHR9LFxyXG5cclxuICAgICAgICBpc0ZpeGVkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtUVXRpbC5oYXNDbGFzcyhLVFV0aWwuZ2V0Qm9keSgpLCAnaGVhZGVyLWZpeGVkJylcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpc0ZpeGVkRm9yTW9iaWxlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtUVXRpbC5oYXNDbGFzcyhLVFV0aWwuZ2V0Qm9keSgpLCAnaGVhZGVyLW1vYmlsZS1maXhlZCcpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0RWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZWxlbWVudDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRFbGVtZW50Rm9yTW9iaWxlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9lbGVtZW50Rm9yTW9iaWxlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEhlYWRlcjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfb2JqZWN0O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEhlaWdodDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZ2V0SGVpZ2h0KCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0SGVpZ2h0Rm9yTW9iaWxlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9nZXRIZWlnaHRGb3JNb2JpbGUoKTtcclxuICAgICAgICB9XHJcblx0fTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRIZWFkZXI7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/header.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/sticky-card.js":
/*!**********************************************************!*\
  !*** ./resources/metronic/js/layout/base/sticky-card.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutStickyCard = function () {\n  // Private properties\n  var _element;\n\n  var _object; // Private functions\n\n\n  var _init = function _init() {\n    var offset = 300;\n\n    if (typeof KTLayoutHeader !== 'undefined') {\n      offset = KTLayoutHeader.getHeight();\n    }\n\n    _object = new KTCard(_element, {\n      sticky: {\n        offset: offset,\n        zIndex: 90,\n        position: {\n          top: function top() {\n            var pos = 0;\n            var body = KTUtil.getBody();\n\n            if (KTUtil.isBreakpointUp('lg')) {\n              if (typeof KTLayoutHeader !== 'undefined' && KTLayoutHeader.isFixed()) {\n                pos = pos + KTLayoutHeader.getHeight();\n              }\n\n              if (typeof KTLayoutSubheader !== 'undefined' && KTLayoutSubheader.isFixed()) {\n                pos = pos + KTLayoutSubheader.getHeight();\n              }\n            } else {\n              if (typeof KTLayoutHeader !== 'undefined' && KTLayoutHeader.isFixedForMobile()) {\n                pos = pos + KTLayoutHeader.getHeightForMobile();\n              }\n            }\n\n            pos = pos - 1; // remove header border width\n\n            return pos;\n          },\n          left: function left(card) {\n            return KTUtil.offset(_element).left;\n          },\n          right: function right(card) {\n            var body = KTUtil.getBody();\n            var cardWidth = parseInt(KTUtil.css(_element, 'width'));\n            var bodyWidth = parseInt(KTUtil.css(body, 'width'));\n            var cardOffsetLeft = KTUtil.offset(_element).left;\n            return bodyWidth - cardWidth - cardOffsetLeft;\n          }\n        }\n      }\n    });\n\n    _object.initSticky();\n\n    KTUtil.addResizeHandler(function () {\n      _object.updateSticky();\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      } // Initialize\n\n\n      _init();\n    },\n    update: function update() {\n      if (_object) {\n        _object.updateSticky();\n      }\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutStickyCard;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2Uvc3RpY2t5LWNhcmQuanM/ODdhMSJdLCJuYW1lcyI6WyJLVExheW91dFN0aWNreUNhcmQiLCJfZWxlbWVudCIsIl9vYmplY3QiLCJfaW5pdCIsIm9mZnNldCIsIktUTGF5b3V0SGVhZGVyIiwiZ2V0SGVpZ2h0IiwiS1RDYXJkIiwic3RpY2t5IiwiekluZGV4IiwicG9zaXRpb24iLCJ0b3AiLCJwb3MiLCJib2R5IiwiS1RVdGlsIiwiZ2V0Qm9keSIsImlzQnJlYWtwb2ludFVwIiwiaXNGaXhlZCIsIktUTGF5b3V0U3ViaGVhZGVyIiwiaXNGaXhlZEZvck1vYmlsZSIsImdldEhlaWdodEZvck1vYmlsZSIsImxlZnQiLCJjYXJkIiwicmlnaHQiLCJjYXJkV2lkdGgiLCJwYXJzZUludCIsImNzcyIsImJvZHlXaWR0aCIsImNhcmRPZmZzZXRMZWZ0IiwiaW5pdFN0aWNreSIsImFkZFJlc2l6ZUhhbmRsZXIiLCJ1cGRhdGVTdGlja3kiLCJpbml0IiwiaWQiLCJnZXRCeUlkIiwidXBkYXRlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsa0JBQWtCLEdBQUcsWUFBVztBQUNoQztBQUNILE1BQUlDLFFBQUo7O0FBQ0csTUFBSUMsT0FBSixDQUhnQyxDQUtuQzs7O0FBQ0EsTUFBSUMsS0FBSyxHQUFHLFNBQVJBLEtBQVEsR0FBVztBQUN0QixRQUFJQyxNQUFNLEdBQUcsR0FBYjs7QUFFQSxRQUFJLE9BQU9DLGNBQVAsS0FBMEIsV0FBOUIsRUFBMkM7QUFDMUNELFlBQU0sR0FBR0MsY0FBYyxDQUFDQyxTQUFmLEVBQVQ7QUFDQTs7QUFFS0osV0FBTyxHQUFHLElBQUlLLE1BQUosQ0FBV04sUUFBWCxFQUFxQjtBQUNwQ08sWUFBTSxFQUFFO0FBQ1BKLGNBQU0sRUFBRUEsTUFERDtBQUVQSyxjQUFNLEVBQUUsRUFGRDtBQUdQQyxnQkFBUSxFQUFFO0FBQ1RDLGFBQUcsRUFBRSxlQUFXO0FBQ2YsZ0JBQUlDLEdBQUcsR0FBRyxDQUFWO0FBQ2tCLGdCQUFJQyxJQUFJLEdBQUdDLE1BQU0sQ0FBQ0MsT0FBUCxFQUFYOztBQUVsQixnQkFBSUQsTUFBTSxDQUFDRSxjQUFQLENBQXNCLElBQXRCLENBQUosRUFBaUM7QUFDaEMsa0JBQUksT0FBT1gsY0FBUCxLQUEwQixXQUExQixJQUF5Q0EsY0FBYyxDQUFDWSxPQUFmLEVBQTdDLEVBQXVFO0FBQ3RFTCxtQkFBRyxHQUFHQSxHQUFHLEdBQUdQLGNBQWMsQ0FBQ0MsU0FBZixFQUFaO0FBQ0E7O0FBRUQsa0JBQUksT0FBT1ksaUJBQVAsS0FBNkIsV0FBN0IsSUFBNENBLGlCQUFpQixDQUFDRCxPQUFsQixFQUFoRCxFQUE2RTtBQUM1RUwsbUJBQUcsR0FBR0EsR0FBRyxHQUFHTSxpQkFBaUIsQ0FBQ1osU0FBbEIsRUFBWjtBQUNBO0FBQ0QsYUFSRCxNQVFPO0FBQ04sa0JBQUksT0FBT0QsY0FBUCxLQUEwQixXQUExQixJQUF5Q0EsY0FBYyxDQUFDYyxnQkFBZixFQUE3QyxFQUFnRjtBQUMvRVAsbUJBQUcsR0FBR0EsR0FBRyxHQUFHUCxjQUFjLENBQUNlLGtCQUFmLEVBQVo7QUFDQTtBQUNEOztBQUVEUixlQUFHLEdBQUdBLEdBQUcsR0FBRyxDQUFaLENBbEJlLENBa0JBOztBQUVmLG1CQUFPQSxHQUFQO0FBQ0EsV0F0QlE7QUF1QlRTLGNBQUksRUFBRSxjQUFTQyxJQUFULEVBQWU7QUFDcEIsbUJBQU9SLE1BQU0sQ0FBQ1YsTUFBUCxDQUFjSCxRQUFkLEVBQXdCb0IsSUFBL0I7QUFDQSxXQXpCUTtBQTBCVEUsZUFBSyxFQUFFLGVBQVNELElBQVQsRUFBZTtBQUNyQixnQkFBSVQsSUFBSSxHQUFHQyxNQUFNLENBQUNDLE9BQVAsRUFBWDtBQUVBLGdCQUFJUyxTQUFTLEdBQUdDLFFBQVEsQ0FBQ1gsTUFBTSxDQUFDWSxHQUFQLENBQVd6QixRQUFYLEVBQXFCLE9BQXJCLENBQUQsQ0FBeEI7QUFDQSxnQkFBSTBCLFNBQVMsR0FBR0YsUUFBUSxDQUFDWCxNQUFNLENBQUNZLEdBQVAsQ0FBV2IsSUFBWCxFQUFpQixPQUFqQixDQUFELENBQXhCO0FBQ0EsZ0JBQUllLGNBQWMsR0FBR2QsTUFBTSxDQUFDVixNQUFQLENBQWNILFFBQWQsRUFBd0JvQixJQUE3QztBQUVBLG1CQUFPTSxTQUFTLEdBQUdILFNBQVosR0FBd0JJLGNBQS9CO0FBQ0E7QUFsQ1E7QUFISDtBQUQ0QixLQUFyQixDQUFWOztBQTJDTjFCLFdBQU8sQ0FBQzJCLFVBQVI7O0FBRUFmLFVBQU0sQ0FBQ2dCLGdCQUFQLENBQXdCLFlBQVc7QUFDbEM1QixhQUFPLENBQUM2QixZQUFSO0FBQ0EsS0FGRDtBQUdBLEdBdkRELENBTm1DLENBK0RoQzs7O0FBQ0gsU0FBTztBQUNOQyxRQUFJLEVBQUUsY0FBU0MsRUFBVCxFQUFhO0FBQ1RoQyxjQUFRLEdBQUdhLE1BQU0sQ0FBQ29CLE9BQVAsQ0FBZUQsRUFBZixDQUFYOztBQUVBLFVBQUksQ0FBQ2hDLFFBQUwsRUFBZTtBQUNYO0FBQ0gsT0FMUSxDQU9UOzs7QUFDVEUsV0FBSztBQUNMLEtBVks7QUFZTmdDLFVBQU0sRUFBRSxrQkFBVztBQUNsQixVQUFJakMsT0FBSixFQUFhO0FBQ1pBLGVBQU8sQ0FBQzZCLFlBQVI7QUFDQTtBQUNEO0FBaEJLLEdBQVA7QUFrQkEsQ0FsRndCLEVBQXpCLEMsQ0FvRkE7OztBQUNBLElBQUksSUFBSixFQUFtQztBQUNsQ0ssUUFBTSxDQUFDQyxPQUFQLEdBQWlCckMsa0JBQWpCO0FBQ0EiLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2Uvc3RpY2t5LWNhcmQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dFN0aWNreUNhcmQgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG5cdHZhciBfZWxlbWVudDtcclxuICAgIHZhciBfb2JqZWN0O1xyXG5cclxuXHQvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG5cdHZhciBfaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIG9mZnNldCA9IDMwMDtcclxuXHJcblx0XHRpZiAodHlwZW9mIEtUTGF5b3V0SGVhZGVyICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRvZmZzZXQgPSBLVExheW91dEhlYWRlci5nZXRIZWlnaHQoKTtcclxuXHRcdH1cclxuXHJcbiAgICAgICAgX29iamVjdCA9IG5ldyBLVENhcmQoX2VsZW1lbnQsIHtcclxuXHRcdFx0c3RpY2t5OiB7XHJcblx0XHRcdFx0b2Zmc2V0OiBvZmZzZXQsXHJcblx0XHRcdFx0ekluZGV4OiA5MCxcclxuXHRcdFx0XHRwb3NpdGlvbjoge1xyXG5cdFx0XHRcdFx0dG9wOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0dmFyIHBvcyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBib2R5ID0gS1RVdGlsLmdldEJvZHkoKTtcclxuXHJcblx0XHRcdFx0XHRcdGlmIChLVFV0aWwuaXNCcmVha3BvaW50VXAoJ2xnJykpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIEtUTGF5b3V0SGVhZGVyICE9PSAndW5kZWZpbmVkJyAmJiBLVExheW91dEhlYWRlci5pc0ZpeGVkKCkpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHBvcyA9IHBvcyArIEtUTGF5b3V0SGVhZGVyLmdldEhlaWdodCgpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBLVExheW91dFN1YmhlYWRlciAhPT0gJ3VuZGVmaW5lZCcgJiYgS1RMYXlvdXRTdWJoZWFkZXIuaXNGaXhlZCgpKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRwb3MgPSBwb3MgKyBLVExheW91dFN1YmhlYWRlci5nZXRIZWlnaHQoKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBLVExheW91dEhlYWRlciAhPT0gJ3VuZGVmaW5lZCcgJiYgS1RMYXlvdXRIZWFkZXIuaXNGaXhlZEZvck1vYmlsZSgpKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRwb3MgPSBwb3MgKyBLVExheW91dEhlYWRlci5nZXRIZWlnaHRGb3JNb2JpbGUoKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdHBvcyA9IHBvcyAtIDE7IC8vIHJlbW92ZSBoZWFkZXIgYm9yZGVyIHdpZHRoXHJcblxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcG9zO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdGxlZnQ6IGZ1bmN0aW9uKGNhcmQpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIEtUVXRpbC5vZmZzZXQoX2VsZW1lbnQpLmxlZnQ7XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0cmlnaHQ6IGZ1bmN0aW9uKGNhcmQpIHtcclxuXHRcdFx0XHRcdFx0dmFyIGJvZHkgPSBLVFV0aWwuZ2V0Qm9keSgpO1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIGNhcmRXaWR0aCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICd3aWR0aCcpKTtcclxuXHRcdFx0XHRcdFx0dmFyIGJvZHlXaWR0aCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoYm9keSwgJ3dpZHRoJykpO1xyXG5cdFx0XHRcdFx0XHR2YXIgY2FyZE9mZnNldExlZnQgPSBLVFV0aWwub2Zmc2V0KF9lbGVtZW50KS5sZWZ0O1xyXG5cclxuXHRcdFx0XHRcdFx0cmV0dXJuIGJvZHlXaWR0aCAtIGNhcmRXaWR0aCAtIGNhcmRPZmZzZXRMZWZ0O1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0X29iamVjdC5pbml0U3RpY2t5KCk7XHJcblxyXG5cdFx0S1RVdGlsLmFkZFJlc2l6ZUhhbmRsZXIoZnVuY3Rpb24oKSB7XHJcblx0XHRcdF9vYmplY3QudXBkYXRlU3RpY2t5KCk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuXHRyZXR1cm4ge1xyXG5cdFx0aW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemVcclxuXHRcdFx0X2luaXQoKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0dXBkYXRlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKF9vYmplY3QpIHtcclxuXHRcdFx0XHRfb2JqZWN0LnVwZGF0ZVN0aWNreSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRTdGlja3lDYXJkO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/sticky-card.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/stretched-card.js":
/*!*************************************************************!*\
  !*** ./resources/metronic/js/layout/base/stretched-card.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutStretchedCard = function () {\n  // Private properties\n  var _element; // Private functions\n\n\n  var _init = function _init() {\n    var scroll = KTUtil.find(_element, '.card-scroll');\n    var cardBody = KTUtil.find(_element, '.card-body');\n    var cardHeader = KTUtil.find(_element, '.card-header');\n    var height = KTLayoutContent.getHeight();\n    height = height - parseInt(KTUtil.actualHeight(cardHeader));\n    height = height - parseInt(KTUtil.css(_element, 'marginTop')) - parseInt(KTUtil.css(_element, 'marginBottom'));\n    height = height - parseInt(KTUtil.css(_element, 'paddingTop')) - parseInt(KTUtil.css(_element, 'paddingBottom'));\n    height = height - parseInt(KTUtil.css(cardBody, 'paddingTop')) - parseInt(KTUtil.css(cardBody, 'paddingBottom'));\n    height = height - parseInt(KTUtil.css(cardBody, 'marginTop')) - parseInt(KTUtil.css(cardBody, 'marginBottom'));\n    height = height - 3;\n    KTUtil.css(scroll, 'height', height + 'px');\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      } // Initialize\n\n\n      _init(); // Re-calculate on window resize\n\n\n      KTUtil.addResizeHandler(function () {\n        _init();\n      });\n    },\n    update: function update() {\n      _init();\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutStretchedCard;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2Uvc3RyZXRjaGVkLWNhcmQuanM/ZWQ4MiJdLCJuYW1lcyI6WyJLVExheW91dFN0cmV0Y2hlZENhcmQiLCJfZWxlbWVudCIsIl9pbml0Iiwic2Nyb2xsIiwiS1RVdGlsIiwiZmluZCIsImNhcmRCb2R5IiwiY2FyZEhlYWRlciIsImhlaWdodCIsIktUTGF5b3V0Q29udGVudCIsImdldEhlaWdodCIsInBhcnNlSW50IiwiYWN0dWFsSGVpZ2h0IiwiY3NzIiwiaW5pdCIsImlkIiwiZ2V0QnlJZCIsImFkZFJlc2l6ZUhhbmRsZXIiLCJ1cGRhdGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxxQkFBcUIsR0FBRyxZQUFXO0FBQ25DO0FBQ0gsTUFBSUMsUUFBSixDQUZzQyxDQUl0Qzs7O0FBQ0EsTUFBSUMsS0FBSyxHQUFHLFNBQVJBLEtBQVEsR0FBVztBQUN0QixRQUFJQyxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSixRQUFaLEVBQXNCLGNBQXRCLENBQWI7QUFDQSxRQUFJSyxRQUFRLEdBQUdGLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSixRQUFaLEVBQXNCLFlBQXRCLENBQWY7QUFDQSxRQUFJTSxVQUFVLEdBQUdILE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSixRQUFaLEVBQXNCLGNBQXRCLENBQWpCO0FBRUEsUUFBSU8sTUFBTSxHQUFHQyxlQUFlLENBQUNDLFNBQWhCLEVBQWI7QUFFQUYsVUFBTSxHQUFHQSxNQUFNLEdBQUdHLFFBQVEsQ0FBQ1AsTUFBTSxDQUFDUSxZQUFQLENBQW9CTCxVQUFwQixDQUFELENBQTFCO0FBRUFDLFVBQU0sR0FBR0EsTUFBTSxHQUFHRyxRQUFRLENBQUNQLE1BQU0sQ0FBQ1MsR0FBUCxDQUFXWixRQUFYLEVBQXFCLFdBQXJCLENBQUQsQ0FBakIsR0FBdURVLFFBQVEsQ0FBQ1AsTUFBTSxDQUFDUyxHQUFQLENBQVdaLFFBQVgsRUFBcUIsY0FBckIsQ0FBRCxDQUF4RTtBQUNBTyxVQUFNLEdBQUdBLE1BQU0sR0FBR0csUUFBUSxDQUFDUCxNQUFNLENBQUNTLEdBQVAsQ0FBV1osUUFBWCxFQUFxQixZQUFyQixDQUFELENBQWpCLEdBQXdEVSxRQUFRLENBQUNQLE1BQU0sQ0FBQ1MsR0FBUCxDQUFXWixRQUFYLEVBQXFCLGVBQXJCLENBQUQsQ0FBekU7QUFFQU8sVUFBTSxHQUFHQSxNQUFNLEdBQUdHLFFBQVEsQ0FBQ1AsTUFBTSxDQUFDUyxHQUFQLENBQVdQLFFBQVgsRUFBcUIsWUFBckIsQ0FBRCxDQUFqQixHQUF3REssUUFBUSxDQUFDUCxNQUFNLENBQUNTLEdBQVAsQ0FBV1AsUUFBWCxFQUFxQixlQUFyQixDQUFELENBQXpFO0FBQ0FFLFVBQU0sR0FBR0EsTUFBTSxHQUFHRyxRQUFRLENBQUNQLE1BQU0sQ0FBQ1MsR0FBUCxDQUFXUCxRQUFYLEVBQXFCLFdBQXJCLENBQUQsQ0FBakIsR0FBdURLLFFBQVEsQ0FBQ1AsTUFBTSxDQUFDUyxHQUFQLENBQVdQLFFBQVgsRUFBcUIsY0FBckIsQ0FBRCxDQUF4RTtBQUVBRSxVQUFNLEdBQUdBLE1BQU0sR0FBRyxDQUFsQjtBQUVBSixVQUFNLENBQUNTLEdBQVAsQ0FBV1YsTUFBWCxFQUFtQixRQUFuQixFQUE2QkssTUFBTSxHQUFHLElBQXRDO0FBQ0EsR0FsQkQsQ0FMc0MsQ0F5Qm5DOzs7QUFDSCxTQUFPO0FBQ05NLFFBQUksRUFBRSxjQUFTQyxFQUFULEVBQWE7QUFDVGQsY0FBUSxHQUFHRyxNQUFNLENBQUNZLE9BQVAsQ0FBZUQsRUFBZixDQUFYOztBQUVBLFVBQUksQ0FBQ2QsUUFBTCxFQUFlO0FBQ1g7QUFDSCxPQUxRLENBT1Q7OztBQUNUQyxXQUFLLEdBUmEsQ0FVVDs7O0FBQ0FFLFlBQU0sQ0FBQ2EsZ0JBQVAsQ0FBd0IsWUFBVztBQUMzQ2YsYUFBSztBQUNMLE9BRlE7QUFHVCxLQWZLO0FBaUJOZ0IsVUFBTSxFQUFFLGtCQUFXO0FBQ2xCaEIsV0FBSztBQUNMO0FBbkJLLEdBQVA7QUFxQkEsQ0EvQzJCLEVBQTVCLEMsQ0FpREE7OztBQUNBLElBQUksSUFBSixFQUFtQztBQUNsQ2lCLFFBQU0sQ0FBQ0MsT0FBUCxHQUFpQnBCLHFCQUFqQjtBQUNBIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9iYXNlL3N0cmV0Y2hlZC1jYXJkLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRTdHJldGNoZWRDYXJkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuXHR2YXIgX2VsZW1lbnQ7XHJcblxyXG5cdC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcblx0dmFyIF9pbml0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgc2Nyb2xsID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcuY2FyZC1zY3JvbGwnKTtcclxuXHRcdHZhciBjYXJkQm9keSA9IEtUVXRpbC5maW5kKF9lbGVtZW50LCAnLmNhcmQtYm9keScpO1xyXG5cdFx0dmFyIGNhcmRIZWFkZXIgPSBLVFV0aWwuZmluZChfZWxlbWVudCwgJy5jYXJkLWhlYWRlcicpO1xyXG5cclxuXHRcdHZhciBoZWlnaHQgPSBLVExheW91dENvbnRlbnQuZ2V0SGVpZ2h0KCk7XHJcblxyXG5cdFx0aGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChjYXJkSGVhZGVyKSk7XHJcblxyXG5cdFx0aGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ21hcmdpblRvcCcpKSAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdtYXJnaW5Cb3R0b20nKSk7XHJcblx0XHRoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKF9lbGVtZW50LCAncGFkZGluZ1RvcCcpKSAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nQm90dG9tJykpO1xyXG5cclxuXHRcdGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoY2FyZEJvZHksICdwYWRkaW5nVG9wJykpIC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjYXJkQm9keSwgJ3BhZGRpbmdCb3R0b20nKSk7XHJcblx0XHRoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNhcmRCb2R5LCAnbWFyZ2luVG9wJykpIC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjYXJkQm9keSwgJ21hcmdpbkJvdHRvbScpKTtcclxuXHJcblx0XHRoZWlnaHQgPSBoZWlnaHQgLSAzO1xyXG5cclxuXHRcdEtUVXRpbC5jc3Moc2Nyb2xsLCAnaGVpZ2h0JywgaGVpZ2h0ICsgJ3B4Jyk7XHJcblx0fVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcblx0cmV0dXJuIHtcclxuXHRcdGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplXHJcblx0XHRcdF9pbml0KCk7XHJcblxyXG4gICAgICAgICAgICAvLyBSZS1jYWxjdWxhdGUgb24gd2luZG93IHJlc2l6ZVxyXG4gICAgICAgICAgICBLVFV0aWwuYWRkUmVzaXplSGFuZGxlcihmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRfaW5pdCgpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0sXHJcblxyXG5cdFx0dXBkYXRlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0X2luaXQoKTtcclxuXHRcdH1cclxuXHR9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dFN0cmV0Y2hlZENhcmQ7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/stretched-card.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/subheader.js":
/*!********************************************************!*\
  !*** ./resources/metronic/js/layout/base/subheader.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutSubheader = function () {\n  // Private properties\n  var _element; // Private functions\n\n\n  var _getHeight = function _getHeight() {\n    var height = 0;\n\n    if (_element) {\n      height = KTUtil.actualHeight(_element);\n    }\n\n    return height;\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      }\n    },\n    isFixed: function isFixed() {\n      return KTUtil.hasClass(KTUtil.getBody(), 'subheader-fixed');\n    },\n    getElement: function getElement() {\n      return _element;\n    },\n    getHeight: function getHeight() {\n      return _getHeight();\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutSubheader;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2Uvc3ViaGVhZGVyLmpzPzNhNTgiXSwibmFtZXMiOlsiS1RMYXlvdXRTdWJoZWFkZXIiLCJfZWxlbWVudCIsIl9nZXRIZWlnaHQiLCJoZWlnaHQiLCJLVFV0aWwiLCJhY3R1YWxIZWlnaHQiLCJpbml0IiwiaWQiLCJnZXRCeUlkIiwiaXNGaXhlZCIsImhhc0NsYXNzIiwiZ2V0Qm9keSIsImdldEVsZW1lbnQiLCJnZXRIZWlnaHQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxpQkFBaUIsR0FBRyxZQUFXO0FBQy9CO0FBQ0EsTUFBSUMsUUFBSixDQUYrQixDQUkvQjs7O0FBQ0EsTUFBSUMsVUFBVSxHQUFHLFNBQWJBLFVBQWEsR0FBVztBQUN4QixRQUFJQyxNQUFNLEdBQUcsQ0FBYjs7QUFFQSxRQUFJRixRQUFKLEVBQWM7QUFDVkUsWUFBTSxHQUFHQyxNQUFNLENBQUNDLFlBQVAsQ0FBb0JKLFFBQXBCLENBQVQ7QUFDSDs7QUFFRCxXQUFPRSxNQUFQO0FBQ0gsR0FSRCxDQUwrQixDQWUvQjs7O0FBQ0gsU0FBTztBQUNORyxRQUFJLEVBQUUsY0FBU0MsRUFBVCxFQUFhO0FBQ1ROLGNBQVEsR0FBR0csTUFBTSxDQUFDSSxPQUFQLENBQWVELEVBQWYsQ0FBWDs7QUFFQSxVQUFJLENBQUNOLFFBQUwsRUFBZTtBQUNYO0FBQ0g7QUFDVixLQVBLO0FBU0FRLFdBQU8sRUFBRSxtQkFBVztBQUNoQixhQUFPTCxNQUFNLENBQUNNLFFBQVAsQ0FBZ0JOLE1BQU0sQ0FBQ08sT0FBUCxFQUFoQixFQUFrQyxpQkFBbEMsQ0FBUDtBQUNILEtBWEQ7QUFhQUMsY0FBVSxFQUFFLHNCQUFXO0FBQ25CLGFBQU9YLFFBQVA7QUFDSCxLQWZEO0FBaUJBWSxhQUFTLEVBQUUscUJBQVc7QUFDbEIsYUFBT1gsVUFBVSxFQUFqQjtBQUNIO0FBbkJELEdBQVA7QUFxQkEsQ0FyQ3VCLEVBQXhCLEMsQ0F1Q0E7OztBQUNBLElBQUksSUFBSixFQUFtQztBQUNsQ1ksUUFBTSxDQUFDQyxPQUFQLEdBQWlCZixpQkFBakI7QUFDQSIsImZpbGUiOiIuL3Jlc291cmNlcy9tZXRyb25pYy9qcy9sYXlvdXQvYmFzZS9zdWJoZWFkZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dFN1YmhlYWRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gUHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICB2YXIgX2VsZW1lbnQ7XHJcblxyXG4gICAgLy8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuICAgIHZhciBfZ2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IDA7XHJcblxyXG4gICAgICAgIGlmIChfZWxlbWVudCkge1xyXG4gICAgICAgICAgICBoZWlnaHQgPSBLVFV0aWwuYWN0dWFsSGVpZ2h0KF9lbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBoZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuXHRyZXR1cm4ge1xyXG5cdFx0aW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHRcdH0sXHJcblxyXG4gICAgICAgIGlzRml4ZWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gS1RVdGlsLmhhc0NsYXNzKEtUVXRpbC5nZXRCb2R5KCksICdzdWJoZWFkZXItZml4ZWQnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9lbGVtZW50O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEhlaWdodDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZ2V0SGVpZ2h0KCk7XHJcbiAgICAgICAgfVxyXG5cdH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0U3ViaGVhZGVyO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/subheader.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/chat.js":
/*!*******************************************************!*\
  !*** ./resources/metronic/js/layout/extended/chat.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Class definition\n\nvar KTLayoutChat = function () {\n  // Private functions\n  var _init = function _init(element) {\n    var scrollEl = KTUtil.find(element, '.scroll');\n    var cardBodyEl = KTUtil.find(element, '.card-body');\n    var cardHeaderEl = KTUtil.find(element, '.card-header');\n    var cardFooterEl = KTUtil.find(element, '.card-footer');\n\n    if (!scrollEl) {\n      return;\n    } // initialize perfect scrollbar(see:  https://github.com/utatti/perfect-scrollbar)\n\n\n    KTUtil.scrollInit(scrollEl, {\n      windowScroll: false,\n      // allow browser scroll when the scroll reaches the end of the side\n      mobileNativeScroll: true,\n      // enable native scroll for mobile\n      desktopNativeScroll: false,\n      // disable native scroll and use custom scroll for desktop\n      resetHeightOnDestroy: true,\n      // reset css height on scroll feature destroyed\n      handleWindowResize: true,\n      // recalculate hight on window resize\n      rememberPosition: true,\n      // remember scroll position in cookie\n      height: function height() {\n        // calculate height\n        var height;\n\n        if (KTUtil.isBreakpointDown('lg')) {\n          // Mobile mode\n          return KTUtil.hasAttr(scrollEl, 'data-mobile-height') ? parseInt(KTUtil.attr(scrollEl, 'data-mobile-height')) : 400;\n        } else if (KTUtil.isBreakpointUp('lg') && KTUtil.hasAttr(scrollEl, 'data-height')) {\n          // Desktop Mode\n          return parseInt(KTUtil.attr(scrollEl, 'data-height'));\n        } else {\n          height = KTLayoutContent.getHeight();\n\n          if (scrollEl) {\n            height = height - parseInt(KTUtil.css(scrollEl, 'margin-top')) - parseInt(KTUtil.css(scrollEl, 'margin-bottom'));\n          }\n\n          if (cardHeaderEl) {\n            height = height - parseInt(KTUtil.css(cardHeaderEl, 'height'));\n            height = height - parseInt(KTUtil.css(cardHeaderEl, 'margin-top')) - parseInt(KTUtil.css(cardHeaderEl, 'margin-bottom'));\n          }\n\n          if (cardBodyEl) {\n            height = height - parseInt(KTUtil.css(cardBodyEl, 'padding-top')) - parseInt(KTUtil.css(cardBodyEl, 'padding-bottom'));\n          }\n\n          if (cardFooterEl) {\n            height = height - parseInt(KTUtil.css(cardFooterEl, 'height'));\n            height = height - parseInt(KTUtil.css(cardFooterEl, 'margin-top')) - parseInt(KTUtil.css(cardFooterEl, 'margin-bottom'));\n          }\n        } // Remove additional space\n\n\n        height = height - 2;\n        return height;\n      }\n    }); // attach events\n\n    KTUtil.on(element, '.card-footer textarea', 'keydown', function (e) {\n      if (e.keyCode == 13) {\n        _handeMessaging(element);\n\n        e.preventDefault();\n        return false;\n      }\n    });\n    KTUtil.on(element, '.card-footer .chat-send', 'click', function (e) {\n      _handeMessaging(element);\n    });\n  };\n\n  var _handeMessaging = function _handeMessaging(element) {\n    var messagesEl = KTUtil.find(element, '.messages');\n    var scrollEl = KTUtil.find(element, '.scroll');\n    var textarea = KTUtil.find(element, 'textarea');\n\n    if (textarea.value.length === 0) {\n      return;\n    }\n\n    var node = document.createElement(\"DIV\");\n    KTUtil.addClass(node, 'd-flex flex-column mb-5 align-items-end');\n    var html = '';\n    html += '<div class=\"d-flex align-items-center\">';\n    html += '\t<div>';\n    html += '\t\t<span class=\"text-muted font-size-sm\">2 Hours</span>';\n    html += '\t\t<a href=\"#\" class=\"text-dark-75 text-hover-primary font-weight-bold font-size-h6\">You</a>';\n    html += '\t</div>';\n    html += '\t<div class=\"symbol symbol-circle symbol-40 ml-3\">';\n    html += '\t\t<img alt=\"Pic\" src=\"assets/media/users/300_12.jpg\"/>';\n    html += '\t</div>';\n    html += '</div>';\n    html += '<div class=\"mt-2 rounded p-5 bg-light-primary text-dark-50 font-weight-bold font-size-lg text-right max-w-400px\">' + textarea.value + '</div>';\n    KTUtil.setHTML(node, html);\n    messagesEl.appendChild(node);\n    textarea.value = '';\n    scrollEl.scrollTop = parseInt(KTUtil.css(messagesEl, 'height'));\n    var ps;\n\n    if (ps = KTUtil.data(scrollEl).get('ps')) {\n      ps.update();\n    }\n\n    setTimeout(function () {\n      var node = document.createElement(\"DIV\");\n      KTUtil.addClass(node, 'd-flex flex-column mb-5 align-items-start');\n      var html = '';\n      html += '<div class=\"d-flex align-items-center\">';\n      html += '\t<div class=\"symbol symbol-circle symbol-40 mr-3\">';\n      html += '\t\t<img alt=\"Pic\" src=\"assets/media/users/300_12.jpg\"/>';\n      html += '\t</div>';\n      html += '\t<div>';\n      html += '\t\t<a href=\"#\" class=\"text-dark-75 text-hover-primary font-weight-bold font-size-h6\">Matt Pears</a>';\n      html += '\t\t<span class=\"text-muted font-size-sm\">Just now</span>';\n      html += '\t</div>';\n      html += '</div>';\n      html += '<div class=\"mt-2 rounded p-5 bg-light-success text-dark-50 font-weight-bold font-size-lg text-left max-w-400px\">';\n      html += 'Right before vacation season we have the next Big Deal for you.';\n      html += '</div>';\n      KTUtil.setHTML(node, html);\n      messagesEl.appendChild(node);\n      textarea.value = '';\n      scrollEl.scrollTop = parseInt(KTUtil.css(messagesEl, 'height'));\n      var ps;\n\n      if (ps = KTUtil.data(scrollEl).get('ps')) {\n        ps.update();\n      }\n    }, 2000);\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      // Init modal chat example\n      _init(KTUtil.getById(id)); // Trigger click to show popup modal chat on page load\n\n\n      if (encodeURI(window.location.hostname) == 'keenthemes.com' || encodeURI(window.location.hostname) == 'www.keenthemes.com') {\n        setTimeout(function () {\n          if (!KTCookie.getCookie('kt_app_chat_shown')) {\n            var expires = new Date(new Date().getTime() + 60 * 60 * 1000); // expire in 60 minutes from now\n\n            KTCookie.setCookie('kt_app_chat_shown', 1, {\n              expires: expires\n            });\n\n            if (KTUtil.getById('kt_app_chat_launch_btn')) {\n              KTUtil.getById('kt_app_chat_launch_btn').click();\n            }\n          }\n        }, 2000);\n      }\n    },\n    setup: function setup(element) {\n      _init(element);\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutChat;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL2NoYXQuanM/YjYxOCJdLCJuYW1lcyI6WyJLVExheW91dENoYXQiLCJfaW5pdCIsImVsZW1lbnQiLCJzY3JvbGxFbCIsIktUVXRpbCIsImZpbmQiLCJjYXJkQm9keUVsIiwiY2FyZEhlYWRlckVsIiwiY2FyZEZvb3RlckVsIiwic2Nyb2xsSW5pdCIsIndpbmRvd1Njcm9sbCIsIm1vYmlsZU5hdGl2ZVNjcm9sbCIsImRlc2t0b3BOYXRpdmVTY3JvbGwiLCJyZXNldEhlaWdodE9uRGVzdHJveSIsImhhbmRsZVdpbmRvd1Jlc2l6ZSIsInJlbWVtYmVyUG9zaXRpb24iLCJoZWlnaHQiLCJpc0JyZWFrcG9pbnREb3duIiwiaGFzQXR0ciIsInBhcnNlSW50IiwiYXR0ciIsImlzQnJlYWtwb2ludFVwIiwiS1RMYXlvdXRDb250ZW50IiwiZ2V0SGVpZ2h0IiwiY3NzIiwib24iLCJlIiwia2V5Q29kZSIsIl9oYW5kZU1lc3NhZ2luZyIsInByZXZlbnREZWZhdWx0IiwibWVzc2FnZXNFbCIsInRleHRhcmVhIiwidmFsdWUiLCJsZW5ndGgiLCJub2RlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYWRkQ2xhc3MiLCJodG1sIiwic2V0SFRNTCIsImFwcGVuZENoaWxkIiwic2Nyb2xsVG9wIiwicHMiLCJkYXRhIiwiZ2V0IiwidXBkYXRlIiwic2V0VGltZW91dCIsImluaXQiLCJpZCIsImdldEJ5SWQiLCJlbmNvZGVVUkkiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhvc3RuYW1lIiwiS1RDb29raWUiLCJnZXRDb29raWUiLCJleHBpcmVzIiwiRGF0ZSIsImdldFRpbWUiLCJzZXRDb29raWUiLCJjbGljayIsInNldHVwIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkNBRUE7O0FBQ0EsSUFBSUEsWUFBWSxHQUFHLFlBQVk7QUFDOUI7QUFDQSxNQUFJQyxLQUFLLEdB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QUEyREgsU0FBUyxDQUFDQyxNQUFNLENBQUNDLFFBQVAsQ0FBZ0JDLFFBQWpCLENBQVQsSUFBdUMsb0JBQXRHLEVBQTRIO0FBQzNIUCxrQkFBVSxDQUFDLFlBQVc7QUFDWixjQUFJLENBQUNRLFFBQVEsQ0FBQ0MsU0FBVCxDQUFtQixtQkFBbkIsQ0FBTCxFQUE4QztBQUMxQyxnQkFBSUMsT0FBTyxHQUFHLElBQUlDLElBQUosQ0FBUyxJQUFJQSxJQUFKLEdBQVdDLE9BQVgsS0FBdUIsS0FBSyxFQUFMLEdBQVUsSUFBMUMsQ0FBZCxDQUQwQyxDQUNxQjs7QUFFM0VKLG9CQUFRLENBQUNLLFNBQVQsQ0FBbUIsbUJBQW5CLEVBQXdDLENBQXhDLEVBQTJDO0FBQUVILHFCQUFPLEVBQUVBO0FBQVgsYUFBM0M7O0FBRUEsZ0JBQUlwRCxNQUFNLENBQUM2QyxPQUFQLENBQWUsd0JBQWYsQ0FBSixFQUE4QztBQUM3QzdDLG9CQUFNLENBQUM2QyxPQUFQLENBQWUsd0JBQWYsRUFBeUNXLEtBQXpDO0FBQ0E7QUFDUTtBQUNKLFNBVkcsRUFVRCxJQVZDLENBQVY7QUFXTTtBQUNELEtBbkJEO0FBcUJBQyxTQUFLLEVBQUUsZUFBUzNELE9BQVQsRUFBa0I7QUFDckJELFdBQUssQ0FBQ0MsT0FBRCxDQUFMO0FBQ0g7QUF2QkQsR0FBUDtBQXlCQSxDQWpLa0IsRUFBbkIsQyxDQW1LQTs7O0FBQ0EsSUFBSSxJQUFKLEVBQW1DO0FBQ2xDNEQsUUFBTSxDQUFDQyxPQUFQLEdBQWlCL0QsWUFBakI7QUFDQSIsImZpbGUiOiIuL3Jlc291cmNlcy9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvY2hhdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLy8gQ2xhc3MgZGVmaW5pdGlvblxyXG52YXIgS1RMYXlvdXRDaGF0ID0gZnVuY3Rpb24gKCkge1xyXG5cdC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcblx0dmFyIF9pbml0ID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuXHRcdHZhciBzY3JvbGxFbCA9IEtUVXRpbC5maW5kKGVsZW1lbnQsICcuc2Nyb2xsJyk7XHJcblx0XHR2YXIgY2FyZEJvZHlFbCA9IEtUVXRpbC5maW5kKGVsZW1lbnQsICcuY2FyZC1ib2R5Jyk7XHJcblx0XHR2YXIgY2FyZEhlYWRlckVsID0gS1RVdGlsLmZpbmQoZWxlbWVudCwgJy5jYXJkLWhlYWRlcicpO1xyXG5cdFx0dmFyIGNhcmRGb290ZXJFbCA9IEtUVXRpbC5maW5kKGVsZW1lbnQsICcuY2FyZC1mb290ZXInKTtcclxuXHJcblx0XHRpZiAoIXNjcm9sbEVsKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBpbml0aWFsaXplIHBlcmZlY3Qgc2Nyb2xsYmFyKHNlZTogIGh0dHBzOi8vZ2l0aHViLmNvbS91dGF0dGkvcGVyZmVjdC1zY3JvbGxiYXIpXHJcblx0XHRLVFV0aWwuc2Nyb2xsSW5pdChzY3JvbGxFbCwge1xyXG5cdFx0XHR3aW5kb3dTY3JvbGw6IGZhbHNlLCAvLyBhbGxvdyBicm93c2VyIHNjcm9sbCB3aGVuIHRoZSBzY3JvbGwgcmVhY2hlcyB0aGUgZW5kIG9mIHRoZSBzaWRlXHJcblx0XHRcdG1vYmlsZU5hdGl2ZVNjcm9sbDogdHJ1ZSwgIC8vIGVuYWJsZSBuYXRpdmUgc2Nyb2xsIGZvciBtb2JpbGVcclxuXHRcdFx0ZGVza3RvcE5hdGl2ZVNjcm9sbDogZmFsc2UsIC8vIGRpc2FibGUgbmF0aXZlIHNjcm9sbCBhbmQgdXNlIGN1c3RvbSBzY3JvbGwgZm9yIGRlc2t0b3BcclxuXHRcdFx0cmVzZXRIZWlnaHRPbkRlc3Ryb3k6IHRydWUsICAvLyByZXNldCBjc3MgaGVpZ2h0IG9uIHNjcm9sbCBmZWF0dXJlIGRlc3Ryb3llZFxyXG5cdFx0XHRoYW5kbGVXaW5kb3dSZXNpemU6IHRydWUsIC8vIHJlY2FsY3VsYXRlIGhpZ2h0IG9uIHdpbmRvdyByZXNpemVcclxuXHRcdFx0cmVtZW1iZXJQb3NpdGlvbjogdHJ1ZSwgLy8gcmVtZW1iZXIgc2Nyb2xsIHBvc2l0aW9uIGluIGNvb2tpZVxyXG5cdFx0XHRoZWlnaHQ6IGZ1bmN0aW9uKCkgeyAgLy8gY2FsY3VsYXRlIGhlaWdodFxyXG5cdFx0XHRcdHZhciBoZWlnaHQ7XHJcblxyXG5cdFx0XHRcdGlmIChLVFV0aWwuaXNCcmVha3BvaW50RG93bignbGcnKSkgeyAvLyBNb2JpbGUgbW9kZVxyXG5cdFx0XHRcdFx0cmV0dXJuIEtUVXRpbC5oYXNBdHRyKHNjcm9sbEVsLCAnZGF0YS1tb2JpbGUtaGVpZ2h0JykgPyBwYXJzZUludChLVFV0aWwuYXR0cihzY3JvbGxFbCwgJ2RhdGEtbW9iaWxlLWhlaWdodCcpKSA6IDQwMDtcclxuXHRcdFx0XHR9IGVsc2UgaWYgKEtUVXRpbC5pc0JyZWFrcG9pbnRVcCgnbGcnKSAmJiBLVFV0aWwuaGFzQXR0cihzY3JvbGxFbCwgJ2RhdGEtaGVpZ2h0JykpIHsgLy8gRGVza3RvcCBNb2RlXHJcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoS1RVdGlsLmF0dHIoc2Nyb2xsRWwsICdkYXRhLWhlaWdodCcpKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0aGVpZ2h0ID0gS1RMYXlvdXRDb250ZW50LmdldEhlaWdodCgpO1xyXG5cclxuXHRcdFx0XHRcdGlmIChzY3JvbGxFbCkge1xyXG5cdFx0XHRcdFx0XHRoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKHNjcm9sbEVsLCAnbWFyZ2luLXRvcCcpKSAtIHBhcnNlSW50KEtUVXRpbC5jc3Moc2Nyb2xsRWwsICdtYXJnaW4tYm90dG9tJykpO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGlmIChjYXJkSGVhZGVyRWwpIHtcclxuXHRcdFx0XHRcdFx0aGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjYXJkSGVhZGVyRWwsICdoZWlnaHQnKSk7XHJcblx0XHRcdFx0XHRcdGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoY2FyZEhlYWRlckVsLCAnbWFyZ2luLXRvcCcpKSAtIHBhcnNlSW50KEtUVXRpbC5jc3MoY2FyZEhlYWRlckVsLCAnbWFyZ2luLWJvdHRvbScpKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAoY2FyZEJvZHlFbCkge1xyXG5cdFx0XHRcdFx0XHRoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNhcmRCb2R5RWwsICdwYWRkaW5nLXRvcCcpKSAtIHBhcnNlSW50KEtUVXRpbC5jc3MoY2FyZEJvZHlFbCwgJ3BhZGRpbmctYm90dG9tJykpO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGlmIChjYXJkRm9vdGVyRWwpIHtcclxuXHRcdFx0XHRcdFx0aGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjYXJkRm9vdGVyRWwsICdoZWlnaHQnKSk7XHJcblx0XHRcdFx0XHRcdGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoY2FyZEZvb3RlckVsLCAnbWFyZ2luLXRvcCcpKSAtIHBhcnNlSW50KEtUVXRpbC5jc3MoY2FyZEZvb3RlckVsLCAnbWFyZ2luLWJvdHRvbScpKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFJlbW92ZSBhZGRpdGlvbmFsIHNwYWNlXHJcblx0XHRcdFx0aGVpZ2h0ID0gaGVpZ2h0IC0gMjtcclxuXHJcblx0XHRcdFx0cmV0dXJuIGhlaWdodDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gYXR0YWNoIGV2ZW50c1xyXG5cdFx0S1RVdGlsLm9uKGVsZW1lbnQsICcuY2FyZC1mb290ZXIgdGV4dGFyZWEnLCAna2V5ZG93bicsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0aWYgKGUua2V5Q29kZSA9PSAxMykge1xyXG5cdFx0XHRcdF9oYW5kZU1lc3NhZ2luZyhlbGVtZW50KTtcclxuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0S1RVdGlsLm9uKGVsZW1lbnQsICcuY2FyZC1mb290ZXIgLmNoYXQtc2VuZCcsICdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0X2hhbmRlTWVzc2FnaW5nKGVsZW1lbnQpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHR2YXIgX2hhbmRlTWVzc2FnaW5nID0gZnVuY3Rpb24oZWxlbWVudCkge1xyXG5cdFx0dmFyIG1lc3NhZ2VzRWwgPSBLVFV0aWwuZmluZChlbGVtZW50LCAnLm1lc3NhZ2VzJyk7XHJcblx0XHR2YXIgc2Nyb2xsRWwgPSBLVFV0aWwuZmluZChlbGVtZW50LCAnLnNjcm9sbCcpO1xyXG4gICAgICAgIHZhciB0ZXh0YXJlYSA9IEtUVXRpbC5maW5kKGVsZW1lbnQsICd0ZXh0YXJlYScpO1xyXG5cclxuICAgICAgICBpZiAodGV4dGFyZWEudmFsdWUubGVuZ3RoID09PSAwICkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuXHRcdHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKTtcclxuXHRcdEtUVXRpbC5hZGRDbGFzcyhub2RlLCAnZC1mbGV4IGZsZXgtY29sdW1uIG1iLTUgYWxpZ24taXRlbXMtZW5kJyk7XHJcblxyXG5cdFx0dmFyIGh0bWwgPSAnJztcclxuXHRcdGh0bWwgKz0gJzxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCI+JztcclxuXHRcdGh0bWwgKz0gJ1x0PGRpdj4nO1xyXG5cdFx0aHRtbCArPSAnXHRcdDxzcGFuIGNsYXNzPVwidGV4dC1tdXRlZCBmb250LXNpemUtc21cIj4yIEhvdXJzPC9zcGFuPic7XHJcblx0XHRodG1sICs9ICdcdFx0PGEgaHJlZj1cIiNcIiBjbGFzcz1cInRleHQtZGFyay03NSB0ZXh0LWhvdmVyLXByaW1hcnkgZm9udC13ZWlnaHQtYm9sZCBmb250LXNpemUtaDZcIj5Zb3U8L2E+JztcclxuXHRcdGh0bWwgKz0gJ1x0PC9kaXY+JztcclxuXHRcdGh0bWwgKz0gJ1x0PGRpdiBjbGFzcz1cInN5bWJvbCBzeW1ib2wtY2lyY2xlIHN5bWJvbC00MCBtbC0zXCI+JztcclxuXHRcdGh0bWwgKz0gJ1x0XHQ8aW1nIGFsdD1cIlBpY1wiIHNyYz1cImFzc2V0cy9tZWRpYS91c2Vycy8zMDBfMTIuanBnXCIvPic7XHJcblx0XHRodG1sICs9ICdcdDwvZGl2Pic7XHJcblx0XHRodG1sICs9ICc8L2Rpdj4nO1xyXG5cdFx0aHRtbCArPSAnPGRpdiBjbGFzcz1cIm10LTIgcm91bmRlZCBwLTUgYmctbGlnaHQtcHJpbWFyeSB0ZXh0LWRhcmstNTAgZm9udC13ZWlnaHQtYm9sZCBmb250LXNpemUtbGcgdGV4dC1yaWdodCBtYXgtdy00MDBweFwiPicgKyB0ZXh0YXJlYS52YWx1ZSArICc8L2Rpdj4nO1xyXG5cclxuXHRcdEtUVXRpbC5zZXRIVE1MKG5vZGUsIGh0bWwpO1xyXG5cdFx0bWVzc2FnZXNFbC5hcHBlbmRDaGlsZChub2RlKTtcclxuXHRcdHRleHRhcmVhLnZhbHVlID0gJyc7XHJcblx0XHRzY3JvbGxFbC5zY3JvbGxUb3AgPSBwYXJzZUludChLVFV0aWwuY3NzKG1lc3NhZ2VzRWwsICdoZWlnaHQnKSk7XHJcblxyXG5cdFx0dmFyIHBzO1xyXG5cdFx0aWYgKHBzID0gS1RVdGlsLmRhdGEoc2Nyb2xsRWwpLmdldCgncHMnKSkge1xyXG5cdFx0XHRwcy51cGRhdGUoKTtcclxuXHRcdH1cclxuXHJcblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIik7XHJcblx0XHRcdEtUVXRpbC5hZGRDbGFzcyhub2RlLCAnZC1mbGV4IGZsZXgtY29sdW1uIG1iLTUgYWxpZ24taXRlbXMtc3RhcnQnKTtcclxuXHJcblx0XHRcdHZhciBodG1sID0gJyc7XHJcblx0XHRcdGh0bWwgKz0gJzxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCI+JztcclxuXHRcdFx0aHRtbCArPSAnXHQ8ZGl2IGNsYXNzPVwic3ltYm9sIHN5bWJvbC1jaXJjbGUgc3ltYm9sLTQwIG1yLTNcIj4nO1xyXG5cdFx0XHRodG1sICs9ICdcdFx0PGltZyBhbHQ9XCJQaWNcIiBzcmM9XCJhc3NldHMvbWVkaWEvdXNlcnMvMzAwXzEyLmpwZ1wiLz4nO1xyXG5cdFx0XHRodG1sICs9ICdcdDwvZGl2Pic7XHJcblx0XHRcdGh0bWwgKz0gJ1x0PGRpdj4nO1xyXG5cdFx0XHRodG1sICs9ICdcdFx0PGEgaHJlZj1cIiNcIiBjbGFzcz1cInRleHQtZGFyay03NSB0ZXh0LWhvdmVyLXByaW1hcnkgZm9udC13ZWlnaHQtYm9sZCBmb250LXNpemUtaDZcIj5NYXR0IFBlYXJzPC9hPic7XHJcblx0XHRcdGh0bWwgKz0gJ1x0XHQ8c3BhbiBjbGFzcz1cInRleHQtbXV0ZWQgZm9udC1zaXplLXNtXCI+SnVzdCBub3c8L3NwYW4+JztcclxuXHRcdFx0aHRtbCArPSAnXHQ8L2Rpdj4nO1xyXG5cdFx0XHRodG1sICs9ICc8L2Rpdj4nO1xyXG5cdFx0XHRodG1sICs9ICc8ZGl2IGNsYXNzPVwibXQtMiByb3VuZGVkIHAtNSBiZy1saWdodC1zdWNjZXNzIHRleHQtZGFyay01MCBmb250LXdlaWdodC1ib2xkIGZvbnQtc2l6ZS1sZyB0ZXh0LWxlZnQgbWF4LXctNDAwcHhcIj4nO1xyXG5cdFx0XHRodG1sICs9ICdSaWdodCBiZWZvcmUgdmFjYXRpb24gc2Vhc29uIHdlIGhhdmUgdGhlIG5leHQgQmlnIERlYWwgZm9yIHlvdS4nO1xyXG5cdFx0XHRodG1sICs9ICc8L2Rpdj4nO1xyXG5cclxuXHRcdFx0S1RVdGlsLnNldEhUTUwobm9kZSwgaHRtbCk7XHJcblx0XHRcdG1lc3NhZ2VzRWwuYXBwZW5kQ2hpbGQobm9kZSk7XHJcblx0XHRcdHRleHRhcmVhLnZhbHVlID0gJyc7XHJcblx0XHRcdHNjcm9sbEVsLnNjcm9sbFRvcCA9IHBhcnNlSW50KEtUVXRpbC5jc3MobWVzc2FnZXNFbCwgJ2hlaWdodCcpKTtcclxuXHJcblx0XHRcdHZhciBwcztcclxuXHRcdFx0aWYgKHBzID0gS1RVdGlsLmRhdGEoc2Nyb2xsRWwpLmdldCgncHMnKSkge1xyXG5cdFx0XHRcdHBzLnVwZGF0ZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9LCAyMDAwKTtcclxuXHR9XHJcblxyXG5cdC8vIFB1YmxpYyBtZXRob2RzXHJcblx0cmV0dXJuIHtcclxuXHRcdGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcblx0XHRcdC8vIEluaXQgbW9kYWwgY2hhdCBleGFtcGxlXHJcblx0XHRcdF9pbml0KEtUVXRpbC5nZXRCeUlkKGlkKSk7XHJcblxyXG5cdFx0XHQvLyBUcmlnZ2VyIGNsaWNrIHRvIHNob3cgcG9wdXAgbW9kYWwgY2hhdCBvbiBwYWdlIGxvYWRcclxuXHRcdFx0aWYgKGVuY29kZVVSSSh3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUpID09ICdrZWVudGhlbWVzLmNvbScgfHwgZW5jb2RlVVJJKHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSkgPT0gJ3d3dy5rZWVudGhlbWVzLmNvbScpIHtcclxuXHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdFx0ICAgICAgICAgICAgaWYgKCFLVENvb2tpZS5nZXRDb29raWUoJ2t0X2FwcF9jaGF0X3Nob3duJykpIHtcclxuXHRcdCAgICAgICAgICAgICAgICB2YXIgZXhwaXJlcyA9IG5ldyBEYXRlKG5ldyBEYXRlKCkuZ2V0VGltZSgpICsgNjAgKiA2MCAqIDEwMDApOyAvLyBleHBpcmUgaW4gNjAgbWludXRlcyBmcm9tIG5vd1xyXG5cclxuXHRcdFx0XHRcdFx0S1RDb29raWUuc2V0Q29va2llKCdrdF9hcHBfY2hhdF9zaG93bicsIDEsIHsgZXhwaXJlczogZXhwaXJlcyB9KTtcclxuXHJcblx0XHRcdFx0XHRcdGlmIChLVFV0aWwuZ2V0QnlJZCgna3RfYXBwX2NoYXRfbGF1bmNoX2J0bicpKSB7XHJcblx0XHRcdFx0XHRcdFx0S1RVdGlsLmdldEJ5SWQoJ2t0X2FwcF9jaGF0X2xhdW5jaF9idG4nKS5jbGljaygpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHQgICAgICAgICAgICB9XHJcblx0XHQgICAgICAgIH0sIDIwMDApO1xyXG5cdCAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldHVwOiBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIF9pbml0KGVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuXHR9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dENoYXQ7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/chat.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/demo-panel.js":
/*!*************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/demo-panel.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutDemoPanel = function () {\n  // Private properties\n  var _element;\n\n  var _offcanvasObject; // Private functions\n\n\n  var _init = function _init() {\n    _offcanvasObject = new KTOffcanvas(_element, {\n      overlay: true,\n      baseClass: 'offcanvas',\n      placement: 'right',\n      closeBy: 'kt_demo_panel_close',\n      toggleBy: 'kt_demo_panel_toggle'\n    });\n    var header = KTUtil.find(_element, '.offcanvas-header');\n    var content = KTUtil.find(_element, '.offcanvas-content');\n    var wrapper = KTUtil.find(_element, '.offcanvas-wrapper');\n    var footer = KTUtil.find(_element, '.offcanvas-footer');\n    KTUtil.scrollInit(wrapper, {\n      disableForMobile: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        var height = parseInt(KTUtil.getViewPort().height);\n\n        if (header) {\n          height = height - parseInt(KTUtil.actualHeight(header));\n          height = height - parseInt(KTUtil.css(header, 'marginTop'));\n          height = height - parseInt(KTUtil.css(header, 'marginBottom'));\n        }\n\n        if (content) {\n          height = height - parseInt(KTUtil.css(content, 'marginTop'));\n          height = height - parseInt(KTUtil.css(content, 'marginBottom'));\n        }\n\n        if (wrapper) {\n          height = height - parseInt(KTUtil.css(wrapper, 'marginTop'));\n          height = height - parseInt(KTUtil.css(wrapper, 'marginBottom'));\n        }\n\n        if (footer) {\n          height = height - parseInt(KTUtil.actualHeight(footer));\n          height = height - parseInt(KTUtil.css(footer, 'marginTop'));\n          height = height - parseInt(KTUtil.css(footer, 'marginBottom'));\n        }\n\n        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));\n        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));\n        height = height - 2;\n        return height;\n      }\n    });\n\n    if (typeof offcanvas !== 'undefined' && offcanvas.length === 0) {\n      offcanvas.on('hide', function () {\n        var expires = new Date(new Date().getTime() + 60 * 60 * 1000); // expire in 60 minutes from now\n\n        KTCookie.setCookie('kt_demo_panel_shown', 1, {\n          expires: expires\n        });\n      });\n    }\n  };\n\n  var _remind = function _remind() {\n    if (!(encodeURI(window.location.hostname) == 'keenthemes.com' || encodeURI(window.location.hostname) == 'www.keenthemes.com')) {\n      return;\n    }\n\n    setTimeout(function () {\n      if (!KTCookie.getCookie('kt_demo_panel_shown')) {\n        var expires = new Date(new Date().getTime() + 15 * 60 * 1000); // expire in 15 minutes from now\n\n        KTCookie.setCookie('kt_demo_panel_shown', 1, {\n          expires: expires\n        });\n\n        if (typeof _offcanvasObject !== 'undefined') {\n          _offcanvasObject.show();\n        }\n      }\n    }, 4000);\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      } // Initialize\n\n\n      _init(); // Remind\n\n\n      _remind();\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutDemoPanel;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/demo-panel.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/examples.js":
/*!***********************************************************!*\
  !*** ./resources/metronic/js/layout/extended/examples.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutExamples = function () {\n  var initDefaultMode = function initDefaultMode(element) {\n    var elements = element;\n\n    if (typeof elements === 'undefined') {\n      elements = document.querySelectorAll('.example:not(.example-compact):not(.example-hover):not(.example-basic)');\n    }\n\n    if (elements && elements.length > 0) {\n      for (var i = 0; i < elements.length; ++i) {\n        var example = elements[i];\n        var copy = KTUtil.find(example, '.example-copy');\n\n        if (copy) {\n          var clipboard = new ClipboardJS(copy, {\n            target: function target(trigger) {\n              var example = trigger.closest('.example');\n              var el = KTUtil.find(example, '.example-code .tab-pane.active');\n\n              if (!el) {\n                el = KTUtil.find(example, '.example-code');\n              }\n\n              return el;\n            }\n          });\n          clipboard.on('success', function (e) {\n            KTUtil.addClass(e.trigger, 'example-copied');\n            e.clearSelection();\n            setTimeout(function () {\n              KTUtil.removeClass(e.trigger, 'example-copied');\n            }, 2000);\n          });\n        }\n      }\n    }\n  };\n\n  var initCompactMode = function initCompactMode(element) {\n    var example, code, toggle, copy, clipboard;\n    var elements = element;\n\n    if (typeof elements === 'undefined') {\n      var elements = document.querySelectorAll('.example.example-compact');\n    }\n\n    if (elements && elements.length > 0) {\n      for (var i = 0; i < elements.length; ++i) {\n        var example = elements[i];\n        var toggle = KTUtil.find(example, '.example-toggle');\n        var copy = KTUtil.find(example, '.example-copy'); // Handle toggle\n\n        KTUtil.addEvent(toggle, 'click', function () {\n          var example = this.closest('.example');\n          var code = KTUtil.find(example, '.example-code');\n          var the = this;\n\n          if (KTUtil.hasClass(this, 'example-toggled')) {\n            KTUtil.slideUp(code, 300, function () {\n              KTUtil.removeClass(the, 'example-toggled');\n              KTUtil.removeClass(code, 'example-code-on');\n              KTUtil.hide(code);\n            });\n          } else {\n            KTUtil.addClass(code, 'example-code-on');\n            KTUtil.addClass(this, 'example-toggled');\n            KTUtil.slideDown(code, 300, function () {\n              KTUtil.show(code);\n            });\n          }\n        }); // Handle copy\n\n        if (copy) {\n          var clipboard = new ClipboardJS(copy, {\n            target: function target(trigger) {\n              var example = trigger.closest('.example');\n              var el = KTUtil.find(example, '.example-code .tab-pane.active');\n\n              if (!el) {\n                el = KTUtil.find(example, '.example-code');\n              }\n\n              return el;\n            }\n          });\n          clipboard.on('success', function (e) {\n            KTUtil.addClass(e.trigger, 'example-copied');\n            e.clearSelection();\n            setTimeout(function () {\n              KTUtil.removeClass(e.trigger, 'example-copied');\n            }, 2000);\n          });\n        }\n      }\n    }\n  };\n\n  return {\n    init: function init(element, options) {\n      initDefaultMode(element);\n      initCompactMode(element);\n    }\n  };\n}(); // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTLayoutExamples;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/examples.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-actions.js":
/*!****************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-actions.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutQuickActions = function () {\n  // Private properties\n  var _element;\n\n  var _offcanvasObject; // Private functions\n\n\n  var _init = function _init() {\n    var header = KTUtil.find(_element, '.offcanvas-header');\n    var content = KTUtil.find(_element, '.offcanvas-content');\n    _offcanvasObject = new KTOffcanvas(_element, {\n      overlay: true,\n      baseClass: 'offcanvas',\n      placement: 'right',\n      closeBy: 'kt_quick_actions_close',\n      toggleBy: 'kt_quick_actions_toggle'\n    });\n    KTUtil.scrollInit(content, {\n      disableForMobile: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        var height = parseInt(KTUtil.getViewPort().height);\n\n        if (header) {\n          height = height - parseInt(KTUtil.actualHeight(header));\n          height = height - parseInt(KTUtil.css(header, 'marginTop'));\n          height = height - parseInt(KTUtil.css(header, 'marginBottom'));\n        }\n\n        if (content) {\n          height = height - parseInt(KTUtil.css(content, 'marginTop'));\n          height = height - parseInt(KTUtil.css(content, 'marginBottom'));\n        }\n\n        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));\n        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));\n        height = height - 2;\n        return height;\n      }\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      } // Initialize\n\n\n      _init();\n    },\n    getElement: function getElement() {\n      return _element;\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutQuickActions;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLWFjdGlvbnMuanM/NzFlNyJdLCJuYW1lcyI6WyJLVExheW91dFF1aWNrQWN0aW9ucyIsIl9lbGVtZW50IiwiX29mZmNhbnZhc09iamVjdCIsIl9pbml0IiwiaGVhZGVyIiwiS1RVdGlsIiwiZmluZCIsImNvbnRlbnQiLCJLVE9mZmNhbnZhcyIsIm92ZXJsYXkiLCJiYXNlQ2xhc3MiLCJwbGFjZW1lbnQiLCJjbG9zZUJ5IiwidG9nZ2xlQnkiLCJzY3JvbGxJbml0IiwiZGlzYWJsZUZvck1vYmlsZSIsInJlc2V0SGVpZ2h0T25EZXN0cm95IiwiaGFuZGxlV2luZG93UmVzaXplIiwiaGVpZ2h0IiwicGFyc2VJbnQiLCJnZXRWaWV3UG9ydCIsImFjdHVhbEhlaWdodCIsImNzcyIsImluaXQiLCJpZCIsImdldEJ5SWQiLCJnZXRFbGVtZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsb0JBQW9CLEdBQUcsWUFBVztBQUNsQztBQUNBLE1BQUlDLFFBQUo7O0FBQ0EsTUFBSUMsZ0JBQUosQ0FIa0MsQ0FLbEM7OztBQUNBLE1BQUlDLEtBQUssR0FBRyxTQUFSQSxLQUFRLEdBQVc7QUFDbkIsUUFBSUMsTUFBTSxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWUwsUUFBWixFQUFzQixtQkFBdEIsQ0FBYjtBQUNBLFFBQUlNLE9BQU8sR0FBR0YsTUFBTSxDQUFDQyxJQUFQLENBQVlMLFFBQVosRUFBc0Isb0JBQXRCLENBQWQ7QUFFQUMsb0JBQWdCLEdBQUcsSUFBSU0sV0FBSixDQUFnQlAsUUFBaEIsRUFBMEI7QUFDekNRLGFBQU8sRUFBRSxJQURnQztBQUV6Q0MsZUFBUyxFQUFFLFdBRjhCO0FBR3pDQyxlQUFTLEVBQUUsT0FIOEI7QUFJekNDLGFBQU8sRUFBRSx3QkFKZ0M7QUFLekNDLGNBQVEsRUFBRTtBQUwrQixLQUExQixDQUFuQjtBQVFBUixVQUFNLENBQUNTLFVBQVAsQ0FBa0JQLE9BQWxCLEVBQTJCO0FBQ3ZCUSxzQkFBZ0IsRUFBRSxJQURLO0FBRXZCQywwQkFBb0IsRUFBRSxJQUZDO0FBR3ZCQyx3QkFBa0IsRUFBRSxJQUhHO0FBSXZCQyxZQUFNLEVBQUUsa0JBQVc7QUFDZixZQUFJQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDZSxXQUFQLEdBQXFCRixNQUF0QixDQUFyQjs7QUFFQSxZQUFJZCxNQUFKLEVBQVk7QUFDUmMsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2dCLFlBQVAsQ0FBb0JqQixNQUFwQixDQUFELENBQTFCO0FBQ0FjLGdCQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDZCxNQUFNLENBQUNpQixHQUFQLENBQVdsQixNQUFYLEVBQW1CLFdBQW5CLENBQUQsQ0FBMUI7QUFDQWMsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQVAsQ0FBV2xCLE1BQVgsRUFBbUIsY0FBbkIsQ0FBRCxDQUExQjtBQUNIOztBQUVELFlBQUlHLE9BQUosRUFBYTtBQUNUVyxnQkFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDaUIsR0FBUCxDQUFXZixPQUFYLEVBQW9CLFdBQXBCLENBQUQsQ0FBMUI7QUFDQVcsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQVAsQ0FBV2YsT0FBWCxFQUFvQixjQUFwQixDQUFELENBQTFCO0FBQ0g7O0FBRURXLGNBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQVAsQ0FBV3JCLFFBQVgsRUFBcUIsWUFBckIsQ0FBRCxDQUExQjtBQUNBaUIsY0FBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDaUIsR0FBUCxDQUFXckIsUUFBWCxFQUFxQixlQUFyQixDQUFELENBQTFCO0FBRUFpQixjQUFNLEdBQUdBLE1BQU0sR0FBRyxDQUFsQjtBQUVBLGVBQU9BLE1BQVA7QUFDSDtBQXhCc0IsS0FBM0I7QUEwQkgsR0F0Q0QsQ0FOa0MsQ0E4Q2xDOzs7QUFDQSxTQUFPO0FBQ0hLLFFBQUksRUFBRSxjQUFTQyxFQUFULEVBQWE7QUFDZnZCLGNBQVEsR0FBR0ksTUFBTSxDQUFDb0IsT0FBUCxDQUFlRCxFQUFmLENBQVg7O0FBRUEsVUFBSSxDQUFDdkIsUUFBTCxFQUFlO0FBQ1g7QUFDSCxPQUxjLENBT2Y7OztBQUNBRSxXQUFLO0FBQ1IsS0FWRTtBQVlIdUIsY0FBVSxFQUFFLHNCQUFXO0FBQ25CLGFBQU96QixRQUFQO0FBQ0g7QUFkRSxHQUFQO0FBZ0JILENBL0QwQixFQUEzQixDLENBaUVBOzs7QUFDQSxJQUFJLElBQUosRUFBbUM7QUFDbEMwQixRQUFNLENBQUNDLE9BQVAsR0FBaUI1QixvQkFBakI7QUFDQSIsImZpbGUiOiIuL3Jlc291cmNlcy9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvcXVpY2stYWN0aW9ucy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUTGF5b3V0UXVpY2tBY3Rpb25zID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuICAgIHZhciBfZWxlbWVudDtcclxuICAgIHZhciBfb2ZmY2FudmFzT2JqZWN0O1xyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcbiAgICB2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaGVhZGVyID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWhlYWRlcicpO1xyXG4gICAgICAgIHZhciBjb250ZW50ID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWNvbnRlbnQnKTtcclxuXHJcbiAgICAgICAgX29mZmNhbnZhc09iamVjdCA9IG5ldyBLVE9mZmNhbnZhcyhfZWxlbWVudCwge1xyXG4gICAgICAgICAgICBvdmVybGF5OiB0cnVlLFxyXG4gICAgICAgICAgICBiYXNlQ2xhc3M6ICdvZmZjYW52YXMnLFxyXG4gICAgICAgICAgICBwbGFjZW1lbnQ6ICdyaWdodCcsXHJcbiAgICAgICAgICAgIGNsb3NlQnk6ICdrdF9xdWlja19hY3Rpb25zX2Nsb3NlJyxcclxuICAgICAgICAgICAgdG9nZ2xlQnk6ICdrdF9xdWlja19hY3Rpb25zX3RvZ2dsZSdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgS1RVdGlsLnNjcm9sbEluaXQoY29udGVudCwge1xyXG4gICAgICAgICAgICBkaXNhYmxlRm9yTW9iaWxlOiB0cnVlLFxyXG4gICAgICAgICAgICByZXNldEhlaWdodE9uRGVzdHJveTogdHJ1ZSxcclxuICAgICAgICAgICAgaGFuZGxlV2luZG93UmVzaXplOiB0cnVlLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5nZXRWaWV3UG9ydCgpLmhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGhlYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5hY3R1YWxIZWlnaHQoaGVhZGVyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Cb3R0b20nKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNvbnRlbnQsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjb250ZW50LCAnbWFyZ2luQm90dG9tJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nVG9wJykpO1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ3BhZGRpbmdCb3R0b20nKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gMjtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemVcclxuICAgICAgICAgICAgX2luaXQoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9lbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0UXVpY2tBY3Rpb25zO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/quick-actions.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-cart.js":
/*!*************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-cart.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutQuickCartPanel = function () {\n  // Private properties\n  var _element;\n\n  var _offcanvasObject; // Private functions\n\n\n  var _init = function _init() {\n    _offcanvasObject = new KTOffcanvas(_element, {\n      overlay: true,\n      baseClass: 'offcanvas',\n      placement: 'right',\n      closeBy: 'kt_quick_cart_close',\n      toggleBy: 'kt_quick_cart_toggle'\n    });\n    var header = KTUtil.find(_element, '.offcanvas-header');\n    var content = KTUtil.find(_element, '.offcanvas-content');\n    var wrapper = KTUtil.find(_element, '.offcanvas-wrapper');\n    var footer = KTUtil.find(_element, '.offcanvas-footer');\n    KTUtil.scrollInit(wrapper, {\n      disableForMobile: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        var height = parseInt(KTUtil.getViewPort().height);\n\n        if (header) {\n          height = height - parseInt(KTUtil.actualHeight(header));\n          height = height - parseInt(KTUtil.css(header, 'marginTop'));\n          height = height - parseInt(KTUtil.css(header, 'marginBottom'));\n        }\n\n        if (content) {\n          height = height - parseInt(KTUtil.css(content, 'marginTop'));\n          height = height - parseInt(KTUtil.css(content, 'marginBottom'));\n        }\n\n        if (wrapper) {\n          height = height - parseInt(KTUtil.css(wrapper, 'marginTop'));\n          height = height - parseInt(KTUtil.css(wrapper, 'marginBottom'));\n        }\n\n        if (footer) {\n          height = height - parseInt(KTUtil.actualHeight(footer));\n          height = height - parseInt(KTUtil.css(footer, 'marginTop'));\n          height = height - parseInt(KTUtil.css(footer, 'marginBottom'));\n        }\n\n        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));\n        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));\n        height = height - 2;\n        return height;\n      }\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      } // Initialize\n\n\n      _init();\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutQuickCartPanel;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLWNhcnQuanM/ZGMwMCJdLCJuYW1lcyI6WyJLVExheW91dFF1aWNrQ2FydFBhbmVsIiwiX2VsZW1lbnQiLCJfb2ZmY2FudmFzT2JqZWN0IiwiX2luaXQiLCJLVE9mZmNhbnZhcyIsIm92ZXJsYXkiLCJiYXNlQ2xhc3MiLCJwbGFjZW1lbnQiLCJjbG9zZUJ5IiwidG9nZ2xlQnkiLCJoZWFkZXIiLCJLVFV0aWwiLCJmaW5kIiwiY29udGVudCIsIndyYXBwZXIiLCJmb290ZXIiLCJzY3JvbGxJbml0IiwiZGlzYWJsZUZvck1vYmlsZSIsInJlc2V0SGVpZ2h0T25EZXN0cm95IiwiaGFuZGxlV2luZG93UmVzaXplIiwiaGVpZ2h0IiwicGFyc2VJbnQiLCJnZXRWaWV3UG9ydCIsImFjdHVhbEhlaWdodCIsImNzcyIsImluaXQiLCJpZCIsImdldEJ5SWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxzQkFBc0IsR0FBRyxZQUFXO0FBQ3BDO0FBQ0EsTUFBSUMsUUFBSjs7QUFDQSxNQUFJQyxnQkFBSixDQUhvQyxDQUtwQzs7O0FBQ0EsTUFBSUMsS0FBSyxHQUFHLFNBQVJBLEtBQVEsR0FBVztBQUNuQkQsb0JBQWdCLEdBQUcsSUFBSUUsV0FBSixDQUFnQkgsUUFBaEIsRUFBMEI7QUFDekNJLGFBQU8sRUFBRSxJQURnQztBQUV6Q0MsZUFBUyxFQUFFLFdBRjhCO0FBR3pDQyxlQUFTLEVBQUUsT0FIOEI7QUFJekNDLGFBQU8sRUFBRSxxQkFKZ0M7QUFLekNDLGNBQVEsRUFBRTtBQUwrQixLQUExQixDQUFuQjtBQVFBLFFBQUlDLE1BQU0sR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlYLFFBQVosRUFBc0IsbUJBQXRCLENBQWI7QUFDQSxRQUFJWSxPQUFPLEdBQUdGLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZWCxRQUFaLEVBQXNC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N0IsQyxDQTBFQTs7O0FBQ0EsSUFBSSxJQUFKLEVBQW1DO0FBQ2xDeUIsUUFBTSxDQUFDQyxPQUFQLEdBQWlCN0Isc0JBQWpCO0FBQ0EiLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLWNhcnQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dFF1aWNrQ2FydFBhbmVsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuICAgIHZhciBfZWxlbWVudDtcclxuICAgIHZhciBfb2ZmY2FudmFzT2JqZWN0O1xyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcbiAgICB2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBfb2ZmY2FudmFzT2JqZWN0ID0gbmV3IEtUT2ZmY2FudmFzKF9lbGVtZW50LCB7XHJcbiAgICAgICAgICAgIG92ZXJsYXk6IHRydWUsXHJcbiAgICAgICAgICAgIGJhc2VDbGFzczogJ29mZmNhbnZhcycsXHJcbiAgICAgICAgICAgIHBsYWNlbWVudDogJ3JpZ2h0JyxcclxuICAgICAgICAgICAgY2xvc2VCeTogJ2t0X3F1aWNrX2NhcnRfY2xvc2UnLFxyXG4gICAgICAgICAgICB0b2dnbGVCeTogJ2t0X3F1aWNrX2NhcnRfdG9nZ2xlJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2YXIgaGVhZGVyID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWhlYWRlcicpO1xyXG4gICAgICAgIHZhciBjb250ZW50ID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWNvbnRlbnQnKTtcclxuICAgICAgICB2YXIgd3JhcHBlciA9IEtUVXRpbC5maW5kKF9lbGVtZW50LCAnLm9mZmNhbnZhcy13cmFwcGVyJyk7XHJcbiAgICAgICAgdmFyIGZvb3RlciA9IEtUVXRpbC5maW5kKF9lbGVtZW50LCAnLm9mZmNhbnZhcy1mb290ZXInKTtcclxuXHJcbiAgICAgICAgS1RVdGlsLnNjcm9sbEluaXQod3JhcHBlciwge1xyXG4gICAgICAgICAgICBkaXNhYmxlRm9yTW9iaWxlOiB0cnVlLFxyXG4gICAgICAgICAgICByZXNldEhlaWdodE9uRGVzdHJveTogdHJ1ZSxcclxuICAgICAgICAgICAgaGFuZGxlV2luZG93UmVzaXplOiB0cnVlLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5nZXRWaWV3UG9ydCgpLmhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGhlYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5hY3R1YWxIZWlnaHQoaGVhZGVyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Cb3R0b20nKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNvbnRlbnQsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjb250ZW50LCAnbWFyZ2luQm90dG9tJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh3cmFwcGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyh3cmFwcGVyLCAnbWFyZ2luVG9wJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3Mod3JhcHBlciwgJ21hcmdpbkJvdHRvbScpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZm9vdGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChmb290ZXIpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGZvb3RlciwgJ21hcmdpblRvcCcpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGZvb3RlciwgJ21hcmdpbkJvdHRvbScpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKF9lbGVtZW50LCAncGFkZGluZ1RvcCcpKTtcclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nQm90dG9tJykpO1xyXG5cclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplXHJcbiAgICAgICAgICAgIF9pbml0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRRdWlja0NhcnRQYW5lbDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/quick-cart.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-notifications.js":
/*!**********************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-notifications.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutQuickNotifications = function () {\n  // Private properties\n  var _element;\n\n  var _offcanvasObject; // Private functions\n\n\n  var _init = function _init() {\n    var header = KTUtil.find(_element, '.offcanvas-header');\n    var content = KTUtil.find(_element, '.offcanvas-content');\n    _offcanvasObject = new KTOffcanvas(_element, {\n      overlay: true,\n      baseClass: 'offcanvas',\n      placement: 'right',\n      closeBy: 'kt_quick_notifications_close',\n      toggleBy: 'kt_quick_notifications_toggle'\n    });\n    KTUtil.scrollInit(content, {\n      disableForMobile: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        var height = parseInt(KTUtil.getViewPort().height);\n\n        if (header) {\n          height = height - parseInt(KTUtil.actualHeight(header));\n          height = height - parseInt(KTUtil.css(header, 'marginTop'));\n          height = height - parseInt(KTUtil.css(header, 'marginBottom'));\n        }\n\n        if (content) {\n          height = height - parseInt(KTUtil.css(content, 'marginTop'));\n          height = height - parseInt(KTUtil.css(content, 'marginBottom'));\n        }\n\n        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));\n        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));\n        height = height - 2;\n        return height;\n      }\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      } // Initialize\n\n\n      _init();\n    },\n    getElement: function getElement() {\n      return _element;\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutQuickNotifications;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLW5vdGlmaWNhdGlvbnMuanM/M2FhMyJdLCJuYW1lcyI6WyJLVExheW91dFF1aWNrTm90aWZpY2F0aW9ucyIsIl9lbGVtZW50IiwiX29mZmNhbnZhc09iamVjdCIsIl9pbml0IiwiaGVhZGVyIiwiS1RVdGlsIiwiZmluZCIsImNvbnRlbnQiLCJLVE9mZmNhbnZhcyIsIm92ZXJsYXkiLCJiYXNlQ2xhc3MiLCJwbGFjZW1lbnQiLCJjbG9zZUJ5IiwidG9nZ2xlQnkiLCJzY3JvbGxJbml0IiwiZGlzYWJsZUZvck1vYmlsZSIsInJlc2V0SGVpZ2h0T25EZXN0cm95IiwiaGFuZGxlV2luZG93UmVzaXplIiwiaGVpZ2h0IiwicGFyc2VJbnQiLCJnZXRWaWV3UG9ydCIsImFjdHVhbEhlaWdodCIsImNzcyIsImluaXQiLCJpZCIsImdldEJ5SWQiLCJnZXRFbGVtZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsMEJBQTBCLEdBQUcsWUFBVztBQUN4QztBQUNBLE1BQUlDLFFBQUo7O0FBQ0EsTUFBSUMsZ0JBQUosQ0FId0MsQ0FLeEM7OztBQUNBLE1BQUlDLEtBQUssR0FBRyxTQUFSQSxLQUFRLEdBQVc7QUFDbkIsUUFBSUMsTUFBTSxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWUwsUUFBWixFQUFzQixtQkFBdEIsQ0FBYjtBQUNBLFFBQUlNLE9BQU8sR0FBR0YsTUFBTSxDQUFDQyxJQUFQLENBQVlMLFFBQVosRUFBc0Isb0JBQXRCLENBQWQ7QUFFQUMsb0JBQWdCLEdBQUcsSUFBSU0sV0FBSixDQUFnQlAsUUFBaEIsRUFBMEI7QUFDekNRLGFBQU8sRUFBRSxJQURnQztBQUV6Q0MsZUFBUyxFQUFFLFdBRjhCO0FBR3pDQyxlQUFTLEVBQUUsT0FIOEI7QUFJekNDLGFBQU8sRUFBRSw4QkFKZ0M7QUFLekNDLGNBQVEsRUFBRTtBQUwrQixLQUExQixDQUFuQjtBQVFBUixVQUFNLENBQUNTLFVBQVAsQ0FBa0JQLE9BQWxCLEVBQTJCO0FBQ3ZCUSxzQkFBZ0IsRUFBRSxJQURLO0FBRXZCQywwQkFBb0IsRUFBRSxJQUZDO0FBR3ZCQyx3QkFBa0IsRUFBRSxJQUhHO0FBSXZCQyxZQUFNLEVBQUUsa0JBQVc7QUFDZixZQUFJQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDZSxXQUFQLEdBQXFCRixNQUF0QixDQUFyQjs7QUFFQSxZQUFJZCxNQUFKLEVBQVk7QUFDUmMsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2dCLFlBQVAsQ0FBb0JqQixNQUFwQixDQUFELENBQTFCO0FBQ0FjLGdCQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDZCxNQUFNLENBQUNpQixHQUFQLENBQVdsQixNQUFYLEVBQW1CLFdBQW5CLENBQUQsQ0FBMUI7QUFDQWMsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQVAsQ0FBV2xCLE1BQVgsRUFBbUIsY0FBbkIsQ0FBRCxDQUExQjtBQUNIOztBQUVELFlBQUlHLE9BQUosRUFBYTtBQUNUVyxnQkFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDaUIsR0FBUCxDQUFXZixPQUFYLEVBQW9CLFdBQXBCLENBQUQsQ0FBMUI7QUFDQVcsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQVAsQ0FBV2YsT0FBWCxFQUFvQixjQUFwQixDQUFELENBQTFCO0FBQ0g7O0FBRURXLGNBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQVAsQ0FBV3JCLFFBQVgsRUFBcUIsWUFBckIsQ0FBRCxDQUExQjtBQUNBaUIsY0FBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDaUIsR0FBUCxDQUFXckIsUUFBWCxFQUFxQixlQUFyQixDQUFELENBQTFCO0FBRUFpQixjQUFNLEdBQUdBLE1BQU0sR0FBRyxDQUFsQjtBQUVBLGVBQU9BLE1BQVA7QUFDSDtBQXhCc0IsS0FBM0I7QUEwQkgsR0F0Q0QsQ0FOd0MsQ0E4Q3hDOzs7QUFDQSxTQUFPO0FBQ0hLLFFBQUksRUFBRSxjQUFTQyxFQUFULEVBQWE7QUFDZnZCLGNBQVEsR0FBR0ksTUFBTSxDQUFDb0IsT0FBUCxDQUFlRCxFQUFmLENBQVg7O0FBRUEsVUFBSSxDQUFDdkIsUUFBTCxFQUFlO0FBQ1g7QUFDSCxPQUxjLENBT2Y7OztBQUNBRSxXQUFLO0FBQ1IsS0FWRTtBQVlIdUIsY0FBVSxFQUFFLHNCQUFXO0FBQ25CLGFBQU96QixRQUFQO0FBQ0g7QUFkRSxHQUFQO0FBZ0JILENBL0RnQyxFQUFqQyxDLENBaUVBOzs7QUFDQSxJQUFJLElBQUosRUFBbUM7QUFDbEMwQixRQUFNLENBQUNDLE9BQVAsR0FBaUI1QiwwQkFBakI7QUFDQSIsImZpbGUiOiIuL3Jlc291cmNlcy9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvcXVpY2stbm90aWZpY2F0aW9ucy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUTGF5b3V0UXVpY2tOb3RpZmljYXRpb25zID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuICAgIHZhciBfZWxlbWVudDtcclxuICAgIHZhciBfb2ZmY2FudmFzT2JqZWN0O1xyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcbiAgICB2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaGVhZGVyID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWhlYWRlcicpO1xyXG4gICAgICAgIHZhciBjb250ZW50ID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWNvbnRlbnQnKTtcclxuXHJcbiAgICAgICAgX29mZmNhbnZhc09iamVjdCA9IG5ldyBLVE9mZmNhbnZhcyhfZWxlbWVudCwge1xyXG4gICAgICAgICAgICBvdmVybGF5OiB0cnVlLFxyXG4gICAgICAgICAgICBiYXNlQ2xhc3M6ICdvZmZjYW52YXMnLFxyXG4gICAgICAgICAgICBwbGFjZW1lbnQ6ICdyaWdodCcsXHJcbiAgICAgICAgICAgIGNsb3NlQnk6ICdrdF9xdWlja19ub3RpZmljYXRpb25zX2Nsb3NlJyxcclxuICAgICAgICAgICAgdG9nZ2xlQnk6ICdrdF9xdWlja19ub3RpZmljYXRpb25zX3RvZ2dsZSdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgS1RVdGlsLnNjcm9sbEluaXQoY29udGVudCwge1xyXG4gICAgICAgICAgICBkaXNhYmxlRm9yTW9iaWxlOiB0cnVlLFxyXG4gICAgICAgICAgICByZXNldEhlaWdodE9uRGVzdHJveTogdHJ1ZSxcclxuICAgICAgICAgICAgaGFuZGxlV2luZG93UmVzaXplOiB0cnVlLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5nZXRWaWV3UG9ydCgpLmhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGhlYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5hY3R1YWxIZWlnaHQoaGVhZGVyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Cb3R0b20nKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNvbnRlbnQsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjb250ZW50LCAnbWFyZ2luQm90dG9tJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nVG9wJykpO1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ3BhZGRpbmdCb3R0b20nKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gMjtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemVcclxuICAgICAgICAgICAgX2luaXQoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9lbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0UXVpY2tOb3RpZmljYXRpb25zO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/quick-notifications.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-panel.js":
/*!**************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-panel.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutQuickPanel = function () {\n  // Private properties\n  var _element;\n\n  var _offcanvasObject;\n\n  var _notificationsElement;\n\n  var _logsElement;\n\n  var _settingsElement; // Private functions\n\n\n  var _getContentHeight = function _getContentHeight() {\n    var height;\n    var header = KTUtil.find(_element, '.offcanvas-header');\n    var content = KTUtil.find(_element, '.offcanvas-content');\n    var height = parseInt(KTUtil.getViewPort().height);\n\n    if (header) {\n      height = height - parseInt(KTUtil.actualHeight(header));\n      height = height - parseInt(KTUtil.css(header, 'marginTop'));\n      height = height - parseInt(KTUtil.css(header, 'marginBottom'));\n    }\n\n    if (content) {\n      height = height - parseInt(KTUtil.css(content, 'marginTop'));\n      height = height - parseInt(KTUtil.css(content, 'marginBottom'));\n    }\n\n    height = height - parseInt(KTUtil.css(_element, 'paddingTop'));\n    height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));\n    height = height - 2;\n    return height;\n  };\n\n  var _init = function _init() {\n    _offcanvasObject = new KTOffcanvas(_element, {\n      overlay: true,\n      baseClass: 'offcanvas',\n      placement: 'right',\n      closeBy: 'kt_quick_panel_close',\n      toggleBy: 'kt_quick_panel_toggle'\n    });\n  };\n\n  var _initNotifications = function _initNotifications() {\n    KTUtil.scrollInit(_notificationsElement, {\n      mobileNativeScroll: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        return _getContentHeight();\n      }\n    });\n  };\n\n  var _initLogs = function _initLogs() {\n    KTUtil.scrollInit(_logsElement, {\n      mobileNativeScroll: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        return _getContentHeight();\n      }\n    });\n  };\n\n  var _initSettings = function _initSettings() {\n    KTUtil.scrollInit(_settingsElement, {\n      mobileNativeScroll: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        return _getContentHeight();\n      }\n    });\n  };\n\n  var _updateScrollbars = function _updateScrollbars() {\n    $(_element).find('a[data-toggle=\"tab\"]').on('shown.bs.tab', function (e) {\n      KTUtil.scrollUpdate(_notificationsElement);\n      KTUtil.scrollUpdate(_logsElement);\n      KTUtil.scrollUpdate(_settingsElement);\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n      _notificationsElement = KTUtil.getById('kt_quick_panel_notifications');\n      _logsElement = KTUtil.getById('kt_quick_panel_logs');\n      _settingsElement = KTUtil.getById('kt_quick_panel_settings');\n\n      _init();\n\n      _initNotifications();\n\n      _initLogs();\n\n      _initSettings();\n\n      _updateScrollbars();\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutQuickPanel;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/quick-panel.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-search.js":
/*!***************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-search.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutQuickSearch = function () {\n  // Private properties\n  var _element;\n\n  var _offcanvasObject; // Private functions\n\n\n  var _init = function _init() {\n    var header = KTUtil.find(_element, '.offcanvas-header');\n    var content = KTUtil.find(_element, '.offcanvas-content');\n    var form = KTUtil.find(_element, '.quick-search-form');\n    var results = KTUtil.find(_element, '.quick-search-wrapper');\n    _offcanvasObject = new KTOffcanvas(_element, {\n      overlay: true,\n      baseClass: 'offcanvas',\n      placement: 'right',\n      closeBy: 'kt_quick_search_close',\n      toggleBy: 'kt_quick_search_toggle'\n    });\n    KTUtil.scrollInit(results, {\n      disableForMobile: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        var height = parseInt(KTUtil.getViewPort().height);\n\n        if (header) {\n          height = height - parseInt(KTUtil.actualHeight(header));\n          height = height - parseInt(KTUtil.css(header, 'marginTop'));\n          height = height - parseInt(KTUtil.css(header, 'marginBottom'));\n        }\n\n        if (content) {\n          height = height - parseInt(KTUtil.css(content, 'marginTop'));\n          height = height - parseInt(KTUtil.css(content, 'marginBottom'));\n        }\n\n        if (results) {\n          height = height - parseInt(KTUtil.actualHeight(form));\n          height = height - parseInt(KTUtil.css(form, 'marginTop'));\n          height = height - parseInt(KTUtil.css(form, 'marginBottom'));\n          height = height - parseInt(KTUtil.css(results, 'marginTop'));\n          height = height - parseInt(KTUtil.css(results, 'marginBottom'));\n        }\n\n        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));\n        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));\n        height = height - 2;\n        return height;\n      }\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      } // Initialize\n\n\n      _init();\n    },\n    getElement: function getElement() {\n      return _element;\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutQuickSearch;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLXNlYXJjaC5qcz8xYzdlIl0sIm5hbWVzIjpbIktUTGF5b3V0UXVpY2tTZWFyY2giLCJfZWxlbWVudCIsIl9vZmZjYW52YXNPYmplY3QiLCJfaW5pdCIsImhlYWRlciIsIktUVXRpbCIsImZpbmQiLCJjb250ZW50IiwiZm9ybSIsInJlc3VsdHMiLCJLVE9mZmNhbnZhcyIsIm92ZXJsYXkiLCJiYXNlQ2xhc3MiLCJwbGFjZW1lbnQiLCJjbG9zZUJ5IiwidG9nZ2xlQnkiLCJzY3JvbGxJbml0IiwiZGlzYWJsZUZvck1vYmlsZSIsInJlc2V0SGVpZ2h0T25EZXN0cm95IiwiaGFuZGxlV2luZG93UmVzaXplIiwiaGVpZ2h0IiwicGFyc2VJbnQiLCJnZXRWaWV3UG9ydCIsImFjdHVhbEhlaWdodCIsImNzcyIsImluaXQiLCJpZCIsImdldEJ5SWQiLCJnZXRFbGVtZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsbUJBQW1CLEdBQUcsWUFBVztBQUNqQztBQUNBLE1BQUlDLFFBQUo7O0FBQ0EsTUFBSUMsZ0JBQUosQ0FIaUMsQ0FLakM7OztBQUNBLE1BQUlDLEtBQUssR0FBRyxTQUFSQSxLQUFRLEdBQVc7QUFDbkIsUUFBSUMsTUFBTSxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWUwsUUFBWixFQUFzQixtQkFBdEIsQ0FBYjtBQUNBLFFBQUlNLE9BQU8sR0FBR0YsTUFBTSxDQUFDQyxJQUFQLENBQVlMLFFBQVosRUFBc0Isb0JBQXRCLENBQWQ7QUFDQSxRQUFJTyxJQUFJLEdBQUdILE1BQU0sQ0FBQ0MsSUFBUCxDQUFZTCxRQUFaLEVBQXNCLG9CQUF0QixDQUFYO0FBQ0EsUUFBSVEsT0FBTyxHQUFHSixNQUFNLENBQUNDLElBQVAsQ0FBWUwsUUFBWixFQUFzQix1QkFBdEIsQ0FBZDtBQUVBQyxvQkFBZ0IsR0FBRyxJ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QUFZSHlCLGNBQVUsRUFBRSxzQkFBVztBQUNuQixhQUFPM0IsUUFBUDtBQUNIO0FBZEUsR0FBUDtBQWdCSCxDQTFFeUIsRUFBMUIsQyxDQTRFQTs7O0FBQ0EsSUFBSSxJQUFKLEVBQW1DO0FBQ2xDNEIsUUFBTSxDQUFDQyxPQUFQLEdBQWlCOUIsbUJBQWpCO0FBQ0EiLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLXNlYXJjaC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUTGF5b3V0UXVpY2tTZWFyY2ggPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgdmFyIF9lbGVtZW50O1xyXG4gICAgdmFyIF9vZmZjYW52YXNPYmplY3Q7XHJcblxyXG4gICAgLy8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuICAgIHZhciBfaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBoZWFkZXIgPSBLVFV0aWwuZmluZChfZWxlbWVudCwgJy5vZmZjYW52YXMtaGVhZGVyJyk7XHJcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBLVFV0aWwuZmluZChfZWxlbWVudCwgJy5vZmZjYW52YXMtY29udGVudCcpO1xyXG4gICAgICAgIHZhciBmb3JtID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcucXVpY2stc2VhcmNoLWZvcm0nKTtcclxuICAgICAgICB2YXIgcmVzdWx0cyA9IEtUVXRpbC5maW5kKF9lbGVtZW50LCAnLnF1aWNrLXNlYXJjaC13cmFwcGVyJyk7XHJcblxyXG4gICAgICAgIF9vZmZjYW52YXNPYmplY3QgPSBuZXcgS1RPZmZjYW52YXMoX2VsZW1lbnQsIHtcclxuICAgICAgICAgICAgb3ZlcmxheTogdHJ1ZSxcclxuICAgICAgICAgICAgYmFzZUNsYXNzOiAnb2ZmY2FudmFzJyxcclxuICAgICAgICAgICAgcGxhY2VtZW50OiAncmlnaHQnLFxyXG4gICAgICAgICAgICBjbG9zZUJ5OiAna3RfcXVpY2tfc2VhcmNoX2Nsb3NlJyxcclxuICAgICAgICAgICAgdG9nZ2xlQnk6ICdrdF9xdWlja19zZWFyY2hfdG9nZ2xlJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBLVFV0aWwuc2Nyb2xsSW5pdChyZXN1bHRzLCB7XHJcbiAgICAgICAgICAgIGRpc2FibGVGb3JNb2JpbGU6IHRydWUsXHJcbiAgICAgICAgICAgIHJlc2V0SGVpZ2h0T25EZXN0cm95OiB0cnVlLFxyXG4gICAgICAgICAgICBoYW5kbGVXaW5kb3dSZXNpemU6IHRydWUsXHJcbiAgICAgICAgICAgIGhlaWdodDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmdldFZpZXdQb3J0KCkuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChoZWFkZXIpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGhlYWRlciwgJ21hcmdpblRvcCcpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGhlYWRlciwgJ21hcmdpbkJvdHRvbScpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoY29udGVudCwgJ21hcmdpblRvcCcpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNvbnRlbnQsICdtYXJnaW5Cb3R0b20nKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuYWN0dWFsSGVpZ2h0KGZvcm0pKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGZvcm0sICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhmb3JtLCAnbWFyZ2luQm90dG9tJykpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKHJlc3VsdHMsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhyZXN1bHRzLCAnbWFyZ2luQm90dG9tJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nVG9wJykpO1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ3BhZGRpbmdCb3R0b20nKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gMjtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemVcclxuICAgICAgICAgICAgX2luaXQoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9lbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0UXVpY2tTZWFyY2g7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/quick-search.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-user.js":
/*!*************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-user.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutQuickUser = function () {\n  // Private properties\n  var _element;\n\n  var _offcanvasObject; // Private functions\n\n\n  var _init = function _init() {\n    var header = KTUtil.find(_element, '.offcanvas-header');\n    var content = KTUtil.find(_element, '.offcanvas-content');\n    _offcanvasObject = new KTOffcanvas(_element, {\n      overlay: true,\n      baseClass: 'offcanvas',\n      placement: 'right',\n      closeBy: 'kt_quick_user_close',\n      toggleBy: 'kt_quick_user_toggle'\n    });\n    KTUtil.scrollInit(content, {\n      disableForMobile: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        var height = parseInt(KTUtil.getViewPort().height);\n\n        if (header) {\n          height = height - parseInt(KTUtil.actualHeight(header));\n          height = height - parseInt(KTUtil.css(header, 'marginTop'));\n          height = height - parseInt(KTUtil.css(header, 'marginBottom'));\n        }\n\n        if (content) {\n          height = height - parseInt(KTUtil.css(content, 'marginTop'));\n          height = height - parseInt(KTUtil.css(content, 'marginBottom'));\n        }\n\n        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));\n        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));\n        height = height - 2;\n        return height;\n      }\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      } // Initialize\n\n\n      _init();\n    },\n    getElement: function getElement() {\n      return _element;\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutQuickUser;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLXVzZXIuanM/ODA5YSJdLCJuYW1lcyI6WyJLVExheW91dFF1aWNrVXNlciIsIl9lbGVtZW50IiwiX29mZmNhbnZhc09iamVjdCIsIl9pbml0IiwiaGVhZGVyIiwiS1RVdGlsIiwiZmluZCIsImNvbnRlbnQiLCJLVE9mZmNhbnZhcyIsIm92ZXJsYXkiLCJiYXNlQ2xhc3MiLCJwbGFjZW1lbnQiLCJjbG9zZUJ5IiwidG9nZ2xlQnkiLCJzY3JvbGxJbml0IiwiZGlzYWJsZUZvck1vYmlsZSIsInJlc2V0SGVpZ2h0T25EZXN0cm95IiwiaGFuZGxlV2luZG93UmVzaXplIiwiaGVpZ2h0IiwicGFyc2VJbnQiLCJnZXRWaWV3UG9ydCIsImFjdHVhbEhlaWdodCIsImNzcyIsImluaXQiLCJpZCIsImdldEJ5SWQiLCJnZXRFbGVtZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsaUJBQWlCLEdBQUcsWUFBVztBQUMvQjtBQUNBLE1BQUlDLFFBQUo7O0FBQ0EsTUFBSUMsZ0JBQUosQ0FIK0IsQ0FLL0I7OztBQUNBLE1BQUlDLEtBQUssR0FBRyxTQUFSQSxLQUFRLEdBQVc7QUFDbkIsUUFBSUMsTUFBTSxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWUwsUUFBWixFQUFzQixtQkFBdEIsQ0FBYjtBQUNBLFFBQUlNLE9BQU8sR0FBR0YsTUFBTSxDQUFDQyxJQUFQLENBQVlMLFFBQVosRUFBc0Isb0JBQXRCLENBQWQ7QUFFQUMsb0JBQWdCLEdBQUcsSUFBSU0sV0FBSixDQUFnQlAsUUFBaEIsRUFBMEI7QUFDekNRLGFBQU8sRUFBRSxJQURnQztBQUV6Q0MsZUFBUyxFQUFFLFdBRjhCO0FBR3pDQyxlQUFTLEVBQUUsT0FIOEI7QUFJekNDLGFBQU8sRUFBRSxxQkFKZ0M7QUFLekNDLGNBQVEsRUFBRTtBQUwrQixLQUExQixDQUFuQjtBQVFBUixVQUFNLENBQUNTLFVBQVAsQ0FBa0JQLE9BQWxCLEVBQTJCO0FBQ3ZCUSxzQkFBZ0IsRUFBRSxJQURLO0FBRXZCQywwQkFBb0IsRUFBRSxJQUZDO0FBR3ZCQyx3QkFBa0IsRUFBRSxJQUhHO0FBSXZCQyxZQUFNLEVBQUUsa0JBQVc7QUFDZixZQUFJQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDZSxXQUFQLEdBQXFCRixNQUF0QixDQUFyQjs7QUFFQSxZQUFJZCxNQUFKLEVBQVk7QUFDUmMsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2dCLFlBQVAsQ0FBb0JqQixNQUFwQixDQUFELENBQTFCO0FBQ0FjLGdCQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDZCxNQUFNLENBQUNpQixHQUFQLENBQVdsQixNQUFYLEVBQW1CLFdBQW5CLENBQUQsQ0FBMUI7QUFDQWMsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQVAsQ0FBV2xCLE1BQVgsRUFBbUIsY0FBbkIsQ0FBRCxDQUExQjtBQUNIOztBQUVELFlBQUlHLE9BQUosRUFBYTtBQUNUVyxnQkFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDaUIsR0FBUCxDQUFXZixPQUFYLEVBQW9CLFdBQXBCLENBQUQsQ0FBMUI7QUFDQVcsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQVAsQ0FBV2YsT0FBWCxFQUFvQixjQUFwQixDQUFELENBQTFCO0FBQ0g7O0FBRURXLGNBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQVAsQ0FBV3JCLFFBQVgsRUFBcUIsWUFBckIsQ0FBRCxDQUExQjtBQUNBaUIsY0FBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDaUIsR0FBUCxDQUFXckIsUUFBWCxFQUFxQixlQUFyQixDQUFELENBQTFCO0FBRUFpQixjQUFNLEdBQUdBLE1BQU0sR0FBRyxDQUFsQjtBQUVBLGVBQU9BLE1BQVA7QUFDSDtBQXhCc0IsS0FBM0I7QUEwQkgsR0F0Q0QsQ0FOK0IsQ0E4Qy9COzs7QUFDQSxTQUFPO0FBQ0hLLFFBQUksRUFBRSxjQUFTQyxFQUFULEVBQWE7QUFDZnZCLGNBQVEsR0FBR0ksTUFBTSxDQUFDb0IsT0FBUCxDQUFlRCxFQUFmLENBQVg7O0FBRUEsVUFBSSxDQUFDdkIsUUFBTCxFQUFlO0FBQ1g7QUFDSCxPQUxjLENBT2Y7OztBQUNBRSxXQUFLO0FBQ1IsS0FWRTtBQVlIdUIsY0FBVSxFQUFFLHNCQUFXO0FBQ25CLGFBQU96QixRQUFQO0FBQ0g7QUFkRSxHQUFQO0FBZ0JILENBL0R1QixFQUF4QixDLENBaUVBOzs7QUFDQSxJQUFJLElBQUosRUFBbUM7QUFDbEMwQixRQUFNLENBQUNDLE9BQVAsR0FBaUI1QixpQkFBakI7QUFDQSIsImZpbGUiOiIuL3Jlc291cmNlcy9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvcXVpY2stdXNlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUTGF5b3V0UXVpY2tVc2VyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuICAgIHZhciBfZWxlbWVudDtcclxuICAgIHZhciBfb2ZmY2FudmFzT2JqZWN0O1xyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcbiAgICB2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaGVhZGVyID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWhlYWRlcicpO1xyXG4gICAgICAgIHZhciBjb250ZW50ID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWNvbnRlbnQnKTtcclxuXHJcbiAgICAgICAgX29mZmNhbnZhc09iamVjdCA9IG5ldyBLVE9mZmNhbnZhcyhfZWxlbWVudCwge1xyXG4gICAgICAgICAgICBvdmVybGF5OiB0cnVlLFxyXG4gICAgICAgICAgICBiYXNlQ2xhc3M6ICdvZmZjYW52YXMnLFxyXG4gICAgICAgICAgICBwbGFjZW1lbnQ6ICdyaWdodCcsXHJcbiAgICAgICAgICAgIGNsb3NlQnk6ICdrdF9xdWlja191c2VyX2Nsb3NlJyxcclxuICAgICAgICAgICAgdG9nZ2xlQnk6ICdrdF9xdWlja191c2VyX3RvZ2dsZSdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgS1RVdGlsLnNjcm9sbEluaXQoY29udGVudCwge1xyXG4gICAgICAgICAgICBkaXNhYmxlRm9yTW9iaWxlOiB0cnVlLFxyXG4gICAgICAgICAgICByZXNldEhlaWdodE9uRGVzdHJveTogdHJ1ZSxcclxuICAgICAgICAgICAgaGFuZGxlV2luZG93UmVzaXplOiB0cnVlLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5nZXRWaWV3UG9ydCgpLmhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGhlYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5hY3R1YWxIZWlnaHQoaGVhZGVyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Cb3R0b20nKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNvbnRlbnQsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjb250ZW50LCAnbWFyZ2luQm90dG9tJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nVG9wJykpO1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ3BhZGRpbmdCb3R0b20nKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gMjtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemVcclxuICAgICAgICAgICAgX2luaXQoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9lbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0UXVpY2tVc2VyO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/quick-user.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/scrolltop.js":
/*!************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/scrolltop.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutScrolltop = function () {\n  // Private properties\n  var _element;\n\n  var _object; // Private functions\n\n\n  var _init = function _init() {\n    _object = new KTScrolltop(_element, {\n      offset: 300,\n      speed: 600\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      } // Initialize\n\n\n      _init();\n    },\n    getElement: function getElement() {\n      return _element;\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutScrolltop;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3Njcm9sbHRvcC5qcz8yOTUyIl0sIm5hbWVzIjpbIktUTGF5b3V0U2Nyb2xsdG9wIiwiX2VsZW1lbnQiLCJfb2JqZWN0IiwiX2luaXQiLCJLVFNjcm9sbHRvcCIsIm9mZnNldCIsInNwZWVkIiwiaW5pdCIsImlkIiwiS1RVdGlsIiwiZ2V0QnlJZCIsImdldEVsZW1lbnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxpQkFBaUIsR0FBRyxZQUFXO0FBQy9CO0FBQ0EsTUFBSUMsUUFBSjs7QUFDQSxNQUFJQyxPQUFKLENBSCtCLENBSy9COzs7QUFDQSxNQUFJQyxLQUFLLEdBQUcsU0FBUkEsS0FBUSxHQUFXO0FBQ25CRCxXQUFPLEdBQUcsSUFBSUUsV0FBSixDQUFnQkgsUUFBaEIsRUFBMEI7QUFDbENJLFlBQU0sRUFBRSxHQUQwQjtBQUVsQ0MsV0FBSyxFQUFFO0FBRjJCLEtBQTFCLENBQVY7QUFJSCxHQUxELENBTitCLENBYS9COzs7QUFDSCxTQUFPO0FBQ05DLFFBQUksRUFBRSxjQUFTQyxFQUFULEVBQWE7QUFDVFAsY0FBUSxHQUFHUSxNQUFNLENBQUNDLE9BQVAsQ0FBZUYsRUFBZixDQUFYOztBQUVBLFVBQUksQ0FBQ1AsUUFBTCxFQUFlO0FBQ1g7QUFDSCxPQUxRLENBT1Q7OztBQUNBRSxXQUFLO0FBQ2QsS0FWSztBQVlBUSxjQUFVLEVBQUUsc0JBQVc7QUFDbkIsYUFBT1YsUUFBUDtBQUNIO0FBZEQsR0FBUDtBQWdCQSxDQTlCdUIsRUFBeEIsQyxDQWdDQTs7O0FBQ0EsSUFBSSxJQUFKLEVBQW1DO0FBQ2xDVyxRQUFNLENBQUNDLE9BQVAsR0FBaUJiLGlCQUFqQjtBQUNBIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9leHRlbmRlZC9zY3JvbGx0b3AuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dFNjcm9sbHRvcCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gUHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICB2YXIgX2VsZW1lbnQ7XHJcbiAgICB2YXIgX29iamVjdDtcclxuXHJcbiAgICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG4gICAgdmFyIF9pbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgX29iamVjdCA9IG5ldyBLVFNjcm9sbHRvcChfZWxlbWVudCwge1xyXG4gICAgICAgICAgb2Zmc2V0OiAzMDAsXHJcbiAgICAgICAgICBzcGVlZDogNjAwLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcblx0cmV0dXJuIHtcclxuXHRcdGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplXHJcbiAgICAgICAgICAgIF9pbml0KCk7XHJcblx0XHR9LFxyXG5cclxuICAgICAgICBnZXRFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9lbGVtZW50O1xyXG4gICAgICAgIH1cclxuXHR9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dFNjcm9sbHRvcDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/scrolltop.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/search.js":
/*!*********************************************************!*\
  !*** ./resources/metronic/js/layout/extended/search.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" //\n// Handle User Quick Search For Dropdown, Inline and Offcanvas Search Panels\n//\n\nvar KTLayoutSearch = function KTLayoutSearch() {\n  // Private properties\n  var _target;\n\n  var _form;\n\n  var _input;\n\n  var _closeIcon;\n\n  var _resultWrapper;\n\n  var _resultDropdown;\n\n  var _resultDropdownToggle;\n\n  var _closeIconContainer;\n\n  var _inputGroup;\n\n  var _query = '';\n  var _hasResult = false;\n  var _timeout = false;\n  var _isProcessing = false;\n  var _requestTimeout = 200; // ajax request fire timeout in milliseconds\n\n  var _spinnerClass = 'spinner spinner-sm spinner-primary';\n  var _resultClass = 'quick-search-has-result';\n  var _minLength = 2; // Private functions\n\n  var _showProgress = function _showProgress() {\n    _isProcessing = true;\n    KTUtil.addClass(_closeIconContainer, _spinnerClass);\n\n    if (_closeIcon) {\n      KTUtil.hide(_closeIcon);\n    }\n  };\n\n  var _hideProgress = function _hideProgress() {\n    _isProcessing = false;\n    KTUtil.removeClass(_closeIconContainer, _spinnerClass);\n\n    if (_closeIcon) {\n      if (_input.value.length < _minLength) {\n        KTUtil.hide(_closeIcon);\n      } else {\n        KTUtil.show(_closeIcon, 'flex');\n      }\n    }\n  };\n\n  var _showDropdown = function _showDropdown() {\n    if (_resultDropdownToggle && !KTUtil.hasClass(_resultDropdown, 'show')) {\n      $(_resultDropdownToggle).dropdown('toggle');\n      $(_resultDropdownToggle).dropdown('update');\n    }\n  };\n\n  var _hideDropdown = function _hideDropdown() {\n    if (_resultDropdownToggle && KTUtil.hasClass(_resultDropdown, 'show')) {\n      $(_resultDropdownToggle).dropdown('toggle');\n    }\n  };\n\n  var _processSearch = function _processSearch() {\n    if (_hasResult && _query === _input.value) {\n      _hideProgress();\n\n      KTUtil.addClass(_target, _resultClass);\n\n      _showDropdown();\n\n      KTUtil.scrollUpdate(_resultWrapper);\n      return;\n    }\n\n    _query = _input.value;\n    KTUtil.removeClass(_target, _resultClass);\n\n    _showProgress();\n\n    _hideDropdown();\n\n    setTimeout(function () {\n      $.ajax({\n        url: HOST_URL + '',\n        data: {\n          query: _query\n        },\n        dataType: 'html',\n        success: function success(res) {\n          _hasResult = true;\n\n          _hideProgress();\n\n          KTUtil.addClass(_target, _resultClass);\n          KTUtil.setHTML(_resultWrapper, res);\n\n          _showDropdown();\n\n          KTUtil.scrollUpdate(_resultWrapper);\n        },\n        error: function error(res) {\n          _hasResult = false;\n\n          _hideProgress();\n\n          KTUtil.addClass(_target, _resultClass);\n          KTUtil.setHTML(_resultWrapper, '<span class=\"font-weight-bold text-muted\">Connection error. Please try again later..</div>');\n\n          _showDropdown();\n\n          KTUtil.scrollUpdate(_resultWrapper);\n        }\n      });\n    }, 1000);\n  };\n\n  var _handleCancel = function _handleCancel(e) {\n    _input.value = '';\n    _query = '';\n    _hasResult = false;\n    KTUtil.hide(_closeIcon);\n    KTUtil.removeClass(_target, _resultClass);\n\n    _hideDropdown();\n  };\n\n  var _handleSearch = function _handleSearch() {\n    if (_input.value.length < _minLength) {\n      _hideProgress();\n\n      _hideDropdown();\n\n      return;\n    }\n\n    if (_isProcessing == true) {\n      return;\n    }\n\n    if (_timeout) {\n      clearTimeout(_timeout);\n    }\n\n    _timeout = setTimeout(function () {\n      _processSearch();\n    }, _requestTimeout);\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _target = KTUtil.getById(id);\n\n      if (!_target) {\n        return;\n      }\n\n      _form = KTUtil.find(_target, '.quick-search-form');\n      _input = KTUtil.find(_target, '.form-control');\n      _closeIcon = KTUtil.find(_target, '.quick-search-close');\n      _resultWrapper = KTUtil.find(_target, '.quick-search-wrapper');\n      _resultDropdown = KTUtil.find(_target, '.dropdown-menu');\n      _resultDropdownToggle = KTUtil.find(_target, '[data-toggle=\"dropdown\"]');\n      _inputGroup = KTUtil.find(_target, '.input-group');\n      _closeIconContainer = KTUtil.find(_target, '.input-group .input-group-append'); // Attach input keyup handler\n\n      KTUtil.addEvent(_input, 'keyup', _handleSearch);\n      KTUtil.addEvent(_input, 'focus', _handleSearch); // Prevent enter click\n\n      _form.onkeypress = function (e) {\n        var key = e.charCode || e.keyCode || 0;\n\n        if (key == 13) {\n          e.preventDefault();\n        }\n      };\n\n      KTUtil.addEvent(_closeIcon, 'click', _handleCancel);\n    }\n  };\n}; // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutSearch;\n}\n\nvar KTLayoutSearchInline = KTLayoutSearch;\nvar KTLayoutSearchOffcanvas = KTLayoutSearch;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/search.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/initialize.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/layout/initialize.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Initialization\n\nKTUtil.ready(function () {\n  ////////////////////////////////////////////////////\n  // Layout Base Partials(mandatory for core layout)//\n  ////////////////////////////////////////////////////\n  // Init Desktop & Mobile Headers\n  if (typeof KTLayoutHeader !== 'undefined') {\n    KTLayoutHeader.init('kt_header', 'kt_header_mobile');\n  } // Init Header Menu\n\n\n  if (typeof KTLayoutHeaderMenu !== 'undefined') {\n    KTLayoutHeaderMenu.init('kt_header_menu', 'kt_header_menu_wrapper');\n  } // Init Header Topbar For Mobile Mode\n\n\n  if (typeof KTLayoutHeaderTopbar !== 'undefined') {\n    KTLayoutHeaderTopbar.init('kt_header_mobile_topbar_toggle');\n  } // Init Brand Panel For Logo\n\n\n  if (typeof KTLayoutBrand !== 'undefined') {\n    KTLayoutBrand.init('kt_brand');\n  } // Init Aside\n\n\n  if (typeof KTLayoutAside !== 'undefined') {\n    KTLayoutAside.init('kt_aside');\n  } // Init Aside Menu Toggle\n\n\n  if (typeof KTLayoutAsideToggle !== 'undefined') {\n    KTLayoutAsideToggle.init('kt_aside_toggle');\n  } // Init Aside Menu\n\n\n  if (typeof KTLayoutAsideMenu !== 'undefined') {\n    KTLayoutAsideMenu.init('kt_aside_menu');\n  } // Init Subheader\n\n\n  if (typeof KTLayoutSubheader !== 'undefined') {\n    KTLayoutSubheader.init('kt_subheader');\n  } // Init Content\n\n\n  if (typeof KTLayoutContent !== 'undefined') {\n    KTLayoutContent.init('kt_content');\n  } // Init Footer\n\n\n  if (typeof KTLayoutFooter !== 'undefined') {\n    KTLayoutFooter.init('kt_footer');\n  } //////////////////////////////////////////////\n  // Layout Extended Partials(optional to use)//\n  //////////////////////////////////////////////\n  // Init Scrolltop\n\n\n  if (typeof KTLayoutScrolltop !== 'undefined') {\n    KTLayoutScrolltop.init('kt_scrolltop');\n  } // Init Sticky Card\n\n\n  if (typeof KTLayoutStickyCard !== 'undefined') {\n    KTLayoutStickyCard.init('kt_page_sticky_card');\n  } // Init Stretched Card\n\n\n  if (typeof KTLayoutStretchedCard !== 'undefined') {\n    KTLayoutStretchedCard.init('kt_page_stretched_card');\n  } // Init Code Highlighter & Preview Blocks(used to demonstrate the theme features)\n\n\n  if (typeof KTLayoutExamples !== 'undefined') {\n    KTLayoutExamples.init();\n  } // Init Demo Selection Panel\n\n\n  if (typeof KTLayoutDemoPanel !== 'undefined') {\n    KTLayoutDemoPanel.init('kt_demo_panel');\n  } // Init Chat App(quick modal chat)\n\n\n  if (typeof KTLayoutChat !== 'undefined') {\n    KTLayoutChat.init('kt_chat_modal');\n  } // Init Quick Actions Offcanvas Panel\n\n\n  if (typeof KTLayoutQuickActions !== 'undefined') {\n    KTLayoutQuickActions.init('kt_quick_actions');\n  } // Init Quick Notifications Offcanvas Panel\n\n\n  if (typeof KTLayoutQuickNotifications !== 'undefined') {\n    KTLayoutQuickNotifications.init('kt_quick_notifications');\n  } // Init Quick Offcanvas Panel\n\n\n  if (typeof KTLayoutQuickPanel !== 'undefined') {\n    KTLayoutQuickPanel.init('kt_quick_panel');\n  } // Init Quick User Panel\n\n\n  if (typeof KTLayoutQuickUser !== 'undefined') {\n    KTLayoutQuickUser.init('kt_quick_user');\n  } // Init Quick Search Panel\n\n\n  if (typeof KTLayoutQuickSearch !== 'undefined') {\n    KTLayoutQuickSearch.init('kt_quick_search');\n  } // Init Quick Cart Panel\n\n\n  if (typeof KTLayoutQuickCartPanel !== 'undefined') {\n    KTLayoutQuickCartPanel.init('kt_quick_cart');\n  } // Init Search For Quick Search Dropdown\n\n\n  if (typeof KTLayoutSearch !== 'undefined') {\n    KTLayoutSearch().init('kt_quick_search_dropdown');\n  } // Init Search For Quick Search Offcanvas Panel\n\n\n  if (typeof KTLayoutSearchOffcanvas !== 'undefined') {\n    KTLayoutSearchOffcanvas().init('kt_quick_search_offcanvas');\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/initialize.js\n");

/***/ }),

/***/ 2:
/*!***************************************!*\
  !*** multi ./resources/js/scripts.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\wamp64\www\keenthemes\themes\metronic\theme\html_laravel\demo1\skeleton\resources\js\scripts.js */"./resources/js/scripts.js");


/***/ })

/******/ });